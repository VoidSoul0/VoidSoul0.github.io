<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT入门以及在java中的使用</title>
    <url>/java/jwt-java/</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="/java/jwt-java/image-20200922172321041.png" alt="image-20200922172321041"></p>
<h3 id="1、什么是JWT"><a href="#1、什么是JWT" class="headerlink" title="1、什么是JWT"></a>1、什么是JWT</h3><p><span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v">JWT<i class="fa fa-external-link-alt"></i></span>即JSON Web Tokens，它是一种紧凑的、URL安全的方法，用于表示要在双方之间传输的声明（claims）。JWT中的声明被编码为一个JSON对象，该对象被用作JSON Web签名（Signature）（JWS）结构的有效载荷（payload）或JSON Web加密（JWE）结构的明文，从而能够使用消息认证码（MAC）和/或加密算法对声明进行数字签名或完整性保护。</p>
<a id="more"></a>

<p>JWT是一个开放标准（<span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc1MTk=">RFC 7519<i class="fa fa-external-link-alt"></i></span>），它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用密钥（通过<strong>HMAC</strong>算法）或<strong>RSA</strong>、<strong>ECDSA</strong>算法的公钥/私钥对JWT进行<strong>签名</strong>。</p>
<p>简单来说，JWT定义了一种结构标准，其使用JSON的表达方式，通过编码为一段字符串来传递令牌信息。</p>
<h3 id="2、什么时候使用JWT"><a href="#2、什么时候使用JWT" class="headerlink" title="2、什么时候使用JWT"></a>2、什么时候使用JWT</h3><ul>
<li><strong>授权</strong>：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项特点，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li><strong>信息交换</strong>：JWT是在各方之间安全传输信息的好方法。因为可以对JWT进行签名（例如：使用公钥/私钥对），所以您可以确保发送者就是他们所说的那样。此外，由于签名是使用标头和有效负载计算的，因此还可以验证内容是否遭到篡改。</li>
</ul>
<h2 id="二、JWT的结构"><a href="#二、JWT的结构" class="headerlink" title="二、JWT的结构"></a>二、JWT的结构</h2><p>通过上面的介绍，也许你还无法完全理解JWT是什么，那么下面从JWT的结构来认识它。JWT结构是紧凑的，它由<code>.</code>分为三部分：</p>
<ul>
<li>标头（Header）</li>
<li>有效负载（Payload）</li>
<li>签名（Signature）</li>
</ul>
<p>类似下面这样（内容已被编码，以<code>.</code>分割没有换行符，仅展示用）</p>
<p><img src="https://cdn.auth0.com/content/jwt/encoded-jwt3.png" alt="JWT structure"></p>
<h3 id="1、标头"><a href="#1、标头" class="headerlink" title="1、标头"></a>1、标头</h3><p>标头通常由两部分组成：令牌的类型（即JWT）和使用的签名算法，如HMAC SHA256或RSA。例如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，这个JSON被<a href="#4、Base64Url是什么？">Base64Url</a>编码，作为JWT的第一部分。</p>
<h3 id="2、有效负载"><a href="#2、有效负载" class="headerlink" title="2、有效负载"></a>2、有效负载</h3><p>这一部分包含声明（claims）。声明是有关实体（通常是用户）和其他数据的声明，其有以下三种类型：已注册的（官方定义），公共声明和私有声明。</p>
<p>下面是JWT定义的7个官方字段，这是一组预定义的、推荐的非强制性的字段，以提供一组实用的、可互操作的声明。</p>
<ul>
<li>iss (issuer)：签发人</li>
<li>exp (expiration time)：过期时间</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众（JWT的接受者）</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
<blockquote>
<p>因为JWT紧凑的设计原则，所以字段名称简写为仅三个字母</p>
</blockquote>
<p>除了上面7个官方已注册的字段声明，还有一些公共的，参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvand0L2p3dC54aHRtbA==">IANA JSON Web Token注册表<i class="fa fa-external-link-alt"></i></span>。</p>
<p>除此以外，为了在使用JWT的各方之间共享信息而创建的，可以使用自定义字段的私有声明，这些声明既不是已注册的，也不是公共的。</p>
<p>可能的示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后同样被<a href="#4、Base64Url是什么？">Base64Url</a>编码，作为JWT的第二部分</p>
<h3 id="3、签名"><a href="#3、签名" class="headerlink" title="3、签名"></a>3、签名</h3><p>签名用于验证消息在此过程中没有被更改，并且对于使用私钥进行签名的令牌，它还可以验证JWT的发送者的身份是真实的。</p>
<p>这一部分使用在<a href="#1、标头">标头</a>指定的签名算法（默认是 HMAC SHA256），以及指定的密钥（secret）通过以下方式创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>注意：这里的<code>.</code>不是生成后的token里的<code>.</code>，而是用于校验签名解码时分割<code>header</code>和<code>payload</code>的。</p>
<p>因为JWT使用的编码算法是可解码的。所以<strong>不要把敏感信息储存在JWT中</strong>（如密码）</p>
<h3 id="4、Base64Url"><a href="#4、Base64Url" class="headerlink" title="4、Base64Url"></a>4、Base64Url</h3><blockquote>
<p>JWT 作为一个令牌（token），有些场合可能会放到 URL 的参数中。原Base64编码有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义不能直接使用，所以要稍作修改：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p>
</blockquote>
<h2 id="三、Java-JWT"><a href="#三、Java-JWT" class="headerlink" title="三、Java-JWT"></a>三、Java-JWT</h2><p>因为JWT设计的特性，所以可以通过各种编程语言来实现<span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8vI2xpYnJhcmllcy1pbw==">用于令牌签名/验证的库<i class="fa fa-external-link-alt"></i></span>在不同的编程语言中使用JWT。</p>
<p>这一节将介绍由java语言实现的JWT库：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2phdmEtand0">java-jwt<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>新建一个普通的maven项目，不选择原型，导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、创建并签署令牌"><a href="#2、创建并签署令牌" class="headerlink" title="2、创建并签署令牌"></a>2、创建并签署令牌</h3><p>先定义两个常量，分别是使用的算法类型（包含密钥）和签发人，便于后面验证时也能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Algorithm ALGORITHM = Algorithm.HMAC256(<span class="string">"secret"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISSUER = <span class="string">"system"</span>;</span><br></pre></td></tr></table></figure>

<p>通过<code>JWT.create()</code>静态方法来创建JWT构建对象，使用withXXX可链式调用的方法来添加字段，最后调用<code>sign(ALGORITHM)</code>创建一个给定算法的JWT字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">	String token = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		token = JWT.create()</span><br><span class="line">				.withIssuer(ISSUER)</span><br><span class="line">				.withIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">				.withNotBefore(<span class="keyword">new</span> Date())</span><br><span class="line">				.withExpiresAt(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">60000</span>))</span><br><span class="line">				.withSubject(<span class="string">"admin"</span>)</span><br><span class="line">				.withClaim(<span class="string">"username"</span>, <span class="string">"admin"</span>)</span><br><span class="line">				.sign(ALGORITHM);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (JWTCreationException e)&#123;</span><br><span class="line">		System.err.println(<span class="string">"Invalid Signing configuration / Couldn't convert Claims."</span>);</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、验证令牌"><a href="#3、验证令牌" class="headerlink" title="3、验证令牌"></a>3、验证令牌</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">verifyToken</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		JWTVerifier verifier = JWT.require(ALGORITHM)</span><br><span class="line">				.withIssuer(ISSUER)</span><br><span class="line">				.build(); <span class="comment">//Reusable verifier instance</span></span><br><span class="line"></span><br><span class="line">		verifier.verify(token);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (JWTVerificationException e)&#123;</span><br><span class="line">		System.err.println(<span class="string">"Invalid signature/claims"</span>);</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用之前定义的两个常量，这里可以创建一个可重用的验证实例。然后调用<code>verify()</code>方法执行验证，无需返回值，验证失败时会抛出异常</p>
<h3 id="4、解码获取令牌信息"><a href="#4、解码获取令牌信息" class="headerlink" title="4、解码获取令牌信息"></a>4、解码获取令牌信息</h3><p>使用<code>JWT.decode()</code>方法获取<code>DecodedJWT</code>对象即可，没有定义的字段会返回<code>null</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printJwtInfo</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">	DecodedJWT jwt = JWT.decode(token);</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"Header\t\t-&gt; "</span> + jwt.getHeader());</span><br><span class="line">	System.out.println(<span class="string">"Payload\t\t-&gt; "</span> + jwt.getPayload());</span><br><span class="line">	System.out.println(<span class="string">"Signature\t-&gt; "</span> + jwt.getSignature());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Header</span></span><br><span class="line">	System.out.println(jwt.getAlgorithm());</span><br><span class="line">	System.out.println(jwt.getType());</span><br><span class="line">	System.out.println(jwt.getContentType());</span><br><span class="line">	System.out.println(jwt.getKeyId());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Payload</span></span><br><span class="line">	System.out.println(jwt.getIssuer());</span><br><span class="line">	System.out.println(jwt.getSubject());</span><br><span class="line">	System.out.println(jwt.getAudience());</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getExpiresAt()));</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getNotBefore()));</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getIssuedAt()));</span><br><span class="line">	System.out.println(jwt.getId());</span><br><span class="line">	<span class="comment">// Private claims</span></span><br><span class="line">	System.out.println(jwt.getClaim(<span class="string">"username"</span>).asString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、运行测试"><a href="#5、运行测试" class="headerlink" title="5、运行测试"></a>5、运行测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String token = getToken();</span><br><span class="line">    verifyToken(token);</span><br><span class="line">    printJwtInfo(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200924193627631.png" alt="image-20200924193627631"></p>
<p>参考链接：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v">JWT官网<i class="fa fa-external-link-alt"></i></span> —— Auth0</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTgvMDcvanNvbl93ZWJfdG9rZW4tdHV0b3JpYWwuaHRtbA==">JSON Web Token 入门教程<i class="fa fa-external-link-alt"></i></span> —— 阮一峰</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbmRhaWx5LmNvbS9ibG9nLz9wPTk1Ng==">各类JWT库(java)的使用与评价<i class="fa fa-external-link-alt"></i></span>(2018-06-02) —— andaily</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jwt</tag>
        <tag>json</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7中Redis的安装与使用</title>
    <url>/redis/centos-redis/</url>
    <content><![CDATA[<h3 id="一、检查环境"><a href="#一、检查环境" class="headerlink" title="一、检查环境"></a>一、检查环境</h3><p>由于Rdis官方只提供了源码包，安装需要进行编译。而CentOS7自带的gcc版本为4.8.5，目前的Redis版本为6.0.5，直接编译安装会报错，所以需要升级一下gcc</p>
<a id="more"></a>

<p><img src="image-20200717153808662.png" alt="image-20200717153808662"></p>
<h3 id="二、升级gcc"><a href="#二、升级gcc" class="headerlink" title="二、升级gcc"></a>二、升级gcc</h3><h4 id="1、yum安装"><a href="#1、yum安装" class="headerlink" title="1、yum安装"></a>1、yum安装</h4><p>先切换到/opt目录，依次执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-9-gcc*</span><br></pre></td></tr></table></figure>

<p>途中会询问，输入y即可</p>
<p><img src="image-20200717160709600.png" alt="image-20200717160709600"></p>
<p><img src="image-20200717161107132.png" alt="image-20200717161107132"></p>
<p><img src="image-20200717161233158.png" alt="image-20200717161233158"></p>
<h4 id="2、临时启用"><a href="#2、临时启用" class="headerlink" title="2、临时启用"></a>2、临时启用</h4><p>执行<code>scl enable devtoolset-9 bash</code>以临时启用新安装的gcc，但是退出shell或重启系统会恢复为原来的gcc版本</p>
<h4 id="3、长期启用"><a href="#3、长期启用" class="headerlink" title="3、长期启用"></a>3、长期启用</h4><p>要长期有效需要配置在环境文件<code>/etc/profeile</code>里追加一行<code>source /opt/rh/devtoolset-9/enable</code>，然后<code>source /etc/profeile</code>使其生效，最后<code>gcc -v</code>检查版本</p>
<p><img src="image-20200717162019916.png" alt="image-20200717162019916"></p>
<h3 id="三、安装Redis"><a href="#三、安装Redis" class="headerlink" title="三、安装Redis"></a>三、安装Redis</h3><p>接下来就可以按照<span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby9kb3dubG9hZA==">官网<i class="fa fa-external-link-alt"></i></span>上的说明来编译安装Redis了</p>
<h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.5.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="image-20200717162533467.png" alt="image-20200717162533467"></p>
<p>虽然只有2.1M，但几十KB/s的速度还是比较慢的，也可以选择自己下载后用FTP传上去</p>
<h4 id="2、解压缩"><a href="#2、解压缩" class="headerlink" title="2、解压缩"></a>2、解压缩</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf redis-6.0.5.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="image-20200717162732596.png" alt="image-20200717162732596"></p>
<h4 id="3、编译"><a href="#3、编译" class="headerlink" title="3、编译"></a>3、编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.0.5</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>此过程比较漫长，大概需要2分钟（1核2G服务器）</p>
<h4 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h4><p>在redis-6.0.5目录下执行<code>src/redis-server</code>即可，此时是前台运行状态</p>
<p><img src="image-20200717163156041.png" alt="image-20200717163156041"></p>
<h4 id="5、安装"><a href="#5、安装" class="headerlink" title="5、安装"></a>5、安装</h4><p>执行<code>make install</code>将src下编译好的文件安装到当前系统，就不用每次都去源码包下运行了</p>
<p><img src="image-20200717190817928.png" alt="image-20200717190817928"></p>
<p>安装后的路径在<code>/usr/local/bin</code>里</p>
<h4 id="6、配置守护进程-后台运行"><a href="#6、配置守护进程-后台运行" class="headerlink" title="6、配置守护进程(后台运行)"></a>6、配置守护进程(后台运行)</h4><p>复制一份配置文件过去，不在默认的文件上修改</p>
<p><img src="image-20200717192911600.png" alt="image-20200717192911600"></p>
<p>在206行的位置，把no改为yes，上面的注释说：默认Redis不是以守护进程运行的，如果需要的话使用yes来开启，同时Redis会写入pid文件在/var/run/redis.pid</p>
<p><img src="image-20200717195550732.png" alt="image-20200717195550732"></p>
<p>此时启动Redis，记得添加配置文件为参数。然后启动redis-cli客户端程序，使用<code>ping</code>命令验通（默认链接127.0.0.1:6379）</p>
<p><img src="image-20200717201348919.png" alt="image-20200717201348919"></p>
<p>检查进程</p>
<p><img src="image-20200717201714670.png" alt="image-20200717201714670"></p>
<h4 id="7、关闭"><a href="#7、关闭" class="headerlink" title="7、关闭"></a>7、关闭</h4><p>在客户端执行<code>shutdown</code>命令关闭redis，<code>exit</code>退出客户端</p>
<p><img src="image-20200717201815520.png" alt="image-20200717201815520"></p>
<p>再次检查进程，服务端与客户端均已关闭</p>
<p><img src="image-20200717201930903.png" alt="image-20200717201930903"></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记（上）</title>
    <url>/linux/linux-learn-part1/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote>
<p>Linux，全称GNU/Linux，是一套免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年第一次释出，它主要受到Minix和Unix思想的启发，是一个基于POSIX和Unix的<strong>多用户</strong>、<strong>多任务</strong>、支持<strong>多线程</strong>和<strong>多CPU</strong>的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix<strong>以网络为核心</strong>的设计思想，是一个性能稳定的<strong>多用户网络操作系统</strong>。</p>
</blockquote>
<a id="more"></a>

<p>Linux也是<code>Linux is not Unix</code>的递归缩写。</p>
<p>本文基于Linux的发行版之一：CentOS来介绍，所以先了解下什么是Linux的发行版</p>
<h3 id="1、Linux发行版"><a href="#1、Linux发行版" class="headerlink" title="1、Linux发行版"></a>1、Linux发行版</h3><blockquote>
<p>Linux 主要作为Linux发行版（distro）的一部分而使用。这些发行版由个人，松散组织的团队，以及商业机构和志愿者组织编写。它们通常包括了其他的系统软件和应用软件，以及一个用来简化系统初始安装的安装工具，和让软件安装升级的集成管理器。大多数系统还包括了像提供GUI界面的XFree86之类的曾经运行于BSD的程序。 一个典型的Linux发行版包括：Linux内核，一些GNU程序库和工具，命令行shell，图形界面的X Window系统和相应的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件。</p>
</blockquote>
<p>简单来说发行版就是把Linux内核与一些应用软件做的一个打包集合</p>
<p><img src="1511849829609658.jpg" alt=""></p>
<blockquote>
<p>Linux有上百种不同的发行版，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、oracle linux等。</p>
</blockquote>
<p><img src="3197843091.jpg" alt=""></p>
<h3 id="2、CentOS"><a href="#2、CentOS" class="headerlink" title="2、CentOS"></a>2、CentOS</h3><blockquote>
<p>CentOS（Community Enterprise Operating System，社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS完全开源。</p>
</blockquote>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>因为Linux是操作系统，我们很难抛弃个人电脑原来使用的Windows系统而去重装一个不熟悉的Linux系统，而装双系统操作较繁琐，所以可选方案是将Linux装进虚拟机或者是直接购买云服务器（推荐，更接近实际工作场景）</p>
<h3 id="1、虚拟机"><a href="#1、虚拟机" class="headerlink" title="1、虚拟机"></a>1、虚拟机</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>虚拟机：使用的是VMware14Pro，如何下载安装自行了解，这里不另行说明</p>
<p>CentOS：在<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2VudG9zLm9yZy9kb3dubG9hZC8=">官网下载<i class="fa fa-external-link-alt"></i></span>或者是使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvY2VudG9z">阿里云的镜像站<i class="fa fa-external-link-alt"></i></span>，这里使用的是版本7，路径在<code>/centos/7.8.2003/isos/x86_64/</code>，各iso文件的区别在<code>0_README.txt</code>文件里有说明，点击<code>CentOS-7-x86_64-DVD-2003.iso</code>下载</p>
<h4 id="详细安装步骤"><a href="#详细安装步骤" class="headerlink" title="详细安装步骤"></a>详细安装步骤</h4><p><img src="image-20200704175752098.png" alt="image-20200704175752098"></p>
<p><img src="image-20200704175806688.png" alt="image-20200704175806688"></p>
<p>选择下载好的iso文件</p>
<p><img src="image-20200704175918620.png" alt="image-20200704175918620"></p>
<p>选择安装位置</p>
<p><img src="image-20200704180039490.png" alt="image-20200704180039490"></p>
<p>1核1G即可</p>
<p><img src="image-20200704180100845.png" alt="image-20200704180100845"></p>
<p><img src="image-20200704180121953.png" alt="image-20200704180121953"></p>
<p>选择网络类型</p>
<p><img src="image-20200704180151612.png" alt="image-20200704180151612"></p>
<p>默认推荐的即可</p>
<p><img src="image-20200704180231145.png" alt="image-20200704180231145"></p>
<p><img src="image-20200704180241883.png" alt="image-20200704180241883"></p>
<p><img src="image-20200704180306754.png" alt="image-20200704180306754"></p>
<p>安装完后实际占用空间大概1.6G，这里决定的是磁盘最大空间。不经常移动虚拟机文件可以选择存储为单个文件</p>
<p><img src="image-20200704180358585.png" alt="image-20200704180358585"></p>
<p>选择自定义硬件，把CPU虚拟化引擎的第一项打开</p>
<p><img src="image-20200704180656187.png" alt="image-20200704180656187"></p>
<p><img src="image-20200704180735179.png" alt="image-20200704180735179"></p>
<p>最后点击完成，自动启动虚拟机，使用方向键选择第一项按回车开始安装</p>
<p><img src="image-20200704180901840.png" alt="image-20200704180901840"></p>
<p>进入初始化界面，鼠标拉到最下方选择中文，点击继续</p>
<p><img src="image-20200704181229093.png" alt="image-20200704181229093"></p>
<p>点<strong>安装位置</strong>，其它都不用动，默认自动分区即可，左上角点击完成</p>
<p><img src="image-20200704181426905.png" alt="image-20200704181426905"></p>
<p>然后选择<strong>网络和主机名</strong>，打开网络连接，可以选择设置主机名</p>
<p><img src="image-20200704181656266.png" alt="image-20200704181656266"></p>
<p>然后开始安装，此时可以设置root账号的密码，如果设置简单的密码需要点两次完成来确认。</p>
<p>最后点击完成配置，补充配置完成后点击重启，自动重启虚拟机</p>
<p><img src="image-20200704181928071.png" alt="image-20200704181928071"></p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>此时进入命令行操作界面，输入管理员账号<code>root</code>和之前设置的密码来登录。<strong>输入密码时不会显示字符</strong></p>
<p><img src="image-20200704182950392.png" alt="image-20200704182950392"></p>
<h3 id="2、云服务器"><a href="#2、云服务器" class="headerlink" title="2、云服务器"></a>2、云服务器</h3><h4 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h4><p>国内云服务器大厂：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS8=">腾讯云<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=">阿里云<i class="fa fa-external-link-alt"></i></span>。可以在最新活动里看到比较优惠的套装</p>
<p>个人使用的，目前比较推荐腾讯云</p>
<p><img src="image-20200704221034338.png" alt="image-20200704221034338"></p>
<p>购买后会给你注册时的邮箱发送通知邮件，里面有初始密码和ip信息</p>
<p><img src="image-20200704222000888.png" alt="image-20200704222000888"></p>
<p>可以在腾讯云的控制台→云服务器→实例里修改密码，同时也会发送通知邮件</p>
<p><img src="image-20200704222255499.png" alt="image-20200704222255499"></p>
<h4 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h4><blockquote>
<p>安全组是一种虚拟防火墙，具备有状态的数据包过滤功能，用于设置云服务器、负载均衡、云数据库等实例的网络访问控制，控制实例级别的出入流量，是重要的网络安全隔离手段。<br>您可以通过配置安全组规则，允许或禁止安全组内的实例的出流量和入流量。</p>
</blockquote>
<p>需要注意的是：默认的安全组</p>
<ul>
<li>入站规则放行所有IPv4地址（<code>0.0.0.0/0</code>）的所有端口，禁止所有IPv6地址（<code>::/0</code>）的所有端口</li>
<li>出站规则放行所有IPv4地址（<code>0.0.0.0/0</code>）、所有IPv6地址（<code>::/0</code>）的所有端口</li>
</ul>
<p>同时安全组的优先级是从上到下</p>
<p><del>不怕被攻击的话默认的安全组设置就行了</del></p>
<p>具体介绍在<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzIxMy8xMjQ0Ng==">安全组帮助文档<i class="fa fa-external-link-alt"></i></span>都有说明，不同供应商的设置都是大同小异的</p>
<h3 id="3、远程登录"><a href="#3、远程登录" class="headerlink" title="3、远程登录"></a>3、远程登录</h3><p>本地虚拟机的命令行操作多有不便，而云服务器又不可能去实地操作，所以就需要使用SSH来进行远程登录</p>
<blockquote>
<p>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p>
</blockquote>
<p>在Windows系统上，这里使用的是Xshell。设置好登录之后会话界面如下</p>
<p><img src="image-20200704231827351.png" alt="image-20200704231827351"></p>
<p>登录后，光标闪烁前默认的字符类似这样<code>[root@VM-0-7-centos ~]#</code></p>
<p>其中@符号前表示当前登录的用户名，后面表示主机名，空格后面是当前的位置，<code>~</code>表示用户目录，对于root用户来说是<code>/root</code>，相当于Windows系统的<code>C:\Users\Administrator</code>。<code>#</code>是命令提示符，非root用户是<code>$</code></p>
<h2 id="三、基本目录结构"><a href="#三、基本目录结构" class="headerlink" title="三、基本目录结构"></a>三、基本目录结构</h2><p>Linux是基于文件的操作系统，万物皆文件（<code>Anything Is File</code>）。它的根目录用<code>/</code>表示，使用<code>ls /</code>命令查看根目录下的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos ~]<span class="comment"># ls /</span></span><br><span class="line">bin   data  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  dev   home  lib64  media       opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>

<p>一些主要目录的说明</p>
<p><img src="u=623782861,4176840120&fm=26&gp=0.jpg" alt="img"></p>
<p>其它目录：</p>
<ul>
<li><strong>/data</strong>：通常用来存放数据</li>
<li><strong>/lost+found</strong>：一般情况下是空的，当系统非正常情况关机后，这里就存放了一些文件。</li>
<li><strong>/proc</strong>：一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里</li>
<li><strong>/run</strong>：一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</li>
<li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li>
<li><strong>/media</strong>：自动识别的设备挂载目录，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>
<li><strong>/opt</strong>：额外安装软件所存放的目录</li>
<li><strong>/sys</strong>：sysfs文件系统，可以理解成硬件设备的驱动程序信息</li>
</ul>
<h2 id="四、文件与目录相关命令"><a href="#四、文件与目录相关命令" class="headerlink" title="四、文件与目录相关命令"></a>四、文件与目录相关命令</h2><h3 id="1、改变（切换）目录"><a href="#1、改变（切换）目录" class="headerlink" title="1、改变（切换）目录"></a>1、改变（切换）目录</h3><ul>
<li><p>cd：（Change Directory）目录名可以使用绝对路径（在linux中以<code>/</code>开头）或相对路径，当前目录<code>.</code>上级目录<code>..</code>用户目录<code>~</code></p>
<blockquote>
<p>cd    进入用户主目录；<br>cd ~  进入用户主目录；<br>cd -  返回进入此目录之前所在的目录；<br>cd ..  返回上级目录（若当前目录为“/“，则执行完后还在“/“）；<br>cd ../..  返回上两级目录；<br>cd !$  把上个命令的参数作为cd参数使用。</p>
</blockquote>
</li>
</ul>
<h3 id="2、列出目录内容"><a href="#2、列出目录内容" class="headerlink" title="2、列出目录内容"></a>2、列出目录内容</h3><ul>
<li><p>ls：（list）用来显示目标列表，在Linux中是使用率较高的命令。它的输出信息可以进行彩色加亮显示，以区分不同类型的文件（夹）</p>
<p>  一些选项：</p>
<blockquote>
<p>-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为隐藏，不会列出）；<br>-A：显示除隐藏文件“.”和“..”以外的所有文件列表；<br>-C：多列显示输出结果。这是默认选项；<br>-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；<br>-k：以KB（千字节）为单位显示文件大小；<br>-l：以长格式显示目录下的内容列表。（详细信息）<br>-m：用“,”号区隔每个文件和目录的名称；<br>-r：以文件名反序排列并输出目录内容列表；<br>-s：显示文件和目录的大小，以区块为单位；<br>-t：用文件和目录的更改时间排序；<br>-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；<br>-R：递归处理，将指定目录下的所有文件及子目录一并处理；<br>–full-time：列出完整的日期与时间；</p>
</blockquote>
</li>
</ul>
<h3 id="3、显示当前目录"><a href="#3、显示当前目录" class="headerlink" title="3、显示当前目录"></a>3、显示当前目录</h3><ul>
<li>pwd：（Print working directory）以绝对路径的方式显示用户当前工作目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>

<h3 id="4、创建目录"><a href="#4、创建目录" class="headerlink" title="4、创建目录"></a>4、创建目录</h3><ul>
<li><p>mkdir：（Make directory）用来创建目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。 </p>
<blockquote>
<p>-p或–parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录</p>
</blockquote>
</li>
</ul>
<h3 id="5-、删除目录"><a href="#5-、删除目录" class="headerlink" title="5 、删除目录"></a>5 、删除目录</h3><ul>
<li><p>rmdir：（Remove directory）用来删除空目录，可以从一个目录中删除一个或多个空的子目录</p>
<blockquote>
<p>-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除</p>
</blockquote>
</li>
</ul>
<h3 id="6、复制"><a href="#6、复制" class="headerlink" title="6、复制"></a>6、复制</h3><ul>
<li><p>cp：（Copy）用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。cp命令还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。</p>
<p>  选项：</p>
<blockquote>
<p>-f：强行复制文件或目录，不论目标文件或目录是否已存在</p>
<p>-i：覆盖既有文件之前先询问用户</p>
<p>-R或-r：递归处理，将指定目录下的所有文件与子目录一并处理</p>
</blockquote>
</li>
</ul>
<h3 id="7、删除"><a href="#7、删除" class="headerlink" title="7、删除"></a>7、删除</h3><ul>
<li><p>rm：（Remove）删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉</p>
<p>  选项：</p>
<blockquote>
<p>-f：强制删除文件或目录<br>-i：删除已有文件或目录之前先询问用户<br>-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理</p>
</blockquote>
</li>
</ul>
<p>Linux的rm命令没有Windows回收站那样的机制，所以使用时需要十分小心</p>
<blockquote>
<p>注意：使用rm命令要格外小心。<strong>因为一旦删除了一个文件，就无法再恢复它</strong>。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。</p>
</blockquote>
<p><del><code>rm -rf /*</code>删库跑路</del></p>
<h3 id="8、移动和重命名"><a href="#8、移动和重命名" class="headerlink" title="8、移动和重命名"></a>8、移动和重命名</h3><ul>
<li><p>mv：（Move）用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中</p>
<p>  选项：</p>
<blockquote>
<p>-b：当文件存在时，覆盖前，为其创建一个备份<br>-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；<br>-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。<br>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</p>
</blockquote>
</li>
</ul>
<h2 id="五、文件属性与权限管理"><a href="#五、文件属性与权限管理" class="headerlink" title="五、文件属性与权限管理"></a>五、文件属性与权限管理</h2><h3 id="1、基本属性"><a href="#1、基本属性" class="headerlink" title="1、基本属性"></a>1、基本属性</h3><blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
</blockquote>
<p>使用<code>ls -l</code>或<code>ll</code>命令来查看当前目录下的详细信息。列的类型依次是：</p>
<p>基本属性、文件硬链接数（包含的文件数量）、从属用户、从属组、文件所占用的空间(以字节为单位)、文件（目录）最近访问（修改）时间、文件名（如果是符号链接，那么会用<code>-&gt;</code>指向实际的文件路径，类似Windows的快捷方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos /]<span class="comment"># ls -l</span></span><br><span class="line">total 72</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Mar  7  2019 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Jul  5 01:27 boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>第一列的属性有10个字符长度，分为了4个区域</p>
<p><img src="363003_1227493859FdXT.png" alt="img"></p>
<p>第一个字符有下面几类</p>
<ul>
<li>[ <strong>d</strong> ]表示目录</li>
<li>[ <strong>-</strong> ]表示文件；</li>
<li>[ <strong>l</strong> ]表示链接文档(link file)；</li>
<li>[ <strong>b</strong> ]表示设备文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>[ <strong>c</strong> ]表示设备文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>后面字符以三个为一组，且均为<code>rwx</code>三个参数的组合。[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)，减号[ - ]表示没有相应权限。 要注意的是，这三个权限的位置不会改变。</p>
<h3 id="2、文件从属"><a href="#2、文件从属" class="headerlink" title="2、文件从属"></a>2、文件从属</h3><blockquote>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。<br>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。<br>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。<br>因此，Linux系统按文件所有者(属主)、文件所有者同组用户（属组）和其他用户来规定了不同的文件访问权限。<br>对于 root 用户来说，一般情况下，文件的权限对其不起作用（最高权限者可以修改权限）。</p>
</blockquote>
<p>以下三个命令通用的选项：-R或–recursive：递归处理，将指令目录下的所有文件及子目录一并处理</p>
<h4 id="2-1-改变属组"><a href="#2-1-改变属组" class="headerlink" title="2.1 改变属组"></a>2.1 改变属组</h4><ul>
<li>chgrp：（Change group）该命令用来改变指定文件所属的用户组。如果用户不是该文件的文件主或超级用户(root)，则不能改变该文件的组。</li>
</ul>
<h4 id="2-2-改变属主"><a href="#2-2-改变属主" class="headerlink" title="2.2 改变属主"></a>2.2 改变属主</h4><ul>
<li>chown：（Change owner）改变某个文件或目录的所有者和所属的组，只有文件主和超级用户才可以便用该命令。</li>
</ul>
<h3 id="3、权限更改"><a href="#3、权限更改" class="headerlink" title="3、权限更改"></a>3、权限更改</h3><ul>
<li>chmod（Change mode）变更文件或目录的权限</li>
</ul>
<blockquote>
<p>在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p>
</blockquote>
<p>权限范围的表示法如下：</p>
<p><code>u</code> User，文件或目录的拥有者；<br><code>g</code> Group，文件或目录的所属群组；<br><code>o</code> Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；<br><code>a</code> All，全部的用户，包含拥有者，所属群组以及其他用户；<br><code>r</code> 读取权限，数字代号为“4”;<br><code>w</code> 写入权限，数字代号为“2”；<br><code>x</code> 执行或切换权限，数字代号为“1”；<br><code>-</code> 不具任何权限，数字代号为“0”；<br><code>s</code> 特殊功能说明：变更文件或目录的权限。</p>
<p>常用数字代号表示，每种身份(owner/group/others)各自的三个权限(r/w/x)分数是累加的，例如当权限为： [-rwxrwx—] 时分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<h2 id="六、查看文件内容"><a href="#六、查看文件内容" class="headerlink" title="六、查看文件内容"></a>六、查看文件内容</h2><ul>
<li><p>cat：（concatenate）按从上到下的循序显示全部文件内容，本意是连接文件并打印到标准输出设备上</p>
<p>  使用例子：</p>
<blockquote>
<p>cat m1 （在屏幕上显示文件ml的内容）<br>cat m1 m2 （同时显示文件ml和m2的内容）<br>cat m1 m2 &gt; file （将文件ml和m2合并后放入文件file中）</p>
</blockquote>
</li>
<li><p>tac：和cat相反的循序显示</p>
</li>
<li><p>nl：（Number of Lines） 显示的时候输出行号</p>
</li>
<li><p>more ：以全屏幕的方式按页显示文本文件的内容。more命令中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）</p>
</li>
<li><p>less：与 more 类似，不同的是less命令可以向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。按Q键退出less程序。</p>
</li>
<li><p>head：用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。可以使用选项-n&lt;数字&gt;来指定显示头部内容的行数或-c&lt;字符数&gt;指定显示头部内容的字符数</p>
</li>
<li><p>tail：和head类似，用于显示文件的尾部内容，默认也是10行</p>
</li>
</ul>
<h2 id="七、文件链接"><a href="#七、文件链接" class="headerlink" title="七、文件链接"></a>七、文件链接</h2><p>Linux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。</p>
<blockquote>
<p>Linux 的文件链接分为两种，一种是硬链接（Hard Link），另一种是符号链接（Symbolic Link），也叫软链接</p>
</blockquote>
<p><img src="ln.jpg" alt="img"></p>
<h3 id="1、硬链接"><a href="#1、硬链接" class="headerlink" title="1、硬链接"></a>1、硬链接</h3><p>建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如上图所示的m2.c文件就在目录mub1和liu中都建立了目录项。</p>
<p>创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。</p>
<p>硬链接有如下限制：</p>
<ul>
<li>不能对目录文件做硬链接。</li>
<li>不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。</li>
</ul>
<h3 id="2、符号链接"><a href="#2、符号链接" class="headerlink" title="2、符号链接"></a>2、符号链接</h3><p>符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的abc文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>
<blockquote>
<p>符号链接的机制基本上类似于Windows的快捷方式</p>
</blockquote>
<p>与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。</p>
<p>符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。</p>
<p>符号链接保持了链接与源文件或目录之间的区别：</p>
<ul>
<li>删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。</li>
<li>在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。</li>
<li>符号链接的大小是其链接文件的路径名中的字节数。</li>
</ul>
<h3 id="3、创建文件链接"><a href="#3、创建文件链接" class="headerlink" title="3、创建文件链接"></a>3、创建文件链接</h3><p>使用命令<code>ln</code>（link）创建文件链接，默认的连接类型是硬连接。如果要创建符号连接需要使用<code>-s</code>（soft）选项。</p>
<p><code>ln</code>命令会增加链接数，<code>rm</code>命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。</p>
<p>用<code>ln -s</code>命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># touch f1</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@localhost home]<span class="comment"># ln f1 f2</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">f1  f2</span><br><span class="line">[root@localhost home]<span class="comment"># ln -s f1 f3</span></span><br><span class="line">[root@localhost home]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--. 2 root root 0 7月   5 23:37 f1</span><br><span class="line">-rw-r--r--. 2 root root 0 7月   5 23:37 f2</span><br><span class="line">lrwxrwxrwx. 1 root root 2 7月   5 23:38 f3 -&gt; f1</span><br></pre></td></tr></table></figure>

<p>使用<code>ls -l</code>或<code>ll</code>命令时，可以看到符号链接名后有一个箭头指向源文件或目录</p>
<h2 id="八、Vim编辑器"><a href="#八、Vim编辑器" class="headerlink" title="八、Vim编辑器"></a>八、Vim编辑器</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>学Linux就不得不提到vim，而vim又来自于vi</p>
<blockquote>
<p>Vi编辑器是所有Unix及Linux系统下标准的编辑器，由美国加州大学伯克利分校的Bill Joy所创立。对Unix及Linux系统的任何版本，vi编辑器是完全相同的。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。</p>
<p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。Vim普遍被推崇为类Vi编辑器中最好的一个。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmltLm9yZy8=">官网<i class="fa fa-external-link-alt"></i></span>简介：</p>
<blockquote>
<p>Vim是一个高度可配置的文本编辑器，它可以使创建和更改任何类型的文本变得非常高效。在大多数UNIX系统和Apple OS X中，它都是作为”vi”被包含在内的。</p>
<p>Vim是坚固稳定的，并且正在不断发展，以变得更好。其特点包括：</p>
<ul>
<li>持久的多级撤消树</li>
<li>扩展插件系统</li>
<li>支持数百种编程语言和文件格式</li>
<li>强大的搜索和替换</li>
<li>与多种工具集成</li>
</ul>
</blockquote>
<p>类比Windows的话，vi相当于记事本，而vim则相当于notepad++</p>
<h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p>输入命令<code>vim 文件名</code>，当文件名存在时打开文件，不存在时则创建并打开，可以使用绝对路径或相对路径表达式</p>
<p>打开后，便进入了命令模式（一般模式），像下面这样，光标会在第一行，<code>~</code>表示此行没有任何内容（包括换行符），左下角是文件名，此时还不能编辑文件，任何操作都会被视为命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"test.txt"</span> [New File]                                                                  0,0-1         All</span><br></pre></td></tr></table></figure>

<p>vi/vim的操作中常用的有三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的工作流程如下：</p>
<p><img src="vim-vi-workmodel.png" alt="img"></p>
<p>模式切换：</p>
<ul>
<li>创建或者打开后便进入了命令模式，按下<code>i</code>、<code>a</code>、<code>o</code>键(大小写均可)进入输入模式，常用<code>i</code></li>
<li>输入模式下按<code>ESC</code>键回到命令模式</li>
<li>命令模式下输入冒号<code>:</code>进入底线命令模式，退格键删除冒号回到命令模式，或者输入命令回车执行</li>
</ul>
<p>底线命令模式可以视作对命令模式功能的扩展</p>
<h3 id="3、命令模式"><a href="#3、命令模式" class="headerlink" title="3、命令模式"></a>3、命令模式</h3><p>命令模式下一些常用的操作</p>
<ul>
<li>按下<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>键分别可以使光标向左、下、上、右移动，当然也可以使用方向键，这样的设计意图是为了在编辑文件同时切换位置时，减少手移动的距离，提高操作效率（<del>Windows使用鼠标操作移动距离最大</del>）</li>
<li><code>w</code>跳到下个单词的开头</li>
<li><code>e</code>跳到下个单词的最后</li>
<li><code>b</code>跳到前一个单词的开头</li>
<li><code>ctrl</code>+<code>b</code>向上移动一页，等同于<code>Page Up</code>；<code>ctrl</code>+<code>f</code>向下移动一页，等同于<code>Page Down</code></li>
<li>输入数字并按下回车，向下移动数字相应的行数</li>
<li><code>/word</code>从光标位置往下查找名为word的字符串；<code>?word</code>往上查找</li>
<li><code>x</code>从光标位置向后删除一个字符，<code>X</code>（大写）向前删除</li>
<li><code>dd</code>删除光标位置的一整行内容</li>
<li><code>yy</code>复制光标位置的一整行内容</li>
<li><code>u</code>撤销，<code>ctrl</code>+<code>r</code>重做（分别相当于Windows的ctrl+z和ctrl+y）</li>
<li><code>ZZ</code>（大写）若文件没有改变，则不储存离开，若文件已经被改变，则储存后离开</li>
</ul>
<h3 id="4、输入模式"><a href="#4、输入模式" class="headerlink" title="4、输入模式"></a>4、输入模式</h3><p>按下<code>i</code>或<code>insert</code>键进入输入模式后，左下角会有个INSERT字样的提示，说明当前是输入模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">-- INSERT --                                                                           0,1           All</span><br></pre></td></tr></table></figure>

<p>输入模式下可以使用一切常规的操作，键盘上的字符即输入字符，命令即执行命令</p>
<h3 id="5、底线命令模式"><a href="#5、底线命令模式" class="headerlink" title="5、底线命令模式"></a>5、底线命令模式</h3><p>底线命令模式可以使用一些额外的命令，比如保存文件、退出vim</p>
<ul>
<li><code>:q</code>退出编辑器</li>
<li><code>:w</code>将编辑的数据写入硬盘</li>
<li><code>:wq</code>结合上面的功能，保存并退出</li>
<li>在上面的命令后加<code>!</code>可以强制执行，特别的是，强制写入与当前用户对文件的权限有关</li>
<li><code>:set nu</code>在每一行的前面显示该行的行号，<code>:set nonu</code>取消行号显示</li>
</ul>
<h2 id="九、扩展资料"><a href="#九、扩展资料" class="headerlink" title="九、扩展资料"></a>九、扩展资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYW4ubGludXhkZS5uZXQv">Linux命令大全<i class="fa fa-external-link-alt"></i></span></p>
<p>以游戏的方式学习vim：<span class="exturl" data-url="aHR0cDovL3ZpbS1hZHZlbnR1cmVzLmNvbS8=">vim冒险<i class="fa fa-external-link-alt"></i></span>(英文)</p>
<p><span class="exturl" data-url="aHR0cHM6Ly92aW1oZWxwLm9yZy8=">vim在线帮助文件<i class="fa fa-external-link-alt"></i></span>(英文)</p>
<p><span class="exturl" data-url="aHR0cDovL2NlbmFsdWx1LmdpdGh1Yi5pby9saW51eC9hbGwtdmltLWNoZWF0c2hlYXQv">史上最全Vim快捷键键位图 – 入门到进阶<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记（下）</title>
    <url>/linux/linux-learn-part2/</url>
    <content><![CDATA[<h2 id="一、用户和用户组"><a href="#一、用户和用户组" class="headerlink" title="一、用户和用户组"></a>一、用户和用户组</h2><blockquote>
<p>Linux 是<strong>多用户多任务</strong>操作系统，换句话说，Linux 系统支持多个用户在同一时间内登陆，不同用户可以执行不同的任务，并且互不影响。<br>不同用户具有不同的权限，毎个用户在权限允许的范围内可以在同一时间完成不同的任务，Linux 正是通过这种权限的划分与管理，实现了多用户多任务的运行机制。</p>
<p>用户组是具有相同特征用户的逻辑集合，可以把需要相同权限的用户放入一个组，那么，所有用户就具有了和组一样的权限，这就是用户组。</p>
</blockquote>
<a id="more"></a>

<p>用户和组之间的关系如下图所示：</p>
<p><img src="2-1Z40QP4595X.gif" alt="img"></p>
<h3 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h3><h4 id="1-1-用户配置文件"><a href="#1-1-用户配置文件" class="headerlink" title="1.1 用户配置文件"></a>1.1 用户配置文件</h4><blockquote>
<p>本节了解即可</p>
</blockquote>
<p><code>/etc/passwd</code>和<code>/etc/shadow</code>：这两个文件可以说是linux系统中最重要的文件之一。如果没有这两个文件或者这两个文件出问题，那就无法正常登录linux系统了。</p>
<p>使用<code>cat /etc/passwd</code>或<code>vim /etc/passwd</code>（推荐，有高亮显示）命令来查看文件</p>
<p><img src="image-20200712183438723.png" alt="image-20200712183438723"></p>
<p>文件内容由<code>:</code>符号分割成7个字段，每个字段的含义：</p>
<ul>
<li>用户名：即代表用户账号的字符串</li>
<li>该账号的口令（密码）：为什么是<code>x</code>呢？早期的unix系统口令确实是存放在这里，但基于安全因素，后来就将其存放到<code>/etc/shadow</code>中了，在这里只用一个<code>x</code>代替。</li>
<li>用户标识号(uid)：系统识别用户身份就是通过这个数字来的，0就是root，取值范围是0<del>65535，1</del>499由系统作为管理账号保留。</li>
<li>组标识号(gid)：这个字段对应<code>/etc/group</code> 中的一条记录</li>
<li>注释说明：该字段没有实际意义，相当于备注</li>
<li>用户目录：当用户登录时就处在这个目录下。root的目录是/root，普通用户的目录则为<code>/home</code>相应的用户名文件夹，位置可以自定义。</li>
<li>shell：用户登录后要启动一个进程，用来将用户下达的指令传给内核，这就是shell。Linux的shell有很多种，在CentOS中是bash</li>
</ul>
<hr>
<p><code>/etc/shadow</code>文件：</p>
<p><img src="image-20200712192135334.png" alt="image-20200712192135334"></p>
<p>这个文件和<code>/etc/passwd</code>类似，也用<code>:</code>分割成不同的字段，包括最后3个字段默认为空的共9个：</p>
<ul>
<li>用户名：跟/etc/passwd对应</li>
<li>用户密码：这个才是该账号的真正的密码，不过这个密码已经加密过了，但是有些黑客还是能够解密的。所以为了安全，该文件属性设置为600（只允许root读写）。</li>
<li>上次更改密码的时间戳(单位：天)：这个数字是距离1970年1月1日到上次更改密码的天数计算而来</li>
<li>要过多少天才可以更改密码：默认是0，即不限制</li>
<li>密码多少天后到期：即在多少天内必须更改密码，超过设定值未更改将不能登录系统。默认是99999，相当于永远不需要改</li>
<li>密码到期前的警告期限：默认为7，表示当7天后密码会过期时，系统就发出警告提醒用户，他的密码将在7天后到期</li>
<li>账号失效期限：如果设置这个值为3，则表示：密码已经到期后，用户并没有在到期前修改密码，那么再过3天，则这个账号就失效了，即锁定了。</li>
<li>账号的有效期：和“上次更改密码的时间戳”一样，是按距离1970年1月1日多少天算的。它表示的含义是，账号在这个日期前可以使用，到期后账号作废。</li>
<li>最后一个字段作为保留用的，无实际意义</li>
</ul>
<h4 id="1-2-用户组配置文件"><a href="#1-2-用户组配置文件" class="headerlink" title="1.2 用户组配置文件"></a>1.2 用户组配置文件</h4><p><code>/etc/group</code>此文件是记录组 ID（GID）和组名相对应的文件。前面讲过，/etc/passwd 文件中每行用户信息的第四个字段对应的 /etc/group 文件中的一条记录。用vim打开这个文件，发现也是用<code>:</code>分割为4个字段</p>
<p><img src="image-20200713153748531.png" alt="image-20200713153748531"></p>
<p>各字段的含义：</p>
<ul>
<li><p>用户组的名称：由字母或数字构成</p>
</li>
<li><p>组密码：和 /etc/passwd 文件一样，这里的<code>x</code>仅仅是密码标识，真正加密后的组密码默认保存在 /etc/gshadow 文件中。</p>
<blockquote>
<p>不过，用户设置密码是为了验证用户的身份，那用户组设置密码是用来做什么的呢？用户组密码主要是用来指定组管理员的，由于系统中的账号可能会非常多，root 用户可能没有时间进行用户的组调整，这时可以给用户组指定组管理员，如果有用户需要加入或退出某用户组，可以由该组的组管理员替代 root 进行管理。但是这项功能目前很少使用，我们也很少设置组密码。如果需要赋予某用户调整某个用户组的权限，则可以使用 sudo 命令代替</p>
</blockquote>
</li>
<li><p>组ID (gid)：就是用户组的 ID 号，Linux 系统就是通过 GID 来区分用户组的</p>
</li>
<li><p>组中的用户：此字段列出每个群组包含的所有用户。需要注意的是，如果该用户组是这个用户的初始组，则该用户不会写入这个字段，比如root组就没有写root用户。可以这么理解，该字段显示的用户都是这个用户组的附加用户</p>
</li>
</ul>
<p><strong>每个用户都可以加入多个附加组，但是只能属于一个初始组</strong></p>
<p><code>/etc/gshadow</code>文件同<code>/etc/shadow</code>文件，储存一些关于用户组的需要保护的信息，用vim打开，看到也是用<code>:</code>分割为4个字段，同时左下角提示这是只读的文件（图中已剪掉中间部分）</p>
<p><img src="image-20200713160327799.png" alt="image-20200713160327799"></p>
<p>各字段含义：</p>
<ul>
<li><p>组名：同 /etc/group 文件中的组名相对应</p>
</li>
<li><p>组密码：对于大多数用户来说，通常不设置组密码，因此该字段常为空，但有的为 <code>!</code>，指的是该群组没有组密码，也不设有群组管理员。</p>
</li>
<li><p>组管理员：从系统管理员的角度来说，该文件最大的功能就是创建群组管理员</p>
<blockquote>
<p>那么，什么是群组管理员呢？</p>
<p>考虑到 Linux 系统中账号太多，而超级管理员 root 可能比较忙碌，因此当有用户想要加入某群组时，root 或许不能及时作出回应。这种情况下，如果有群组管理员，那么他就能将用户加入自己管理的群组中，也就免去麻烦 root 了。</p>
<p>不过，由于目前有 sudo 之类的工具，因此群组管理员的这个功能已经很少使用了。</p>
</blockquote>
</li>
<li><p>组中的附加用户：该字段显示这个用户组中有哪些附加用户，和 /etc/group 文件中附加组显示内容相同。</p>
</li>
</ul>
<h3 id="2、用户管理"><a href="#2、用户管理" class="headerlink" title="2、用户管理"></a>2、用户管理</h3><h4 id="2-1-添加用户"><a href="#2-1-添加用户" class="headerlink" title="2.1 添加用户"></a>2.1 添加用户</h4><p>使用<code>useradd [选项] 用户名</code>来添加用户，可用选项：</p>
<blockquote>
<p>-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；<br>-d&lt;登入目录&gt;：指定用户登入时的启始目录；<br>-e&lt;有效期限&gt;：指定帐号的有效期限（格式为 “YYYY-MM-DD”）；<br>-f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号；<br>-g&lt;群组&gt;：指定用户所属的群组。一般以和用户名相同的组作为用户的初始组，在创建用户时会默认建立初始组。一旦手动指定，则系统将不会在创建此默认的初始组目录；<br>-G&lt;群组&gt;：指定用户所属的附加群组(把用户加入其他组，使用附加组)；<br><strong>-m：自动建立用户的登入目录（该选项是默认的）</strong>；<br>-M：不要自动建立用户的登入目录；<br>-n：取消建立以用户名称为名的群组；<br>-r：建立系统帐号。也就是 UID 在 1~499 之间，供系统程序使用的用户。由于系统用户主要用于运行系统所需服务的权限配置，因此系统用户的创建默认不会创建主目录；<br>-s<shell>：指定用户登入后所使用的shell（默认是 /bin/bash）；<br>-u<uid>：指定用户id。</p>
</blockquote>
<p>创建一个名为<code>guest</code>的用户，使用<code>tail -n1</code>查看配置文件最后一行的信息，发现写入了新建用户默认的数据。因为没有设置密码，所以密码字段是 <code>!!</code>，代表这个用户没有合理密码，不能正常登录。</p>
<p><img src="image-20200712232132709.png" alt="image-20200712232132709"></p>
<p>切换到对应的用户目录，有一些默认的隐藏文件</p>
<p><img src="image-20200712232703014.png" alt="image-20200712232703014"></p>
<h4 id="2-2-修改用户密码-amp-锁定用户"><a href="#2-2-修改用户密码-amp-锁定用户" class="headerlink" title="2.2 修改用户密码&amp;锁定用户"></a>2.2 修改用户密码&amp;锁定用户</h4><p><code>passwd [选项] 用户名</code>用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者root则能用它管理系统用户的密码。只有管理者可以指定用户名，一般用户只能变更自己的密码。</p>
<p>可用选项：</p>
<blockquote>
<p>-d：删除密码，仅有系统管理者才能使用；<br>-f：强制执行；<br>-k：设置只有在密码过期失效后，才能更新；<br>-l：锁定密码，该选项会在 /etc/shadow 文件中指定用户的加密密码串前添加 “!”，使密码失效。仅 root 用户可用；<br>-u：解锁用户，和 -l 选项相对应，也是只能 root 用户使用；<br>-s：列出密码的相关信息，仅有系统管理者才能使用；<br>-u：解开已上锁的帐号。<br>-n天数：设置该用户修改密码后，多长时间不能再次修改密码，对应 /etc/shadow 文件中第4个字段；<br>-x天数：设置该用户的密码有效期，对应 /etc/shadow 文件中各行密码的第5个字段；<br>-w天数：设置用户密码过期前的警告天数，对于 /etc/shadow 文件中各行密码的第6个字段；<br>-i日期：设置用户密码失效日期，对应 /etc/shadow 文件中各行密码的第7个字段。</p>
</blockquote>
<p>管理员模式下passwd命令附加用户名修改相应用户的密码，否则就是修改管理员的密码，如果密码长度小于8位或者过于简单，会出现提示</p>
<p>输入两次修改密码，这里和登录的时候一样，是不显示任何字符的，但是已经输入了（图中设置了系统语言为中文）</p>
<p><img src="image-20200713011418943.png" alt="image-20200713011418943"></p>
<h4 id="2-3-修改用户属性"><a href="#2-3-修改用户属性" class="headerlink" title="2.3 修改用户属性"></a>2.3 修改用户属性</h4><p>修改用户属性有两种方式，一种是使用Vim编辑器手动修改涉及用户信息的相关文件（/etc/passwd、/etc/shadow、/etc/group、/etc/gshadow（后两个为用户组文件））另一个方法就是使用usermod 命令，需要注意的是，此命令不允许你改变正在线上的使用者帐号名称。</p>
<p>格式：</p>
<p><code>usermod [选项] 用户名</code></p>
<p>选项：</p>
<blockquote>
<p>-c&lt;备注&gt;：修改用户帐号的备注文字；<br>-d&lt;用户目录&gt;：修改用户的主目录，使用绝对路径，<strong>对于不存在的目录，不会主动创建</strong>；<br>-e&lt;有效期限&gt;：修改帐号的有效期限；<br>-f&lt;失效天数&gt;：修改在密码过期后多少天即关闭该帐号；<br>-g&lt;群组&gt;：修改用户所属的群组；<br>-G&lt;群组&gt;；修改用户所属的附加群组；<br>-l&lt;帐号名称&gt;：修改用户帐号名称；<br>-L：锁定用户密码，即锁定用户；<br>-s<shell>：修改用户登入后所使用的shell；<br>-u<uid>：修改用户ID；<br>-U:解除密码锁定。</p>
</blockquote>
<p><strong>useradd 命令和 usermod 命令的区别：前者用于添加用户，同时可以对用户信息进行指定；后者针对与已存在的用户，使用该命令可以修改它们的信息</strong></p>
<p><img src="image-20200713013253372.png" alt="image-20200713013253372"></p>
<h4 id="2-4-切换用户"><a href="#2-4-切换用户" class="headerlink" title="2.4 切换用户"></a>2.4 切换用户</h4><p><code>su</code>是最简单的用户切换命令，通过该命令可以实现任何身份的切换，包括从普通用户切换为 root 用户、从 root 用户切换为普通用户以及普通用户之间的切换。</p>
<blockquote>
<p>普通用户之间切换以及普通用户切换至 root 用户，都需要知晓对方的密码，只有正确输入密码，才能实现切换；从 root 用户切换至其他用户，无需知晓对方密码，直接可切换成功。</p>
</blockquote>
<p>可使用的选项：</p>
<blockquote>
<p>-：当前用户不仅切换为指定用户的身份，同时所用的工作环境也切换为此用户的环境（包括 PATH 变量、MAIL 变量等），如果省略用户名，则默认切换为root用户。<br>-l：同上，也是在切换用户身份的同时，完整切换工作环境，但后面需要添加要切换的用户名。<br>-p或-m（–preserve-environment）：变更身份时，不要变更环境变量。<br>-c &lt;指令&gt; 或–command &lt;指令&gt;：仅切换用户执行完指定的指令后，即恢复原来的身份。</p>
</blockquote>
<p>也就是说，不使用<code>-</code>选项的话，切换后的环境变量是之前用户的，相当于临时切换。</p>
<p>如图，新开一个会话窗口，登录guest用户，切换root用户，输入密码后用<code>env | grep guest</code>查看环境变量，发现用户名及相关环境变量还是guest，而不是root</p>
<p><img src="image-20200713020512101.png" alt="image-20200713020512101"></p>
<h4 id="2-5-删除用户"><a href="#2-5-删除用户" class="headerlink" title="2.5 删除用户"></a>2.5 删除用户</h4><p><code>userdel</code>命令用于删除指定的用户，以及与用户相关的文件。若不加选项，则仅删除用户帐号，而不删除相关文件</p>
<p>选项：</p>
<blockquote>
<p>-f：强制删除用户，即使用户当前已登录；<br>-r：删除用户的同时，删除与用户相关的所有文件。</p>
</blockquote>
<p><strong>不要轻易使用-r选项；它会同时删除用户的所有文件和目录，如果用户目录下有重要的文件，在删除前记得备份</strong></p>
<h3 id="3、用户组管理"><a href="#3、用户组管理" class="headerlink" title="3、用户组管理"></a>3、用户组管理</h3><h4 id="3-1-添加用户组"><a href="#3-1-添加用户组" class="headerlink" title="3.1 添加用户组"></a>3.1 添加用户组</h4><p>命令格式：<code>groupadd [选项] 组名</code></p>
<p>选项：</p>
<ul>
<li>-g GID：指定组 ID；</li>
<li>-r：创建系统群组。</li>
</ul>
<h4 id="3-2-修改用户组"><a href="#3-2-修改用户组" class="headerlink" title="3.2 修改用户组"></a>3.2 修改用户组</h4><p>命令格式：<code>groupmod [选项] 组名</code></p>
<p>选项：</p>
<ul>
<li>-g GID：修改组 ID；</li>
<li>-n 新组名：修改组名；</li>
</ul>
<h4 id="3-3-删除用户组"><a href="#3-3-删除用户组" class="headerlink" title="3.3 删除用户组"></a>3.3 删除用户组</h4><p>命令格式：<code>groupdel 组名</code>。</p>
<p>使用 groupdel 命令删除群组，其实就是删除 /etc/gourp 文件和 /etc/gshadow 文件中有关目标群组的数据信息。</p>
<p><strong>不能使用 groupdel 命令随意删除群组</strong>：此命令仅适用于删除那些 “不是任何用户初始组” 的群组，换句话说，如果有群组还是某用户的初始群组，则无法使用 groupdel 命令成功删除</p>
<h2 id="二、磁盘空间"><a href="#二、磁盘空间" class="headerlink" title="二、磁盘空间"></a>二、磁盘空间</h2><p><code>df</code>(disk free)命令用于显示已挂载磁盘的总容量、使用容量、剩余容量等，可以不加任何参数。默认显示单位为KB。</p>
<p><img src="image-20200713184814551.png" alt="image-20200713184814551"></p>
<p>这样显示看着不太方便，可以使用<code>-h</code>选项自动选择合适的单位显示，如K、M、G（省略了B）</p>
<p><img src="image-20200713185037612.png" alt="image-20200713185037612"></p>
<p>其它选项：</p>
<blockquote>
<p>-a或–all：包含全部的文件系统；<br>–block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；<br>-h或–human-readable：以可读性较高的方式来显示信息；<br>-H或–si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；<br>-i或–inodes：显示inode的信息；<br>-k或–kilobytes：指定区块大小为1024字节；<br>-l或–local：仅显示本地端的文件系统；<br>-m或–megabytes：指定区块大小为1024*1024字节；<br>–no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值；<br>-P或–portability：使用POSIX的输出格式；<br>–sync：在取得磁盘使用信息前，先执行sync指令；<br>-t&lt;文件系统类型&gt;或–type=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；<br>-T或–print-type：显示文件系统的类型；<br>-x&lt;文件系统类型&gt;或–exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；<br>–help：显示帮助；<br>–version：显示版本信息。</p>
</blockquote>
<hr>
<p><code>du</code>(Disk usage)也是查看使用空间的，但是与df命令不同的是du命令是对文件和目录磁盘使用空间的查看，不加选项时默认显示当前目录的使用空间情况。</p>
<p>选项：</p>
<blockquote>
<p>-a或-all 显示目录中个别文件的大小。<br>-b或-bytes 显示目录或文件大小时，以byte为单位。<br>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-k或–kilobytes 以KB(1024bytes)为单位输出。<br>-m或–megabytes 以MB为单位输出。<br>-s或–summarize 仅显示总计，只列出最后加总的值。<br>-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>-D或–dereference-args 显示指定符号链接的源文件大小。<br>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>-l或–count-links 重复计算硬件链接的文件。</p>
</blockquote>
<p>示例：</p>
<p><img src="image-20200713193318434.png" alt="image-20200713193318434"></p>
<h2 id="三、进程管理"><a href="#三、进程管理" class="headerlink" title="三、进程管理"></a>三、进程管理</h2><p><code>ps</code> （Process Status，不是PhotoShop）命令是最常用的监控进程的命令，通过此命令可以查看系统中所有运行进程的详细信息。</p>
<p>由于ps命令能够支持的系统类型非常多，所以选项也很多。这里只列出了几个常用的选项：</p>
<blockquote>
<p>a：显示一个终端的所有进程，除会话引线外；<br>u：显示进程的归属用户及内存的使用情况；<br>x：显示没有控制终端的进程；<br>-l：长格式显示更加详细的信息；<br>-e：显示所有进程；</p>
</blockquote>
<p>ps 命令有些与众不同，它的部分选项可以不用加<code>-</code>符号，比如选项<code>aux</code>。</p>
<p><img src="image-20200713195629067.png" alt="image-20200713195629067"></p>
<p>图中部分输出已省略，各列的含义分别是：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>USER</td>
<td>该进程是由哪个用户产生的。</td>
</tr>
<tr>
<td>PID</td>
<td>进程的 ID。</td>
</tr>
<tr>
<td>%CPU</td>
<td>该进程占用 CPU 资源的百分比，占用的百分比越高，进程越耗费资源。</td>
</tr>
<tr>
<td>%MEM</td>
<td>该进程占用物理内存的百分比，占用的百分比越高，进程越耗费资源。</td>
</tr>
<tr>
<td>VSZ</td>
<td>该进程占用虚拟内存的大小，单位为 KB。</td>
</tr>
<tr>
<td>RSS</td>
<td>该进程占用实际物理内存的大小，单位为 KB。</td>
</tr>
<tr>
<td>TTY</td>
<td>该进程是在哪个终端运行的。其中，tty1 ~ tty7 代表本地控制台终端（可以通过 Alt+F1 ~ F7 快捷键切换不同的终端），tty1~tty6 是本地的字符界面终端，tty7 是图形终端。pts/0 ~ 255 代表虚拟终端，一般是远程连接的终端，第一个远程连接占用 pts/0，第二个远程连接占用 pts/1，依次増长。</td>
</tr>
<tr>
<td>STAT</td>
<td>进程状态。常见的状态有以下几种：-D：不可被唤醒的睡眠状态，通常用于 I/O 情况。-R：该进程正在运行。-S：该进程处于睡眠状态，可被唤醒。-T：停止状态，可能是在后台暂停或进程处于除错状态。-W：内存交互状态（从 2.6 内核开始无效）。-X：死掉的进程（应该不会出现）。-Z：僵尸进程。进程已经中止，但是部分程序还在内存当中。-&lt;：高优先级（以下状态在 BSD 格式中出现）。-N：低优先级。-L：被锁入内存。-s：包含子进程。-l：多线程（小写 L）。-+：位于后台。</td>
</tr>
<tr>
<td>START</td>
<td>该进程的启动时间。</td>
</tr>
<tr>
<td>TIME</td>
<td>该进程占用 CPU 的运算时间，注意不是系统时间。</td>
</tr>
<tr>
<td>COMMAND</td>
<td>产生此进程的命令名。</td>
</tr>
</tbody></table>
<hr>
<p><code>pstree</code> 命令是以树形结构显示程序和进程之间的关系，基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pstree [选项] [PID或用户名]</span><br></pre></td></tr></table></figure>

<p>常用选项及含义：</p>
<blockquote>
<p>-a：显示启动每个进程对应的完整指令，包括启动进程的路径、参数等。<br>-c：不使用精简法显示进程信息，即显示的进程中包含子进程和父进程。<br>-n：根据进程 PID 号来排序输出，默认是以程序名排序输出的。<br>-p：显示进程的 PID。<br>-u：显示进程对应的用户名称。</p>
</blockquote>
<p><img src="image-20200713213453435.png" alt="image-20200713213453435"></p>
<p>另外，centos7上默认没有安装psmisc包，无法使用pstree命令，安装命令：<code>yum -y install psmisc</code></p>
<hr>
<p><code>kill</code>命令用来杀死进程。本质上，kill 命令的原理是向操作系统内核发送一个信号（多是终止信号）和目标进程的 PID，然后系统内核根据收到的信号类型，对指定进程进行相应的操作。</p>
<p>格式：<code>kill [信号] PID</code></p>
<p>kill 命令只能识别 PID，而不能识别进程名。Linux 定义了几十种不同类型的信号，可以使用 <code>kill -l</code> 命令查看所有信号及其编号，以下是常用的信号及其含义（表中省略了信号名称的前缀 SIG）：</p>
<table>
<thead>
<tr>
<th>信号编号</th>
<th>信号名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>EXIT</td>
<td>程序退出时收到该信息。</td>
</tr>
<tr>
<td>1</td>
<td>HUP</td>
<td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td>
</tr>
<tr>
<td>2</td>
<td>INT</td>
<td>表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。</td>
</tr>
<tr>
<td>3</td>
<td>QUIT</td>
<td>退出。</td>
</tr>
<tr>
<td>9</td>
<td>KILL</td>
<td>杀死进程，即强制结束进程。</td>
</tr>
<tr>
<td>11</td>
<td>SEGV</td>
<td>段错误。</td>
</tr>
<tr>
<td>15</td>
<td>TERM</td>
<td>正常结束进程，是 kill 命令的默认信号。</td>
</tr>
</tbody></table>
<h2 id="四、软件安装"><a href="#四、软件安装" class="headerlink" title="四、软件安装"></a>四、软件安装</h2><blockquote>
<p>Linux系统和Windows系统安装应用软件的方式是不同的，而且Linux系统的软件包的管理要比Windows系统软件包的管理复杂得多。同时因为Windows下所有的软件都不能在Linux中识别，所以 Windows 中大量的木马和病毒也都无法感染Linux。</p>
</blockquote>
<p>CentOS安装软件的方式一般来说有三种：</p>
<ul>
<li>rpm包安装（Redhat Package Manager）</li>
<li>压缩包解压缩安装</li>
<li>yum在线安装（Yellow dog Updater, Modified）</li>
</ul>
<h3 id="1、安装jdk8（rpm）"><a href="#1、安装jdk8（rpm）" class="headerlink" title="1、安装jdk8（rpm）"></a>1、安装jdk8（rpm）</h3><p>首先去<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlLWpkazgtZG93bmxvYWRzLmh0bWw=">oracle官网<i class="fa fa-external-link-alt"></i></span>上下载jdk8的rpn包（提示需要注册账号，注册即可）</p>
<p><img src="image-20200714160703488.png" alt="image-20200714160703488"></p>
<p>使用FTP将其上传到服务器。参考：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzIxMy8xMDkxMg==">Linux 云服务器搭建 FTP 服务<i class="fa fa-external-link-alt"></i></span></p>
<p>然后确认当前服务器没有java环境，并且rpm包已经上传完毕</p>
<p><img src="image-20200714161422232.png" alt="image-20200714161422232"></p>
<p>执行<code>rpm -ivh jdk-8u241-linux-x64.rpm</code>命令开始安装，这里的参数含义：</p>
<ul>
<li>-i：安装（install）;</li>
<li>-v：显示更详细的信息（verbose）;</li>
<li>-h：打印 #，显示安装进度（hash）;</li>
</ul>
<p>当两个进度条走完后，便安装完毕了，此时可以删除rpm包</p>
<p><img src="image-20200714163114857.png" alt="image-20200714163114857"></p>
<p>在/usr/java目录下可以看到安装后的jdk文件</p>
<p><img src="image-20200714165218512.png" alt="image-20200714165218512"></p>
<p>配置环境变量：使用命令<code>vim /etc/profile</code>打开并编辑环境变量文件，在末尾追加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_241-amd64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin</span><br></pre></td></tr></table></figure>

<p>最后执行<code>source /etc/profile</code>使修改的文件生效，然后<code>java -version</code>检查是否安装成功</p>
<p><img src="image-20200714171318731.png" alt="image-20200714171318731"></p>
<h3 id="2、安装tomcat（tar-gz压缩包）"><a href="#2、安装tomcat（tar-gz压缩包）" class="headerlink" title="2、安装tomcat（tar.gz压缩包）"></a>2、安装tomcat（tar.gz压缩包）</h3><p>从<span class="exturl" data-url="aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy9kb3dubG9hZC05MC5jZ2k=">tomcat官网<i class="fa fa-external-link-alt"></i></span>下载tar.gz格式的二进制分发包，然后使用FTP上传到服务器，检查文件是否存在，然后使用<code>tar -zxvf 压缩包名</code>命令解压</p>
<p><img src="image-20200714221828581.png" alt="image-20200714221828581"></p>
<p>其中的选项说明：</p>
<ul>
<li>-z或–gzip或–ungzip：通过gzip指令处理备份文件</li>
<li>-x或–extract或–get：从备份文件中还原文件</li>
<li>-v：显示操作过程</li>
<li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;：指定备份文件</li>
</ul>
<p>解压完成后，检查当前目录，进入tomcat的bin目录，Windows使用bat文件启动，Linux使用sh文件</p>
<p><img src="image-20200714222039077.png" alt="image-20200714222039077"></p>
<p>运行此文件不能直接输入文件名，会被视为命令，此时使用<code>./startup.sh</code>（需要注意的是tomcat依赖java环境，此时）</p>
<p><img src="image-20200714222259665.png" alt="image-20200714222259665"></p>
<p>当然，关闭的时候运行<code>./shutdown.sh</code></p>
<p>附：tar命令详解：</p>
<blockquote>
<p>tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>
<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p>
</blockquote>
<h3 id="3、安装vim（yum）"><a href="#3、安装vim（yum）" class="headerlink" title="3、安装vim（yum）"></a>3、安装vim（yum）</h3><blockquote>
<p>目前Linux厂商发布软件机制主要分为2大类<br>Dpkg:由 Debian Linux 社区开发，B2D,Ubantu 等 Linux 发行版使用就是这种机制<br>RPM:由 Red Hat 开发，CentOs,SuSe 使用就是这种机制<br>这两种机制安装软件会先检测前置软件是否存在，如果不存在则不安装.如软件 A 安装。需系统内含有软件 B，那么不存在则不会安装软件<br>为了解决这种因依赖问题而导致软件不能安装厂商又提供了在线升级机制，简单的说就是先将前驱软件都安装以保证要安的软件能正确安装</p>
<p>Dpkg 机制对应的在线升级机制 APT<br>RPM 机制对应的在线升级机制 YUM</p>
</blockquote>
<p>虚拟机安装的CentOS默认是没有vim的，下面将通过vim来演示yum的使用</p>
<p>安装命令：<code>yum -y install 包名</code>，<code>-y</code>表示安装过程中所有询问用户的操作都为 yes</p>
<p><img src="image-20200715003210525.png" alt="image-20200715003210525"></p>
<p>卸载命令：<code>yum remove 包名</code></p>
<p><img src="image-20200714235946397.png" alt="image-20200714235946397"></p>
<blockquote>
<p>使用 yum 卸载软件包时，会同时卸载所有与该包有依赖关系的其他软件包，即便有依赖包属于系统运行必备文件，也会被 yum 无情卸载，带来的直接后果就是使系统崩溃。</p>
<p><strong>除非你能确定卸载此包以及它的所有依赖包不会对系统产生影响，否则不要使用 yum 卸载软件包。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>rpm</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis多表关联映射(一对多、多对一、多对多)的配置与使用</title>
    <url>/mybatis/mybatis-association-query/</url>
    <content><![CDATA[<h2 id="前言：需求分析"><a href="#前言：需求分析" class="headerlink" title="前言：需求分析"></a>前言：需求分析</h2><p>在项目的数据查询中，最简单的是查询一个表里的内容，但是最常用的却是多表关联查询。比如</p>
<ul>
<li>根据某个职业的分类查询这个分类下所有角色(对象)的相关信息</li>
<li>根据多个角色的信息查询它们各自所属的职业分类</li>
<li>根据某个角色的标签查询这个标签下的角色，或者根据这个角色查询他有哪些标签</li>
</ul>
<p>以上例子依次对应了数据查询中<strong>一对多、多对一和多对多</strong>的情况，接下来将通过一个简单的项目介绍如何在mybatis里如何配置与使用这些多表关联查询</p>
<a id="more"></a>

<hr>
<h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><h3 id="1-创建数据表-amp-插入数据"><a href="#1-创建数据表-amp-插入数据" class="headerlink" title="1.创建数据表&amp;插入数据"></a>1.创建数据表&amp;插入数据</h3><p>角色表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`star`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`initial_cost`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`work_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`work_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> char_info <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'能天使'</span>,<span class="string">'6星'</span>,<span class="number">12</span>,<span class="string">'狙击'</span>,<span class="number">101</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'陨星'</span>,<span class="string">'5星'</span>,<span class="number">24</span>,<span class="string">'狙击'</span>,<span class="number">101</span>),(<span class="number">3</span>,<span class="string">'伊芙利特'</span>,<span class="string">'6星'</span>,<span class="number">31</span>,<span class="string">'术士'</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'莫斯提马'</span>,<span class="string">'6星'</span>,<span class="number">31</span>,<span class="string">'术士'</span>,<span class="number">102</span>),(<span class="number">5</span>,<span class="string">'艾雅法拉'</span>,<span class="string">'6星'</span>,<span class="number">19</span>,<span class="string">'术士'</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'阿米娅'</span>,<span class="string">'5星'</span>,<span class="number">18</span>,<span class="string">'术士'</span>,<span class="number">102</span>),(<span class="number">7</span>,<span class="string">'银灰'</span>,<span class="string">'6星'</span>,<span class="number">18</span>,<span class="string">'近卫'</span>,<span class="number">103</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'斯卡蒂'</span>,<span class="string">'6星'</span>,<span class="number">17</span>,<span class="string">'近卫'</span>,<span class="number">103</span>),(<span class="number">9</span>,<span class="string">'推进之王'</span>,<span class="string">'6星'</span>,<span class="number">12</span>,<span class="string">'先锋'</span>,<span class="number">104</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">'红'</span>,<span class="string">'5星'</span>,<span class="number">7</span>,<span class="string">'特种'</span>,<span class="number">105</span>),(<span class="number">11</span>,<span class="string">'年'</span>,<span class="string">'6星'</span>,<span class="number">19</span>,<span class="string">'重装'</span>,<span class="number">106</span>);</span><br></pre></td></tr></table></figure>

<p>职业分类表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_work`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`work_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`work`</span> (<span class="string">`name`</span>,<span class="string">`work_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`char_work`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">101</span>,<span class="string">'狙击'</span>),(<span class="number">2</span>,<span class="number">102</span>,<span class="string">'术士'</span>),(<span class="number">3</span>,<span class="number">103</span>,<span class="string">'近卫'</span>),(<span class="number">4</span>,<span class="number">104</span>,<span class="string">'先锋'</span>),(<span class="number">5</span>,<span class="number">105</span>,<span class="string">'特种'</span>),(<span class="number">6</span>,<span class="number">106</span>,<span class="string">'重装'</span>),(<span class="number">7</span>,<span class="number">107</span>,<span class="string">'医疗'</span>),(<span class="number">8</span>,<span class="number">108</span>,<span class="string">'辅助'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2.项目结构"></a>2.项目结构</h3><p><img src="4026165801.png" alt="img"></p>
<p>本项目使用IntelliJ IDEA创建，并使用maven管理所使用的相关库，如果不使用maven，请注意手动导入相关jar包：mybatis、mysql-connector-java。junit可选，仅作测试用(使用junit必须依赖hamcrest-core包)</p>
<h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3.初始化项目"></a>3.初始化项目</h3><h4 id="3-1配置mybatis"><a href="#3-1配置mybatis" class="headerlink" title="3.1配置mybatis"></a>3.1配置mybatis</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/charInfoMapper.xml"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/charWorkMapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置<code>mapUnderscoreToCamelCase</code>为<code>true</code>开启驼峰命名规则转换，即数据表的字段名xxx_yyy转换成java的字段名xxxYyy<br>此处使用的mysql连接驱动包是5.x版本的，如果使用8.x注意更改驱动名称值为<code>com.mysql.cj.jdbc.Driver</code>，同时url需要指定参数<code>useSSL=false&amp;serverTimezone=UTC</code></p>
<h4 id="3-2封装sql会话访问工具类"><a href="#3-2封装sql会话访问工具类" class="headerlink" title="3.2封装sql会话访问工具类"></a>3.2封装sql会话访问工具类</h4><p>在util包下新建MybatisUtil类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>)) &#123;</span><br><span class="line">		sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3创建java对象类"><a href="#3-3创建java对象类" class="headerlink" title="3.3创建java对象类"></a>3.3创建java对象类</h4><p>在pojo包下新建与数据表相关的java对象和字段信息，并生成Getter与Setter方法，同时重写toString方法方便打印信息。本项目仅使用了查询功能，所以不用生成带参构造方法</p>
<hr>
<h2 id="二、一对多"><a href="#二、一对多" class="headerlink" title="二、一对多"></a>二、一对多</h2><h3 id="1-逻辑梳理"><a href="#1-逻辑梳理" class="headerlink" title="1.逻辑梳理"></a>1.逻辑梳理</h3><p>首先理清关系，一对多即一个对象关联多个对象，那么就需要使用同一个字段值来产生关系，所以此处char_info表引用了char_work表的work_id。在查询的时候逻辑顺序如下：</p>
<ol>
<li>在char_work表中通过name值(也可以使用表里其它的唯一值)查询相关的work_id</li>
<li>然后返回一个结果映射，在结果映射里通过work_id在char_info里查询到对应的char_info数据</li>
<li>返回的结果映射同时拥有char_work的信息和其相关的一组char_info数据</li>
</ol>
<p>所以我们需要在CharWork对象里增加一个<code>List&lt;charInfo&gt;</code>属性并生成Getter与Setter方法</p>
<h3 id="2-charWorkMapper映射文件设置"><a href="#2-charWorkMapper映射文件设置" class="headerlink" title="2.charWorkMapper映射文件设置"></a>2.charWorkMapper映射文件设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"charWork"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--一对多结果映射：一类职业对应多名干员--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharWork"</span> <span class="attr">type</span>=<span class="string">"pojo.CharWork"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"charInfoList"</span> <span class="attr">select</span>=<span class="string">"charInfo.selectCharInfoByWorkId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoByWorkName"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharWork"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">		select * from char_work where name = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处resultMap的type即“一”的java对象类型，子标签id为主键，需要关联的属性和不符合驼峰命名转换规则的属性使用result子标签进行对应，property为java属性名，column为数据表字段名。<br>collection的select值为charInfo命名空间(映射文件)里需要关联查询的select语句id</p>
<h3 id="3-charatersMapper映射文件设置"><a href="#3-charatersMapper映射文件设置" class="headerlink" title="3.charatersMapper映射文件设置"></a>3.charatersMapper映射文件设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"charaters"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoByWorkId"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharInfo"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">		select * from char_info where work_id = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处设置work_id值查询charInfo数据即可，无需手动调用</p>
<h3 id="4-实例测试"><a href="#4-实例测试" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>test\java包里新建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one2many</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		CharWork work = sqlSession.selectOne(<span class="string">"charWork.selectCharInfoByWorkName"</span>, <span class="string">"狙击"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charaters = work.getCharInfoList();</span><br><span class="line"></span><br><span class="line">		System.out.println(work);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charaters) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="3024637912.png" alt="img"></p>
<hr>
<h2 id="三、多对一"><a href="#三、多对一" class="headerlink" title="三、多对一"></a>三、多对一</h2><h3 id="1-逻辑梳理-1"><a href="#1-逻辑梳理-1" class="headerlink" title="1.逻辑梳理"></a>1.逻辑梳理</h3><p>多对一体现在查询结果上并不是多个实体对象显示对应的一条分类对象信息，而是每个实体对象后面显示其关联的分类对象信息，显示的“一”可以显示很多条重复的，但都是同一类对象，所以逻辑顺序如下：</p>
<ol>
<li>从char_info表查询所需的一组char_info信息</li>
<li>然后在结果映射里通过这一组char_info的work_id到char_work表里逐条查询所需的char_work信息</li>
<li>返回的结果映射信息就有了char_info信息以及对应的char_work信息</li>
</ol>
<p>那么很显然的我们需要在char_info的java对象里增加一个<code>charWork</code>对象属性，并生成相应的Setter和Getter方法</p>
<h3 id="2-charInfoMapper新增设置"><a href="#2-charInfoMapper新增设置" class="headerlink" title="2.charInfoMapper新增设置"></a>2.charInfoMapper新增设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对一结果映射：多名干员对应符合条件的一类职业--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharInfo"</span> <span class="attr">type</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"charWork"</span> <span class="attr">select</span>=<span class="string">"charWork.selectCharWorkByWorkId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfo"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharInfo"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处resultMap使用<code>association</code>(映射)子标签来实现多对一的查询，原理和一对多相似，不过和collection不同的是association只能映射一个对象而不是一组对象的集合，同时依旧需要把传递的work_id属性进行result对应，否则CharInfo对象会获取不到work_id的值</p>
<h3 id="3-charWorkMapper新增设置"><a href="#3-charWorkMapper新增设置" class="headerlink" title="3.charWorkMapper新增设置"></a>3.charWorkMapper新增设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharWorkByWorkId"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharWork"</span>&gt;</span></span><br><span class="line">	select * from char_work where work_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>“一”的一边只需要增加一条sql语句就行了</p>
<h3 id="4-实例测试-1"><a href="#4-实例测试-1" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>在测试类里新建一个many2one测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">many2one</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = sqlSession.selectList(<span class="string">"charInfo.selectCharInfo"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charInfos) &#123;</span><br><span class="line">			System.out.println(c);</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + c.getCharWork());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里取出全部的CharInfo及其charWork信息，所以就不需要传递参数了，同时变量声明是先集合，再对应的单个对象，和一对多的使用方法是相反的</p>
<p>运行结果：</p>
<p><img src="1025955090.png" alt="img"></p>
<hr>
<h2 id="四、多对多"><a href="#四、多对多" class="headerlink" title="四、多对多"></a>四、多对多</h2><p>虽然mybatis可以使用association和collection标签专门用于对多个相关实体类数据进行级联查询，但仍不支持多个相关实体类数据的级联保存和级联删除操作。因此在进行实体类多对多映射表设计时，需要专门建立一个关联对象表对相关实体类的关联关系进行描述，所以多对多的处理可视为双向的一对多表查询</p>
<h3 id="1-增加数据表"><a href="#1-增加数据表" class="headerlink" title="1.增加数据表"></a>1.增加数据表</h3><p>tag</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tag`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`tag_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`tag`</span> (<span class="string">`tag_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">16</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tag`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'治疗'</span>),(<span class="number">2</span>,<span class="string">'支援'</span>),(<span class="number">3</span>,<span class="string">'新手'</span>),(<span class="number">4</span>,<span class="string">'费用回复'</span>),(<span class="number">5</span>,<span class="string">'输出'</span>),(<span class="number">6</span>,<span class="string">'生存'</span>),(<span class="number">7</span>,<span class="string">'群攻'</span>),(<span class="number">8</span>,<span class="string">'防护'</span>),(<span class="number">9</span>,<span class="string">'减速'</span>),(<span class="number">10</span>,<span class="string">'削弱'</span>),(<span class="number">11</span>,<span class="string">'快速复活'</span>),(<span class="number">12</span>,<span class="string">'位移'</span>),(<span class="number">13</span>,<span class="string">'召唤'</span>),(<span class="number">14</span>,<span class="string">'控场'</span>),(<span class="number">15</span>,<span class="string">'爆发'</span>);</span><br></pre></td></tr></table></figure>

<p>char_tags</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_tags`</span> (</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`tid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`char_tags`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">10</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">10</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">14</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">10</span>),(<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">6</span>),(<span class="number">9</span>,<span class="number">4</span>),(<span class="number">9</span>,<span class="number">5</span>),(<span class="number">10</span>,<span class="number">11</span>),(<span class="number">10</span>,<span class="number">14</span>),(<span class="number">11</span>,<span class="number">2</span>),(<span class="number">11</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-增加对象与字段"><a href="#2-增加对象与字段" class="headerlink" title="2.增加对象与字段"></a>2.增加对象与字段</h3><p>pojo包下新增tag类与相关属性，对应tag表，同时增加List<CharInfo>属性，在CharInfo类里也增加一个List<tag>属性，此处无需char_tags表关联java类</p>
<h3 id="3-增加映射配置"><a href="#3-增加映射配置" class="headerlink" title="3.增加映射配置"></a>3.增加映射配置</h3><p>charInfoMapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个干员所对应的多个标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharInfoWithTags"</span> <span class="attr">type</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"star"</span> <span class="attr">column</span>=<span class="string">"star"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"initialCost"</span> <span class="attr">column</span>=<span class="string">"initial_cost"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workName"</span> <span class="attr">column</span>=<span class="string">"work_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"pojo.tag"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tagName"</span> <span class="attr">column</span>=<span class="string">"tag_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoWithTags"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharInfoWithTags"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and c.name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用SQL语句对应来实现多表关联的查询，如果不理解这条select语句，可以代入参数在mysql里观察查询结果：</p>
<p><img src="3346185465.png" alt="img"></p>
<p>因为使用了*取出了所有表的所有列，会有列名重复的情况，所以在result或id里不能指定<code>property=&quot;id&quot; column=&quot;id&quot;</code>这样的参数映射，否则只会映射第一次出现的数据，后面重复列名的数据无法映射。同时这里需要将相关表(除了关系表)所对应的java对象类的属性完整映射，重复的列名一般来说就是关联的字段信息了，所以可以如上使用<code>&lt;id property=&quot;id&quot; column=&quot;cid&quot;/&gt;</code>这样的方式来映射。</p>
<p>新增tagMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个标签所对应的多个干员--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmTagsWithCharInfo"</span> <span class="attr">type</span>=<span class="string">"pojo.tag"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tagName"</span> <span class="attr">column</span>=<span class="string">"tag_name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"charaters"</span> <span class="attr">ofType</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"star"</span> <span class="attr">column</span>=<span class="string">"star"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"initialCost"</span> <span class="attr">column</span>=<span class="string">"initial_cost"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workName"</span> <span class="attr">column</span>=<span class="string">"work_name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTagsWithCharInfo"</span> <span class="attr">resultMap</span>=<span class="string">"rmTagsWithCharInfo"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and t.tag_name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>逆向的关系映射与上面原理相同，将属性/字段反向描述即可，注意select语句的参数，以及在mybatis配置文件里增加映射文件<code>&lt;mapper resource=&quot;mappers/tagMapper.xml&quot;/&gt;</code></p>
<h3 id="4-实例测试-2"><a href="#4-实例测试-2" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>正向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">many2many</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		CharInfo charInfo = sqlSession.selectOne(<span class="string">"charInfo.selectCharInfoWithTags"</span>, <span class="string">"莫斯提马"</span>);</span><br><span class="line">		List&lt;pojo.tag&gt; tags = charInfo.getTags();</span><br><span class="line"></span><br><span class="line">		System.out.println(charInfo);</span><br><span class="line">		<span class="keyword">for</span> (tag t : tags) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="4108606847.png" alt="img"></p>
<p>逆向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyToMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		tag tag = sqlSession.selectOne(<span class="string">"tag.selectTagsWithCharInfo"</span>, <span class="string">"削弱"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = tag.getCharaters();</span><br><span class="line"></span><br><span class="line">		System.out.println(tag);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : charInfos) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3064026697.png" alt="img"></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus使用笔记</title>
    <url>/mybatis/mybatisplus-use/</url>
    <content><![CDATA[<blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<p>这个项目是国人开发的，降低了上手门槛这点十分好评</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20v">https://baomidou.com/<i class="fa fa-external-link-alt"></i></span>    |    <span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLnBsdXMv">https://mybatis.plus/<i class="fa fa-external-link-alt"></i></span></p>
<a id="more"></a>

<h2 id="零、准备工作"><a href="#零、准备工作" class="headerlink" title="零、准备工作"></a>零、准备工作</h2><p>在普通的java项目中使用，导入依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于springboot项目：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按照<span class="exturl" data-url="aHR0cHM6Ly9tcC5iYW9taWRvdS5jb20vZ3VpZGUvcXVpY2stc3RhcnQuaHRtbA==">快速开始<i class="fa fa-external-link-alt"></i></span>的说明，将表和数据创建好。然后使用Spring Initializr创建springboot项目，所有依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mysql驱动版本可以根据需要来选择，8.0版本以上注意driver-class-name和url的写法。另外引入了mybatis-plus就不要再引入mybatis了。</p>
<p>然后根据自己mysql的用户名、密码、库名来配置数据源，最后一项是设置日志输出到控制台</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<p>依次创建实体类（注意与表的类型对应）、DAO（继承BaseMapper并传入实体类作为泛型），然后在启动类上配置Mapper包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// UserDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringbootMybatisplusApplication.java</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisplusApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringbootMybatisplusApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后运行测试，<code>selectList</code>需要一个条件构造器作为参数，不需要条件查询那么传入<code>null</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisplusApplicationTests</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userDao.selectList(<span class="keyword">null</span>);</span><br><span class="line">		userList.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<p><img src="image-20200811185405395.png" alt="image-20200811185405395"></p>
<h2 id="一、主键生成策略"><a href="#一、主键生成策略" class="headerlink" title="一、主键生成策略"></a>一、主键生成策略</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>MybatisPlus在3.3.0版本后的主键生成策略如下：</p>
<ul>
<li>AUTO：数据库ID自增</li>
<li>NONE：无状态，该类型为未设置主键类型</li>
<li>INPUT：手动设置ID</li>
<li>ASSIGN_ID：使用<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20veXUxMjAvc2VxdWVuY2U=">雪花算法<i class="fa fa-external-link-alt"></i></span>分配ID (主键类型为number或string）</li>
<li>ASSIGN_UUID：分配UUID (主键类型为 string)</li>
</ul>
<h3 id="2、使用须知"><a href="#2、使用须知" class="headerlink" title="2、使用须知"></a>2、使用须知</h3><p>雪花算法不在此详解，需要注意的是生成后的数字有19位，Integer的最大值2^31-1仅10位，数据库的int最大也只有11位，所以要使用Long来储存。</p>
<p>在主键位数不足19位时，默认不会使用雪花算法，而是NONE，即不进行处理；设置AUTO时需要对应数据库字段为自增，INPUT则是插入时手动设置。</p>
<p>要使用雪花算法，数据库的字段类型长度大于19位，并且实体类对应字段为<code>Long</code>类型（<strong>注意是Long不是long，long类型默认值为 0，而 mybatisplus 只会判断是否为 null</strong>）</p>
<h3 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h3><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"test"</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">"testEmail"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = userDao.insert(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="image-20200812020512961.png" alt="image-20200812020512961"></p>
<p>如果要手动设置生成策略，可以在相关字段上使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="meta">@TableId</span>(type = IdType.ASSIGN_ID)</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、使用自动填充"><a href="#二、使用自动填充" class="headerlink" title="二、使用自动填充"></a>二、使用自动填充</h2><h3 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h3><p>实际项目中，需要使用一些值来记录数据的操作，例如创建时间、修改时间等等。可以在代码中使用<code>new Date()</code>或者<code>System.currentTimeMillis()</code>，但是这种方式是比较Low的，而且效率也不高。此时可以使用MybatisPlus的自动填充功能，填充策略有以下四种：</p>
<ul>
<li>DEFAULT：默认，不进行处理</li>
<li>INSERT：插入时填充</li>
<li>UPDATE：更新时填充</li>
<li>INSERT_UPDATE：插入和更新时都进行填充</li>
</ul>
<h3 id="2、示例-1"><a href="#2、示例-1" class="headerlink" title="2、示例"></a>2、示例</h3><p>首先在数据库新增两个字段，类型均为binint（直接储存时间戳，使用时转换格式。13位为毫秒级时间戳）</p>
<p><img src="image-20200812041008865.png" alt="image-20200812041008865"></p>
<p>同时实体类也增加相应字段，并且使用注解<code>@TableField</code>表明填充策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">	<span class="keyword">private</span> Long created;</span><br><span class="line">	<span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">	<span class="keyword">private</span> Long updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后配置一下元对象数据处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">		Long now = SystemClock.now();</span><br><span class="line">		<span class="keyword">this</span>.setFieldValByName(<span class="string">"created"</span>, now, metaObject);</span><br><span class="line">		<span class="keyword">this</span>.setFieldValByName(<span class="string">"updated"</span>, now, metaObject);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">		Long now = SystemClock.now();</span><br><span class="line">		<span class="keyword">this</span>.setFieldValByName(<span class="string">"updated"</span>, now, metaObject);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：<code>SystemClock</code>是MybatisPlus的工具类，这是对于高并发场景下System.currentTimeMillis()的性能问题的优化实现</p>
<p>插入测试：</p>
<p><img src="image-20200812042020310.png" alt="image-20200812042020310"></p>
<p>更新测试：</p>
<p><img src="image-20200812042225277.png" alt="image-20200812042225277"></p>
<p>可以看到对应的填充策略成功生效了</p>
<h2 id="三、乐观锁"><a href="#三、乐观锁" class="headerlink" title="三、乐观锁"></a>三、乐观锁</h2><h3 id="1、配置"><a href="#1、配置" class="headerlink" title="1、配置"></a>1、配置</h3><p>按照官网<span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvb3B0aW1pc3RpYy1sb2NrZXItcGx1Z2luLmh0bWw=">实现方式<i class="fa fa-external-link-alt"></i></span>的说明，先在数据库的表中增加一列version字段</p>
<p><em>列名不是固定的，但支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>实体类中也增加相应的字段并添加<code>@Version</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>然后新建一个配置类，把<code>OptimisticLockerInterceptor</code>作为Bean注入进来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用演示"><a href="#2、使用演示" class="headerlink" title="2、使用演示"></a>2、使用演示</h3><p>更新成功的乐观锁：</p>
<p><img src="image-20200813201617509.png" alt="image-20200813201617509"></p>
<p>模拟更新失败的乐观锁：</p>
<p>在user对象更新前user2对象抢先执行了更新（同一条数据），那么user更新的数据就不会执行</p>
<p><img src="image-20200813201745484.png" alt="image-20200813201745484"></p>
<p>注意这里是先查询了数据再执行更新，如果手动new一个对象去设置id，那么乐观锁是不会生效的</p>
<h2 id="四、分页查询"><a href="#四、分页查询" class="headerlink" title="四、分页查询"></a>四、分页查询</h2><p>在上述配置类<code>MybatisPlusConfig</code>中增加一个Bean即可，可以给<code>PaginationInterceptor</code>类增加一些设定。以下是最简示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">userDao.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">page.getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>Page对象的构造参数分别为当前页（基1）和每页显示条数</p>
<h2 id="五、逻辑删除"><a href="#五、逻辑删除" class="headerlink" title="五、逻辑删除"></a>五、逻辑删除</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvbG9naWMtZGVsZXRlLmh0bWw=">逻辑删除<i class="fa fa-external-link-alt"></i></span>：与物理删除相对应，即使用一个删除标记来判断是否删除，实际并未删除</p>
<h3 id="1、配置-1"><a href="#1、配置-1" class="headerlink" title="1、配置"></a>1、配置</h3><p>首先增加一列字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> deleted <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>实体类也增加相应的字段，同时使用注解标记为表字段逻辑处理（逻辑删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<p>可以在配置文件中设置逻辑删除值和未删除值（1和0是默认值，可以不设置）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h3 id="2、演示"><a href="#2、演示" class="headerlink" title="2、演示"></a>2、演示</h3><p>删除演示：</p>
<p><img src="image-20200813220756290.png" alt="image-20200813220756290"></p>
<p>查询时也不会看到标记为删除的数据</p>
<p><img src="image-20200813221041407.png" alt="image-20200813221041407"></p>
<h2 id="六、SQL性能分析"><a href="#六、SQL性能分析" class="headerlink" title="六、SQL性能分析"></a>六、SQL性能分析</h2><p>3.1.0版本开始，MP推荐使用<span class="exturl" data-url="aHR0cHM6Ly9wNnNweS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv">p6spy<i class="fa fa-external-link-alt"></i></span>来<span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvcDZzcHkuaHRtbA==">执行SQL分析打印<i class="fa fa-external-link-alt"></i></span>。原来自带的分析插件在3.2.0被移除了</p>
<p>导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为使用这个组件会有性能损耗，不建议生产环境使用，所以可以使用多环境配置文件来进行配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>然后在application-dev.properties文件中更改下面两个选项</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:p6spy:mysql://localhost:3306/test?useSSL=false</span></span><br></pre></td></tr></table></figure>

<p>新建一个spy.properties文件，内容参考MP官网说明或者p6spy的文档，需要注意的：</p>
<ul>
<li><code>driverlist</code>指定实际驱动</li>
<li><code>logMessageFormat</code>除了可以使用MP实现的日志打印格式，还有<code>com.p6spy.engine.spy.appender</code>包下的<code>MultiLineFormat</code>、<code>CustomLineFormat</code>、<code>SingleLineFormat</code></li>
</ul>
<p>运行示例：</p>
<p><img src="image-20200814165117876.png" alt="image-20200814165117876"></p>
<h2 id="七、条件构造器"><a href="#七、条件构造器" class="headerlink" title="七、条件构造器"></a>七、条件构造器</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvd3JhcHBlci5odG1s">条件构造器<i class="fa fa-external-link-alt"></i></span>可以用于条件查询，能够执行一些比较复杂的SQL语句</p>
<p><code>AbstractWrapper</code>为条件查询的抽象封装类，实际使用的是其子类<code>QueryWrapper</code>和<code>UpdateWrapper</code></p>
<h3 id="1、部分示例"><a href="#1、部分示例" class="headerlink" title="1、部分示例"></a>1、部分示例</h3><h4 id="查询age大于20的数据，按顺序排列"><a href="#查询age大于20的数据，按顺序排列" class="headerlink" title="查询age大于20的数据，按顺序排列"></a>查询age大于20的数据，按顺序排列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.gt(<span class="string">"age"</span>, <span class="number">20</span>).orderByAsc(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200814230747596.png" alt="image-20200814230747596"></p>
<h4 id="查询id在2和4（包括2和4）之间，并且name中含有a的模糊查询"><a href="#查询id在2和4（包括2和4）之间，并且name中含有a的模糊查询" class="headerlink" title="查询id在2和4（包括2和4）之间，并且name中含有a的模糊查询"></a>查询id在2和4（包括2和4）之间，并且name中含有a的模糊查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">"id"</span>, <span class="number">2</span>, <span class="number">4</span>).like(<span class="string">"name"</span>,<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200814233205732.png" alt="image-20200814233205732"></p>
<h4 id="子查询-选择部分字段"><a href="#子查询-选择部分字段" class="headerlink" title="子查询+选择部分字段"></a>子查询+选择部分字段</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.select(<span class="string">"name"</span>, <span class="string">"email"</span>, <span class="string">"age"</span>).inSql(<span class="string">"name"</span>, <span class="string">"select name from user where id &lt; 3"</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200815010112103.png" alt="image-20200815010112103"></p>
<h2 id="八、代码生成器"><a href="#八、代码生成器" class="headerlink" title="八、代码生成器"></a>八、代码生成器</h2><h3 id="1、简介-2"><a href="#1、简介-2" class="headerlink" title="1、简介"></a>1、简介</h3><blockquote>
<p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
</blockquote>
<p>使用介绍：<span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGUvZ2VuZXJhdG9yLmh0bWw=">https://baomidou.com/guide/generator.html<i class="fa fa-external-link-alt"></i></span></p>
<p>详细配置：<span class="exturl" data-url="aHR0cHM6Ly9iYW9taWRvdS5jb20vY29uZmlnL2dlbmVyYXRvci1jb25maWcuaHRtbA==">https://baomidou.com/config/generator-config.html<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="2、示例-2"><a href="#2、示例-2" class="headerlink" title="2、示例"></a>2、示例</h3><h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><blockquote>
<p>MyBatis-Plus 从 3.0.3 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖<br>Velocity 作为默认的模版引擎配置，这里导入依赖仅为了生成文件，不用了解如何使用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-编写配置"><a href="#2-2-编写配置" class="headerlink" title="2.2 编写配置"></a>2.2 编写配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT_PATH = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SRC_MAIN_JAVA = <span class="string">"/src/main/java"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHOR = <span class="string">"VoidSoul"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_DRIVER_NAME = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/test?useSSL=false"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_USERNAME = <span class="string">"root"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_PASSWORD = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_PARENT = <span class="string">"com.example"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 全局配置</span></span><br><span class="line">		GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">		gc.setOutputDir(PROJECT_PATH + SRC_MAIN_JAVA);</span><br><span class="line">		gc.setAuthor(AUTHOR).setIdType(IdType.AUTO);</span><br><span class="line">		gc.setOpen(<span class="keyword">false</span>).setFileOverride(<span class="keyword">false</span>)</span><br><span class="line">				.setEnableCache(<span class="keyword">false</span>).setKotlin(<span class="keyword">false</span>).setSwagger2(<span class="keyword">false</span>);</span><br><span class="line">		gc.setEntityName(<span class="string">"%s"</span>).setMapperName(<span class="string">"%sDao"</span>)</span><br><span class="line">				.setServiceName(<span class="string">"%sService"</span>).setServiceImplName(<span class="string">"%sServiceImpl"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 数据源配置</span></span><br><span class="line">		DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">		dsc.setDriverName(DB_DRIVER_NAME).setUrl(DB_URL);</span><br><span class="line">		dsc.setUsername(DB_USERNAME).setPassword(DB_PASSWORD);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 数据库表策略配置</span></span><br><span class="line">		StrategyConfig sc = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">		sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">		sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">		sc.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">		sc.setInclude(<span class="string">"user"</span>);</span><br><span class="line">		sc.setVersionFieldName(<span class="string">"version"</span>);</span><br><span class="line">		sc.setLogicDeleteFieldName(<span class="string">"deleted"</span>);</span><br><span class="line">		<span class="comment">// 表填充字段</span></span><br><span class="line">		TableFill created = <span class="keyword">new</span> TableFill(<span class="string">"created"</span>, FieldFill.INSERT);</span><br><span class="line">		TableFill updated = <span class="keyword">new</span> TableFill(<span class="string">"updated"</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">		sc.setTableFillList(Arrays.asList(created, updated));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 包配置</span></span><br><span class="line">		PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">		pc.setParent(PACKAGE_PARENT).setModuleName(MODULE_NAME);</span><br><span class="line">		pc.setEntity(<span class="string">"entity"</span>).setMapper(<span class="string">"dao"</span>);</span><br><span class="line">		pc.setService(<span class="string">"service"</span>).setServiceImpl(<span class="string">"service.impl"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 模版配置</span></span><br><span class="line">		TemplateConfig tc = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">		tc.disable(TemplateType.XML, TemplateType.CONTROLLER);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 注入配置，用于自定义</span></span><br><span class="line">		InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// 自定义输出配置</span></span><br><span class="line">		FileOutConfig foc = <span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.vm"</span>) &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> PROJECT_PATH + <span class="string">"/src/main/resources/mappers/"</span></span><br><span class="line">						+ tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		cfg.setFileOutConfigList(Collections.singletonList(foc));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 生成器聚合配置、执行生成</span></span><br><span class="line">		AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">		mpg.setGlobalConfig(gc);</span><br><span class="line">		mpg.setDataSource(dsc);</span><br><span class="line">		mpg.setStrategy(sc);</span><br><span class="line">		mpg.setPackageInfo(pc);</span><br><span class="line">		mpg.setTemplate(tc);</span><br><span class="line">		mpg.setCfg(cfg);</span><br><span class="line">		mpg.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行以上配置将在当前工程的<code>com.example.test</code>包下根据<code>user</code>表创建<code>entity</code>、<code>dao</code>和<code>service</code>包并生成相应文件（在模版配置里禁用了生成<code>controller</code>），在<code>resources</code>下创建<code>mappers</code>包并生成xml文件。</p>
<p>需要注意的：</p>
<ul>
<li>必须导入模版引擎依赖，否则生成器无法执行</li>
<li>在官网详细配置或源码文档中可以找到所有的设置，非常多</li>
<li>基本上所有的setXXX方法都支持链式调用</li>
<li>自定义配置在输出文件时会被优先执行</li>
<li>配置的数据源仅用于生成器连接数据库访问数据表</li>
<li>没有使用set的配置（包括配置对象自身），会使用默认的配置</li>
</ul>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>spring整合mybatis的简单示例</title>
    <url>/spring/spring-mybatis/</url>
    <content><![CDATA[<p>spring虽然有jdbcTemplate可以简化jdbc的相关操作，但sql语句还是会写在代码里，耦合度较高。此时专业的持久层框架mybatis的优越性就体现出来了，这里通过一个简单的例子将spring整合mybatis的相关步骤记录一下，这篇示例不会涉及表示层与业务层，仅展示整合步骤。</p>
<a id="more"></a>

<h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><ul>
<li>Intellij IDEA2019.3</li>
<li>jdk8</li>
<li>maven3.6</li>
</ul>
<h3 id="如何整合"><a href="#如何整合" class="headerlink" title="如何整合"></a>如何整合</h3><p>spring的优势是IoC/DI，mybatis则是避免书写JDBC代码。那么我们可以把mybatis的sqlSession对象以及数据映射对象交给spring管理，仅配置java对象和映射文件即可。<br>在这个过程中，仅数据库驱动包、spring框架包和mybatis包是不够的，还需要<span class="exturl" data-url="aHR0cDovL215YmF0aXMub3JnL3NwcmluZy96aC9pbmRleC5odG1s">mybatis-spring<i class="fa fa-external-link-alt"></i></span>这个整合包，通过这个包的功能来把SqlSessionFactory配置给spring。各部分对应版本在文档简介部分有说明。</p>
<h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>首先需要数据库建表，这里参考<a href="/mybatis/mybatis-association-query/#1-创建数据表-amp-插入数据">char_info</a>表</p>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><p>需要使用的jar依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依赖关系如图<br><img src="352365815.png" alt="img"></p>
<h4 id="CharInfo-java"><a href="#CharInfo-java" class="headerlink" title="CharInfo.java"></a>CharInfo.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String star;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> initialCost;</span><br><span class="line">	<span class="keyword">private</span> String workName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> workId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以下省略Setter/Getter与toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CharInfoMapper接口"><a href="#CharInfoMapper接口" class="headerlink" title="CharInfoMapper接口"></a>CharInfoMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.CharInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharInfoMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;CharInfo&gt; <span class="title">listAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="charInfo-xml"><a href="#charInfo-xml" class="headerlink" title="charInfo.xml"></a>charInfo.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.CharInfoMapper"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listAll"</span> <span class="attr">resultType</span>=<span class="string">"CharInfo"</span>&gt;</span></span><br><span class="line">		select * from char_info</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里实现mybatis自动映射的关键是</p>
<ol>
<li>namespace需要书写接口类的全限定名</li>
<li>sql语句标签的id要与接口方法名一致</li>
<li>参数类型与返回值类型需要一致(<code>select *</code>比较特殊，不需要指定List，只用List内需要包装的类型即可)</li>
</ol>
<h4 id="applicationContext-xml-重点"><a href="#applicationContext-xml-重点" class="headerlink" title="applicationContext.xml(重点)"></a>applicationContext.xml(重点)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--一般注解配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用spring配置数据源--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mybatis与spring整合相关配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--别名设置--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"pojo"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--自 1.3.0 版本开始，新增的 configuration 属性--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--能够在没有对应的 MyBatis XML 配置文件的情况下--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--直接设置 Configuration 实例，这里开启了驼峰命名转换--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mapper接口包遍历扫描--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"mapper"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--单个mapper接口设置--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;bean class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name="sqlSessionFactory" ref="sqlSession"/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name="mapperInterface" value="mapper.CourseMapper"/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAlltest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoMapper charInfoMapper = (CharInfoMapper) context.getBean(<span class="string">"charInfoMapper"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; courseList = charInfoMapper.listAll();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : courseList) &#123;</span><br><span class="line">			System.out.println(charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基于AspectJ的AOP示例</title>
    <url>/spring/spring-aspectj-aop/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="关于AOP"><a href="#关于AOP" class="headerlink" title="关于AOP"></a>关于AOP</h3><blockquote>
<p>AOP即Aspect Oriented Programming（面向切面编程），其通过提供另一种思考程序结构的方式来补充OOP（面向对象编程）.OOP中的key模块化单元是class，而AOP中，模块化单元是aspect。利用AOP可以对业务逻辑的各个部分进行隔离，从而降低业务逻辑各部分之间的耦合度，提高程序的可重用性，同时提高了开发的效率。</p>
</blockquote>
<a id="more"></a>

<h3 id="关于AspectJ与Spring"><a href="#关于AspectJ与Spring" class="headerlink" title="关于AspectJ与Spring"></a>关于AspectJ与Spring</h3><ul>
<li>AspectJ是一个面向切面的框架，它扩展了Java语言，定义了AOP语法</li>
<li>Spring2.0以后新增了对AspectJ切点表达式支持</li>
<li>@AspectJ是Aspect5新增的功能,通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><h3 id="AOP相关术语及概念"><a href="#AOP相关术语及概念" class="headerlink" title="AOP相关术语及概念"></a>AOP相关术语及概念</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><table>
<thead>
<tr>
<th>术语</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>JoinPoint(连接点)</td>
<td>可以被拦截到的点（程序执行期间的一个点）,例如方法的执行或exception（异常）的处理。在 Spring AOP 中，连接点始终表示方法。不能被拦截的点，比如被final修饰的方法就不叫连接点</td>
</tr>
<tr>
<td>Pointcut(切入点)</td>
<td>真正被拦截的点，也就是被指定需要advice的方法</td>
</tr>
<tr>
<td>Advice(建议)</td>
<td>在切入点被拦截后采取的操作，也可以理解为通知或增强</td>
</tr>
<tr>
<td>Target(目标)</td>
<td>被一个或多个Advice处理的object</td>
</tr>
<tr>
<td>Weaving(编织)</td>
<td>将Advice应用到Target并创建一个被增强的object的过程。这可以在编译时、加载时或运行时完成。Spring的AOP使用运行时执行编织。</td>
</tr>
<tr>
<td>Proxy(代理)</td>
<td>被增强的object就叫做代理对象，在spring里使用的是JDK动态代理或CGLIB代理</td>
</tr>
<tr>
<td>Aspect(切面)</td>
<td>一个或多个Pointcut和Advice的组合就叫Aspect</td>
</tr>
</tbody></table>
<h4 id="Advice的类型："><a href="#Advice的类型：" class="headerlink" title="Advice的类型："></a>Advice的类型：</h4><ul>
<li>前置通知：在连接点之前执行但不能阻止执行流程进入连接点的Advice(除非抛出异常)</li>
<li>后置通知：在连接点正常完成后执行的Advice。如果方法正常返回而不抛出异常。</li>
<li>环绕通知：围绕连接点的Advice，例如方法调用。环绕通知可以在方法调用之前和之后执行自定义行为，甚至阻止方法的执行，它还负责选择是继续加入点还是通过返回自己的返回值或抛出异常来决定方法的执行。</li>
<li>异常抛出通知：如果方法通过抛出异常退出，则执行Advice</li>
<li>最终通知：无论连接点退出的方式是否正常，都要执行的Advice。类似try-catch语句finally语句块的功能</li>
</ul>
<h4 id="execution切入点表达式"><a href="#execution切入点表达式" class="headerlink" title="execution切入点表达式"></a>execution切入点表达式</h4><p>通过execution函数,可以定义切点的方法切入，语法如下：</p>
<blockquote>
<p>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;声明类型&gt;?&lt;方法名&gt;(&lt;参数&gt;)&lt;异常类型&gt;?)</p>
</blockquote>
<p>其中?同正则表达式，表示可以出现0次或1次（可以省略），声明类型一般指java包路径</p>
<p>通配符说明：</p>
<ul>
<li>*　表示若干字符（不包括<code>.</code>）</li>
<li>..　表示若干字符（包括<code>.</code>）</li>
<li>+　表示子类，比如Dao+表示Dao类及其子类</li>
</ul>
<p>简单示例：</p>
<ul>
<li>匹配任意public方法：<code>execution(public * *(..))</code></li>
<li>匹配指定包下所有类的方法：不包含子包<code>execution(* org.example.*(..))</code><br>包含子包<code>execution(* org.example..*(..))</code></li>
<li>任意名字为set开头的方法：<code>execution(* set*(..))</code></li>
</ul>
<h2 id="项目基础构建"><a href="#项目基础构建" class="headerlink" title="项目基础构建"></a>项目基础构建</h2><p>本示例使用环境：IDEA2019.3 + maven3.6 + jdk8</p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>需要添加的依赖<br>（因为spring-context依赖于spring-aop,spring-beans,spring-core,spring-expression，所以仅需说明spring-context包，上述包会同时导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h3><p>输入<code>&lt;aop:</code>idea会自动提示并添加aop的xmlns。<br>这里开启aop的aspectj-autoproxy（aspectj自动代理），以及包的注解扫描即可。后续会单独说明非注解的xml配置方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.annotation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解方式AOP"><a href="#注解方式AOP" class="headerlink" title="注解方式AOP"></a>注解方式AOP</h2><h3 id="模拟业务类"><a href="#模拟业务类" class="headerlink" title="模拟业务类"></a>模拟业务类</h3><p>org.example.annotation包下新建UserDao类模拟业务方法，未使用接口，仅输出信息。使用注解注入bean。其中find方法增加返回值，findOne方法抛出异常方便后续测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"保存……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询……"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"return value of find()"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询一条……"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"修改……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置切面类并实现各种通知方法"><a href="#配置切面类并实现各种通知方法" class="headerlink" title="配置切面类并实现各种通知方法"></a>配置切面类并实现各种通知方法</h3><p>新建UserDaoAspect类并配置注解，@Aspect表示这是一个切面，@Component配置bean，可以不增加name或id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.delete(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···前置通知···JoinPoint信息："</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.find(..))"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···后置通知···获取到的返回值："</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.save(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知前···"</span>);</span><br><span class="line">		Object proceed = joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知后···"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.findOne(..))"</span>, throwing = <span class="string">"e"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···异常抛出通知···异常信息："</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.update(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<ul>
<li>before方法的参数joinPoint会提供具体被执行的execution字符串</li>
<li>@AfterReturning的returning参数可以获取到切入点的返回值（需要在通知方法中传入同名参数）</li>
<li>around方法需要传入ProceedingJoinPoint类型的参数，使用其proceed方法来执行被拦截的方法，同时返回值作为通知方法的返回值</li>
<li>@AfterThrowing的throwing参数使用方法类似@AfterReturning的returning，可以获取到异常抛出时的异常信息，此通知在无异常时不会执行</li>
</ul>
<h3 id="测试代码与输出结果"><a href="#测试代码与输出结果" class="headerlink" title="测试代码与输出结果"></a>测试代码与输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	UserDao userDao = (UserDao) context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">	userDao.delete();</span><br><span class="line">	userDao.find();</span><br><span class="line">	userDao.save();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		userDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	userDao.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3061606868.png" alt="img"></p>
<h3 id="使用-Pointcut命名切点"><a href="#使用-Pointcut命名切点" class="headerlink" title="使用@Pointcut命名切点"></a>使用@Pointcut命名切点</h3><p>当需要使用的通知方法变多的时候，后期维护再修改又会变得很麻烦，所以可以使用<code>@Pointcut</code>注解来命名一组切点，此注解的定义包括两部分：Pointcut表达式(expression)和Pointcut签名(signature)。注解不能单独使用，所以需要定义一个私有方法，也就是说@Pointcut后跟expression，私有方法的方法名为signature，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After</span>(<span class="string">"afterUpdate()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.update(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterUpdate</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Pointcut定义时，还可以使用&amp;&amp;、||、!逻辑运算符</p>
<h2 id="xml方式配置AOP"><a href="#xml方式配置AOP" class="headerlink" title="xml方式配置AOP"></a>xml方式配置AOP</h2><h3 id="新建模拟业务类和切面类"><a href="#新建模拟业务类和切面类" class="headerlink" title="新建模拟业务类和切面类"></a>新建模拟业务类和切面类</h3><p>ProductDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"保存……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询……"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"return value of find()"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"修改……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询一条……"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···前置通知···JoinPoint信息："</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···后置通知···获取到的返回值："</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知前···"</span>);</span><br><span class="line">		Object proceed = joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知后···"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···异常抛出通知···异常信息："</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务类可以使用接口也可以不使用，spring会自动检测来决定使用哪种自动代理。切面类无需添加任何注解</p>
<h3 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productDao"</span> <span class="attr">class</span>=<span class="string">"org.example.xml.ProductDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productDaoAspect"</span> <span class="attr">class</span>=<span class="string">"org.example.xml.ProductDaoAspect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"beforeSave"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.save(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterFind"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.find(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"aroundUpdate"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.update(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterThrowing"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.findOne(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterDelete"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.delete(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"productDaoAspect"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"beforeSave"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterFind"</span> <span class="attr">returning</span>=<span class="string">"returnValue"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"aroundUpdate"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterThrowing"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterDelete"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先注入目标类和切面类，然后配置aop，这里直接使用了aop:pointcut来命名切点，也可以在具体切面里直接书写表达式。</p>
<h3 id="测试代码与输出结果-1"><a href="#测试代码与输出结果-1" class="headerlink" title="测试代码与输出结果"></a>测试代码与输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xmlTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ProductDao productDao  = (ProductDao) context.getBean(<span class="string">"productDao"</span>);</span><br><span class="line"></span><br><span class="line">	productDao.save();</span><br><span class="line">	productDao.find();</span><br><span class="line">	productDao.update();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		productDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	productDao.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3626514518.png" alt="img"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>aspectj</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合shiro（续）</title>
    <url>/springboot/springboot-shiro-continue/</url>
    <content><![CDATA[<p>在之前的文章里，介绍了shiro的基础以及如何与springboot中基于web项目的整合，并同时结合了mybatis的使用。</p>
<p>此文将着重讲解其中潜藏问题的处理，以及后续功能的扩展完善。</p>
<a id="more"></a>

<h2 id="一、没有被BPP处理的Beans"><a href="#一、没有被BPP处理的Beans" class="headerlink" title="一、没有被BPP处理的Beans"></a>一、没有被BPP处理的Beans</h2><p>BPP即<code>BeanPostProcessor</code></p>
<blockquote>
<p>BeanPostProcessor是Spring中Bean工厂的钩子（Hook），允许Spring框架在新创建Bean实例时对其进行定制化修改。它本身也是一个Bean，在通常情况下，其实例化顺序要优先于普通的Bean。因为有时BeanPostProcessor也会依赖一些Bean，所以，会存在一些普通Bean的实例化早于BeanPostProcessor的情况，因此就会造成一些问题。</p>
</blockquote>
<h3 id="1、问题复现"><a href="#1、问题复现" class="headerlink" title="1、问题复现"></a>1、问题复现</h3><p>按照shiro官方的例子<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zaGlyby90cmVlL21hc3Rlci9zYW1wbGVzL3NwcmluZy1ib290LXdlYg==">spring-boot-web<i class="fa fa-external-link-alt"></i></span>配置shiro即可复现（以及大多数springboot整合shiro的教程）。启动日志中，会有数个类似如下消息的提示</p>
<blockquote>
<p>Bean ‘securityManager’ of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</p>
</blockquote>
<p>对于spring来说，这是<code>info</code>级别的日志输出，因为此现象对程序运行不会产生影响，但对于使用功能上来说是会出问题的，例如：事务失效、缓存失效、数据源失效等权限框架涉及的数据处理可能会出问题，所以需要解决。</p>
<h3 id="2、成因简析"><a href="#2、成因简析" class="headerlink" title="2、成因简析"></a>2、成因简析</h3><p>详细的分析可以参考这篇文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3OTYyNzc5L2FydGljbGUvZGV0YWlscy83ODYwNTQ3OA==">BeanPostProcessor加载次序及其对Bean造成的影响分析<i class="fa fa-external-link-alt"></i></span></p>
<p>简单来说大概是因为shiro一系列bean的初始化要早于数据访问层的bean，而又在Realm中注入了DAO等数据访问层的类，导致数据访问层相关的bean被提前初始化，没有被后续的BeanPostProcessor处理。</p>
<p>这对于shiro来说没什么影响，而对于需要事务、缓存等功能的数据访问层来说就很致命了。目前百度的结果大多数处理方法都无法完全解决问题，比较简单有效的方法是在Realm中注入的DAO加个<code>@Lazy</code>注解将其延后，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>

<p>这样会使shiro的bean等待数据层的bean初始化完成后再执行。如果仅处理数据层的问题，现在已经完成了，再次启动项目，上述info级的日志仅剩下<code>securityManager</code>、<code>realm</code>、<code>shiroConfig</code>（后两个是自己项目中定义的Realm类和shiro配置类）</p>
<h3 id="3、彻底消除影响"><a href="#3、彻底消除影响" class="headerlink" title="3、彻底消除影响"></a>3、彻底消除影响</h3><p>最无奈的莫过于知道问题如何产生的，但不知道如何解决。百度无果后，尝试谷歌，使用关键词<em>shiro BeanPostProcessor</em>搜索终于在stackoverflow上找到了答案。</p>
<p>其中一篇是<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU5MjI1NTkvc3ByaW5nLWlzLWlnbm9yaW5nLXRyYW5zYWN0aW9uYWwtYW5ub3RhdGlvbnMtaW4tYXBhY2hlLXNoaXJvLXJlYWxtLWNsYXNz">Spring is ignoring @Transactional annotations in Apache Shiro Realm class<i class="fa fa-external-link-alt"></i></span>。给出的处理方案是在<code>securityManager</code>中不要setRealm，而是继承<code>ServletContextListener</code>接口，在<code>contextInitialized</code>方法中把<code>Realm</code>设置到<code>securityManager</code>中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Initialize realms</span></span><br><span class="line">        <span class="keyword">final</span> MainRealm mainRealm = (MainRealm)ctx.getBean(<span class="string">"mainRealm"</span>);</span><br><span class="line">        <span class="keyword">final</span> DefaultWebSecurityManager sm = (DefaultWebSecurityManager)ctx.getBean(<span class="string">"securityManager"</span>);</span><br><span class="line">        sm.setRealm(mainRealm);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Error loading: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Critical system error"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实践后发现与使用<code>@Lazy</code>注解的方式相差不大，倒是启动速度好像快了一点点，感觉这种方式比使用<code>@Lazy</code>注解更符合程序逻辑。</p>
<hr>
<p>另外一篇是<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzEzODg0NDUvYXBhY2hlLXNoaXJvLWpkYmNyZWFsbS13aXRoLWphdmFjb25maWctYW5kLXNwcmluZy1ib290">Apache Shiro JdbcRealm with JavaConfig and Spring Boot<i class="fa fa-external-link-alt"></i></span>，高赞回答的大佬剖析的更深了：</p>
<blockquote>
<p>最简单的解决方案是确保任何与基础设施相关的bean都是用静态方法定义的。这告诉Spring它不需要初始化整个配置类（即WebSecurityConfig）。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这似乎没有完全解决，因为<code>ShiroFilterFactoryBean</code>也实现了<code>BeanPostProcessor</code>，和数据源造成了冲突导致无法初始化。</p>
<blockquote>
<p>不幸的是，你不能简单地将ShiroFilterFactoryBean定义为静态的，因为它依赖于其他bean定义。幸运的是，在这个实例中确实不需要BeanPostProcessor。这意味着你可以更改代码以返回factory bean的结果，该bean相当于移除了BeanPostProcessor</p>
</blockquote>
<p>示例如下，只是把返回值类型改成了<code>AbstractShiroFilter</code>，它是<code>ShiroFilterFactoryBean</code>的抽象父类，返回值转换类型即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractShiroFilter <span class="title">shiroFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean filter = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">    filter.setLoginUrl(<span class="string">"/admin/login"</span>);</span><br><span class="line">    filter.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">// 过滤规则，注意顺序</span></span><br><span class="line">    Map&lt;String, String&gt; map = filter.getFilterChainDefinitionMap();</span><br><span class="line">    <span class="comment">// 无需权限：前台、登录页面、静态资源</span></span><br><span class="line">    String anon = DefaultFilter.anon.name();</span><br><span class="line">    map.put(<span class="string">"/"</span>, anon);</span><br><span class="line">    map.put(<span class="string">"/admin/login"</span>, anon);</span><br><span class="line">    map.put(<span class="string">"/admin/css/**"</span>, anon);</span><br><span class="line">    map.put(<span class="string">"/admin/js/**"</span>, anon);</span><br><span class="line">    <span class="comment">// 需要验证角色</span></span><br><span class="line">    String roleAdmin = String.format(<span class="string">"%s[%s]"</span>, DefaultFilter.roles.name(), ConstVal.USERS_ADMIN);</span><br><span class="line">    map.put(<span class="string">"/admin/**"</span>, roleAdmin);</span><br><span class="line">    <span class="comment">// 退出</span></span><br><span class="line">    map.put(<span class="string">"/admin/logout"</span>, DefaultFilter.logout.name());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (AbstractShiroFilter) filter.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果要改为如上处理方式，不能使用shiro-spring-boot-web-starter依赖，而是shiro-spring</strong></p>
<p>现在启动程序，“not eligible for getting processed by all BeanPostProcessors”相关的提示已经完全消失了。</p>
<h2 id="二、使用加密的密码"><a href="#二、使用加密的密码" class="headerlink" title="二、使用加密的密码"></a>二、使用加密的密码</h2><p>shiro提供了一些简单的基础<span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcvY3J5cHRvZ3JhcGh5LWZlYXR1cmVzLmh0bWw=">加密功能<i class="fa fa-external-link-alt"></i></span>，接口类是<code>CredentialsMatcher</code>，默认使用的实现类是<code>SimpleCredentialsMatcher</code>，即直接明文比对，可以使用的实现类如下：</p>
<p><img src="image-20200829175633678.png" alt="image-20200829175633678"></p>
<p>虽然哈希类型的加密算法（也称消息摘要）是不可逆的，也就是无法通过解密来获取原文。但原文和密文有唯一对应关系，比如常用的MD5，<code>123456</code>对应密文为<code>e10adc3949ba59abbe56e057f20f883e</code>。这样的话可以通过类似<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJEJUE5JUU4JTk5JUI5JUU4JUExJUE4">彩虹表<i class="fa fa-external-link-alt"></i></span>的方式破解，密码的安全性就变低了。所以需要使用更安全的算法（例如<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmNyeXB0">bcrypt<i class="fa fa-external-link-alt"></i></span>）来代替MD5。</p>
<hr>
<p>shiro没有bcrypt算法的实现，需要引入额外的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>at.favre.lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcrypt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一个基于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RqbWRqbS9qQkNyeXB0">JBcrypt<i class="fa fa-external-link-alt"></i></span>，但是经过了大量的重构、更新和增强的一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdHJpY2tmYXYvYmNyeXB0">Bcrypt Java Library and CLI Tool<i class="fa fa-external-link-alt"></i></span>。使用方法很简单，在Realm实例里<code>setCredentialsMatcher</code>使用lamda表达式设置，返回比对结果true or false即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">	UserRealm realm = <span class="keyword">new</span> UserRealm();</span><br><span class="line">	realm.setCredentialsMatcher((token, info) -&gt; &#123;</span><br><span class="line">		UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line">		<span class="comment">// 传入的密码明文</span></span><br><span class="line">		<span class="keyword">char</span>[] plaintext = userToken.getPassword();</span><br><span class="line">		<span class="comment">// 数据库中的密文</span></span><br><span class="line">		String ciphertext = info.getCredentials().toString();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> BCrypt.verifyer().verify(plaintext, ciphertext).verified;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> realm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>token</code>是在认证(authentication)期间获得的认证令牌，也就是<code>doGetAuthenticationInfo</code>方法中的参数<code>AuthenticationToken</code>；<code>info</code>即<code>AuthenticationInfo</code>是在认证(authentication)期间的返回值，它是储存于系统（通常是数据库）的认证信息</p>
<h2 id="三、保存会话"><a href="#三、保存会话" class="headerlink" title="三、保存会话"></a>三、保存会话</h2><h3 id="1、记住我"><a href="#1、记住我" class="headerlink" title="1、记住我"></a>1、记住我</h3><p>大多数网站的登录都会有个“记住我”的功能选项，像下面这样：</p>
<p><img src="image-20200829225526950.png" alt="image-20200829225526950"></p>
<h4 id="1-1-开启功能"><a href="#1-1-开启功能" class="headerlink" title="1.1 开启功能"></a>1.1 开启功能</h4><p>在前端，使用<code>input:checkbox</code>即可，name在后端对应参数接收，value为true即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>七天内免登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为在未勾选时是不会传值的，所以在controller中需要设置一个非必须的标记（默认为true）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(value = <span class="string">"remember-me"</span>, required = <span class="keyword">false</span>) Boolean rememberMe</span><br></pre></td></tr></table></figure>

<p>然后就可以设置了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否记住我（必须在subject.login(token)前，否则不会产生cookie）</span></span><br><span class="line"><span class="keyword">if</span> (rememberMe != <span class="keyword">null</span>) &#123;</span><br><span class="line">    token.setRememberMe(rememberMe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-设置时效"><a href="#1-2-设置时效" class="headerlink" title="1.2 设置时效"></a>1.2 设置时效</h4><p>默认的“记住我”时效为一年，这是在<code>CookieRememberMeManager</code>中的构造函数设置的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CookieRememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> SimpleCookie(DEFAULT_REMEMBER_ME_COOKIE_NAME);</span><br><span class="line">    cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//One year should be long enough - most sites won't object to requiring a user to log in if they haven't visited</span></span><br><span class="line">    <span class="comment">//in a year:</span></span><br><span class="line">    cookie.setMaxAge(Cookie.ONE_YEAR);</span><br><span class="line">    <span class="keyword">this</span>.cookie = cookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>shiro在注释中给出了一年时长的理由。如果我们确实有需求改变这个值也可以，在<code>securityManager</code>中即可设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = ((CookieRememberMeManager) securityManager.getRememberMeManager()).getCookie();</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>); <span class="comment">// 记住我七天</span></span><br></pre></td></tr></table></figure>

<p>这个是shiro实现的Cookie不是servlet的Cookie，但设置方式和后者无异。注意是先将<code>getRememberMeManager</code>获得的对象转换为<code>CookieRememberMeManager</code>，然后再<code>getCookie</code></p>
<h3 id="2、当前会话（session）"><a href="#2、当前会话（session）" class="headerlink" title="2、当前会话（session）"></a>2、当前会话（session）</h3><p>默认情况下，启动应用程序第一次访问时，会在URL后面加冒号跟一个参数<code>JSESSIONID</code>与值，在springboot-web环境下会直接跳转到400错误页，去掉参数后再次访问就正常了，此时<code>JSESSIONID</code>保存在了cookie里</p>
<p><img src="image-20200830004811803.png" alt="image-20200830004811803"></p>
<p>要避免这样的情况，依旧是在<code>securityManager</code>设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sessionManager.setSessionIdUrlRewritingEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p>要想修改这个cookie的名字也可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie sessionIdCookie = sessionManager.getSessionIdCookie();</span><br><span class="line">sessionIdCookie.setName(<span class="string">"SESSIONID"</span>);</span><br></pre></td></tr></table></figure>

<p>改值的话会稍微麻烦点，这里使用了lamda表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MemorySessionDAO sessionDAO = (MemorySessionDAO) sessionManager.getSessionDAO();</span><br><span class="line">sessionDAO.setSessionIdGenerator(session -&gt; UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>));</span><br></pre></td></tr></table></figure>

<p>shiro默认的sessionID生成方法<code>JavaUuidSessionIdGenerator</code>如下，仅仅只是返回了一个随机的UUID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaUuidSessionIdGenerator</span> <span class="keyword">implements</span> <span class="title">SessionIdGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">generateId</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：从入门到框架整合</title>
    <url>/nosql/redis-abc/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
</blockquote>
<a id="more"></a>

<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby8=">https://redis.io/<i class="fa fa-external-link-alt"></i></span>        中文官网：<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi8=">http://www.redis.cn/<i class="fa fa-external-link-alt"></i></span>        交互式教程（英文）：<span class="exturl" data-url="aHR0cDovL3RyeS5yZWRpcy5pby8=">http://try.redis.io/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>安装前需要注意的：</p>
<ol>
<li>中文官网上的非最新版本</li>
<li>官网只提供源码包下载</li>
<li>官方推荐在Linux系统上安装使用，具体方法参考上一篇文章</li>
</ol>
<p>所以这里简单说明一下如何在Windows系统上安装。因为在Windows系统上使用要编译生成exe文件，需要微软Visual Studio那一套工具，还有Windows SDK，操作较为麻烦，所以这里分享两个已经编译好的Redis for Windows。选择其一即可</p>
<p>一个是微软提供的（版本较老，已经很久没更新了）：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdGFyY2hpdmUvcmVkaXMvcmVsZWFzZXM=">Redis 3.2.1<i class="fa fa-external-link-alt"></i></span>。另一个是：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Rwb3JhZG93c2tpL3JlZGlzL3JlbGVhc2Vz">Redis 5.0.9<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<p>下载zip解压缩或msi安装，exe文件双击执行，pdb文件用于调试</p>
<p><img src="image-20200719143817458.png" alt="image-20200719143817458"></p>
<p>要附加参数的话使用cmd执行，例如<code>redis-server.exe redis.windows.conf</code>指定配置文件</p>
<p>想要后台运行的话可以安装成服务：</p>
<ul>
<li>安装服务：<code>redis-server --service-install redis.windows.conf</code></li>
<li>卸载服务：<code>redis-server --service-uninstall</code></li>
<li>启动服务：<code>redis-server --service-start</code></li>
<li>关闭服务：<code>redis-server --service-stop</code></li>
</ul>
<h2 id="三、基础"><a href="#三、基础" class="headerlink" title="三、基础"></a>三、基础</h2><p>Redis默认有16个数据库，初始使用第0个数据库，在配置文件中可以找到相关说明</p>
<blockquote>
<p># Set the number of databases. The default database is DB 0, you can select<br># a different one on a per-connection basis using SELECT <dbid> where<br># dbid is a number between 0 and ‘databases’-1<br> databases 16</p>
</blockquote>
<p>Redis的基本数据类型有五种：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</p>
<p>扩展数据类型三种：bitmap（位图），hyperloglog（基数统计）和geospatial（地理空间）</p>
<h3 id="1、库相关命令"><a href="#1、库相关命令" class="headerlink" title="1、库相关命令"></a>1、库相关命令</h3><p>切换数据库：<code>select dbid</code>（dbid为数据库下标，从0开始到库数量-1）</p>
<p>查看当前数据库keys的数量：<code>dbsize</code></p>
<p>清空<strong>当前</strong>数据库的数据：<code>flushdb</code></p>
<p>清空<strong>所有</strong>数据库的数据：<code>flushall</code></p>
<p><img src="image-20200719162004247.png" alt="image-20200719162004247"></p>
<h3 id="2、基本操作"><a href="#2、基本操作" class="headerlink" title="2、基本操作"></a>2、基本操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>SET key value</code></td>
<td>设置一个key的string值</td>
</tr>
<tr>
<td><code>GET key</code></td>
<td>返回key的string值</td>
</tr>
<tr>
<td><code>RENAME key newkey</code></td>
<td>重命名key。如果key与newkey相同，将返回一个错误。如果newkey已经存在，则值将被覆盖</td>
</tr>
<tr>
<td><code>KEYS pattern</code></td>
<td>查找所有符合给定模式pattern（正则表达式）的 key，例如<code>keys *</code>将显示所有key</td>
</tr>
<tr>
<td><code>EXISTS key</code></td>
<td>查询key是否存在，如果存在返回1，不存在返回0</td>
</tr>
<tr>
<td><code>DEL key</code></td>
<td>删除指定的一个或多个key，如果删除中的某些key不存在，则直接忽略</td>
</tr>
<tr>
<td><code>EXPIRE key seconds</code></td>
<td>设置一个key的过期的秒数，超过时间后，将会自动删除该key</td>
</tr>
<tr>
<td><code>TTL key</code></td>
<td>返回key剩余的过期秒数<br />如果key不存在或者已过期，返回 -2；如果key存在并且没有设置过期时间（永久有效），返回 -1</td>
</tr>
<tr>
<td><code>TYPE key</code></td>
<td>返回key所存储的值的数据结构类型</td>
</tr>
</tbody></table>
<p><img src="image-20200719165352594.png" alt="image-20200719165352594"></p>
<h2 id="四、基本数据类型"><a href="#四、基本数据类型" class="headerlink" title="四、基本数据类型"></a>四、基本数据类型</h2><p>以下仅介绍部分命令不作演示，推荐自行测试</p>
<h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><p>String是最基本，也是最简单的数据类型</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>APPEND key value</code></td>
<td>如果key存在并且类型为字符串，把value追加到原key值的结尾。<br />如果key不存在，那么它会先创建一个空字符串的key，再执行追加操作</td>
</tr>
<tr>
<td><code>STRLEN key</code></td>
<td>返回key的string类型value的长度。如果key的值不是string类型，就返回错误</td>
</tr>
<tr>
<td><code>INCR key</code>（<a href="#注1：">注1</a>）</td>
<td>对key的值执行原子的加1操作。如果指定的key不存在，那么在执行操作之前，会先将它的值设定为0。<br/>如果key中的值不是string类型或者存储的字符串类型不能表示为一个整数<br />那么执行这个命令时服务器会返回一个错误：(error) ERR value is not an integer or out of range</td>
</tr>
<tr>
<td><code>DECR key</code></td>
<td>对key的值执行原子的减1操作。其它同上</td>
</tr>
<tr>
<td><code>INCRBY key increment</code></td>
<td>对key的值执行原子的指定值加量操作。其它同上</td>
</tr>
<tr>
<td><code>DECRBY key decrement</code></td>
<td>对key的值执行原子的指定值减量操作。其它同上</td>
</tr>
<tr>
<td><code>GETRANGE key start end</code></td>
<td>返回key对应的字符串value由start到end的子串，闭合区间。<br />可以用负的值来表示从string尾部开始数的下标。所以-1就是最后一个字符。</td>
</tr>
<tr>
<td><code>SETRANGE key offset value</code></td>
<td>从key指定的offset处开始，用value覆盖<br />如果offset比当前key对应string还要长，那这个string后面就补0以达到offset的长度</td>
</tr>
<tr>
<td><code>SETEX key seconds value</code></td>
<td>设置key的字符串value，同时设置在指定的时间(单位：秒)之后失效（set with expire）</td>
</tr>
<tr>
<td><code>SETNX key value</code></td>
<td>如果key不存在，设置key的值为value。 当key存在时，什么也不做（set if not exists）</td>
</tr>
<tr>
<td><code>MSET key value [key value ...]</code></td>
<td>对应给定的keys到他们相应的values上。MSET会用新的value替换已经存在的value<br />此命令是原子的，所以所有给定的keys是一次性set的（全部改变或者全都不改变）</td>
</tr>
<tr>
<td><code>MGET key [key ...]</code></td>
<td>返回所有指定的key的value。对于不存在的key，返回特殊值nil</td>
</tr>
<tr>
<td><code>MSETNX key value [key value ...]</code></td>
<td>此命令批量设置key的value，同<code>SETNX</code>一样也是原子的</td>
</tr>
<tr>
<td><code>GETSET key value</code></td>
<td>返回原来key对应的value并设定新value。如果key存在但是对应的value不是字符串，就返回错误</td>
</tr>
</tbody></table>
<h4 id="注1："><a href="#注1：" class="headerlink" title="注1："></a>注1：</h4><p>这些命令(增量、减量)仅限于64位的有符号整型数据。由于redis并没有一个明确的类型来表示整型数据，所以这个操作是一个字符串操作。执行这个操作的时候，key对应存储的字符串被解析为10进制的64位有符号整型数据。事实上，Redis 内部采用整数形式来存储对应的整数值，所以对该类字符串值实际上是用整数保存，也就不存在存储整数的字符串表示所带来的额外消耗。</p>
<h3 id="2、List"><a href="#2、List" class="headerlink" title="2、List"></a>2、List</h3><blockquote>
<p>Redis列表是简单的字符串列表，按照插入顺序排序，基本上就是链表（linked lists）。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br>一个列表最多可以包含 2^32 - 1 个元素 (4294967295)。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>LPUSH key value [value ...]</code></td>
<td>把一个或多个值插入到key的list的左边（头部），对于不存在的key，插入操作前会先创建一个空list</td>
</tr>
<tr>
<td><code>RPUSH key value [value ...]</code></td>
<td>把一个或多个值插入到key的list的右边（尾部），对于不存在的key，插入操作前会先创建一个空list</td>
</tr>
<tr>
<td><code>LRANGE key start stop</code></td>
<td>返回key指定的list从start到stop下标的元素</td>
</tr>
<tr>
<td><code>LPOP key</code></td>
<td>移除并且返回 key 对应的 list 的第一个元素，不存在时返回 nil</td>
</tr>
<tr>
<td><code>RPOP key</code></td>
<td>移除并且返回 key 对应的 list 的最后一个元素，不存在时返回 nil</td>
</tr>
<tr>
<td><code>LINDEX key index</code></td>
<td>返回key指定位置的元素</td>
</tr>
<tr>
<td><code>LLEN key</code></td>
<td>返回 key 中list的长度。 如果不存在返回0。 当存储在 key 里的值不是一个list的话，会返回error</td>
</tr>
<tr>
<td><code>LREM key count value</code></td>
<td>从 key 的列表里移除前 count 次出现的值为 value 的元素，key不存在时返回0<br />count大于0时，从左往右移除；小于0时从右往左移除；等于0时移除所有</td>
</tr>
<tr>
<td><code>LTRIM key start stop</code></td>
<td>把一个list从start到stop的位置修剪掉，只保留start到stop的元素</td>
</tr>
<tr>
<td><code>RPOPLPUSH source destination</code></td>
<td>把source的最后一个元素（列表尾部元素）移动到destination的第一个元素前面（列表头部）<br />如果source不存在，那么会返回nil值，并且不会执行任何操作。<br />如果destination不存在，那么会新建一个空的destination列表，然后移动<br />如果source和destination的key相同，那么这个操作等同于移动列表最后一个元素到列表自身的头部位置</td>
</tr>
<tr>
<td><code>LSET key index value</code></td>
<td>设置列表key中index位置的值为value，当index超出范围时会返回错误</td>
</tr>
<tr>
<td><code>LINSERT key BEFORE|AFTER pivot value</code></td>
<td>在列表指定值（pivot）的前面或后面（BEFORE|AFTER）插入一个值。pivot不存在时返回-1</td>
</tr>
</tbody></table>
<p>以上命令的前缀<code>L</code>可以理解为Left，也可以理解为List，<code>R</code>则是right。所有需要位置参数（start、stop、index等）的命令，下标都为0，可以使用负数表示从尾部开始倒数。常用<code>lrange key 0 -1</code>来获取一个list的所有值</p>
<h3 id="3、Set"><a href="#3、Set" class="headerlink" title="3、Set"></a>3、Set</h3><blockquote>
<p>set是一种不重复且无序的字符串元素的集合</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>SADD key member [member ...]</code></td>
<td>添加一个或多个元素到集合key中，member已存在则忽略，key不存在则新建，key不是集合则报错</td>
</tr>
<tr>
<td><code>SMEMBERS key</code></td>
<td>返回key集合所有的元素</td>
</tr>
<tr>
<td><code>SISMEMBER key member</code></td>
<td>判断集合中一个元素是否存在，是返回1，否则返回0</td>
</tr>
<tr>
<td><code>SCARD key</code></td>
<td>返回集合中元素的数量</td>
</tr>
<tr>
<td><code>SREM key member [member ...]</code></td>
<td>移除集合中指定的元素（2.4版本后可移除多个）</td>
</tr>
<tr>
<td><code>SRANDMEMBER key [count]</code></td>
<td>随机返回集合中的一个元素。2.6版本后，可以指定一个可选项count，它将随机返回count个</td>
</tr>
<tr>
<td><code>SPOP key [count]</code></td>
<td>随机移除集合中的一个元素。3.0版本后，可以指定一个可选项count，它将随机移除count个</td>
</tr>
<tr>
<td><code>SMOVE source destination member</code></td>
<td>将源集合的指定元素移动到目标集合中</td>
</tr>
<tr>
<td><code>SDIFF key [key ...]</code></td>
<td>返回一个集合与给定集合的差集的元素</td>
</tr>
<tr>
<td><code>SINTER key [key ...]</code></td>
<td>返回指定所有集合的元素的交集</td>
</tr>
<tr>
<td><code>SUNION key [key ...]</code></td>
<td>返回指定所有集合的元素的并集</td>
</tr>
</tbody></table>
<h3 id="4、hash"><a href="#4、hash" class="headerlink" title="4、hash"></a>4、hash</h3><p>哈希散列：</p>
<blockquote>
<p>Hashes,由field和关联的value组成的map。field和value都是字符串的。这和Ruby、Python的hashes很像</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>HSET key field value</code></td>
<td>设置hash类型的key中指定字段的值</td>
</tr>
<tr>
<td><code>HGET key field</code></td>
<td>获取hash类型的key中指定字段的值。当字段不存在或者 key 不存在时返回nil</td>
</tr>
<tr>
<td><code>HMSET key field value [field value ...]</code></td>
<td>设置hash类型的key中指定多个字段的值</td>
</tr>
<tr>
<td><code>HMGET key field [field ...]</code></td>
<td>获取hash类型的key中指定多个字段的值，对于不存在的key或者字段，返回nil</td>
</tr>
<tr>
<td><code>HGETALL key</code></td>
<td>返回 key 指定的哈希集中所有的字段和值。返回值中，每个字段名的下一个是它的值</td>
</tr>
<tr>
<td><code>HDEL key field [field ...]</code></td>
<td>移除hash类型的key中指定的一个或多个字段，不存在的字段会被忽略，不存在的key会`返回0</td>
</tr>
<tr>
<td><code>HLEN key</code></td>
<td>返回hash类型的key的字段数量</td>
</tr>
<tr>
<td><code>HEXISTS key field</code></td>
<td>判断hash里是否存在指定字段，存在字段返回1，不存在字段或key返回0</td>
</tr>
<tr>
<td><code>HKEYS key</code></td>
<td>返回hash中所有的字段名</td>
</tr>
<tr>
<td><code>HVALS key</code></td>
<td>返回hash中所有字段的值</td>
</tr>
<tr>
<td><code>HINCRBY key field increment</code></td>
<td>增加hash中指定字段的数值。如果 key 不存在，会创建一个新的哈希集并与 key 关联。如果字段不存在，则字段的值在该操作执行前被设置为 0</td>
</tr>
<tr>
<td><code>HSETNX key field value</code></td>
<td>如果hash中指定字段不存在，那么设置字段的值，如果字段存在则忽略。如果key不存在，那么会创建一个新的key并与其关联</td>
</tr>
</tbody></table>
<p>hash没有HDECRBY的用法，可以通过<code>HINCRBY key field increment</code>中指定负数来减值</p>
<h3 id="5、Zset"><a href="#5、Zset" class="headerlink" title="5、Zset"></a>5、Zset</h3><p>有序集合：</p>
<blockquote>
<p>zset，也叫Sorted sets，类似Sets，但是每个字符串元素都关联到一个叫score的浮动数值（floating number value）。里面的元素总是通过score进行着排序，所以不同的是，它是可以检索的一系列元素的集合</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>ZADD key score member [score member ...]</code></td>
<td>添加一个或多个指定score值的元素到集合key中，score是一个用于排序的值（<a href="#注2：">注2</a>）</td>
</tr>
<tr>
<td><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></td>
<td>返回集合中score值在min到max中的元素（包括min和max），按从小到大排序。可以在min或max值前使用<code>(</code>来表示开区间。可选参数WITHSCORES返回元素和其分数。可选的LIMIT参数指定返回结果的数量及区间（类似SQL中SELECT LIMIT offset, count）</td>
</tr>
<tr>
<td><code>ZREVRANGE key start stop [WITHSCORES]</code></td>
<td>返回有序集合中指定区间内的元素。按score值递减(从大到小)来排列。可选参数WITHSCORES返回元素和其分数</td>
</tr>
<tr>
<td><code>ZREM key member [member ...]</code></td>
<td>移除有序集合中的指定一个或多个元素</td>
</tr>
<tr>
<td><code>ZCARD key</code></td>
<td>返回有序集合中元素的个数</td>
</tr>
<tr>
<td><code>ZCOUNT key min max</code></td>
<td>返回有序集合中，score值在min到max之间(包括min和max)的元素个数</td>
</tr>
</tbody></table>
<h4 id="注2："><a href="#注2：" class="headerlink" title="注2："></a>注2：</h4><p>Redis 有序集合的score分数值使用双精度64位浮点数。我们支持所有的架构，这表示为一个IEEE 754 floating point number，它能包括的整数范围是-(2^53) 到 +(2^53)。或者说是-9007199254740992 到 9007199254740992。更大的整数在内部用指数形式表示，所以，如果为分数设置一个非常大的整数，你得到的是一个近似的十进制数。+inf和-inf都是有效值，分别表示正无穷和负无穷</p>
<h2 id="五、扩展数据类型"><a href="#五、扩展数据类型" class="headerlink" title="五、扩展数据类型"></a>五、扩展数据类型</h2><h3 id="1、Geospatial"><a href="#1、Geospatial" class="headerlink" title="1、Geospatial"></a>1、Geospatial</h3><p>地理空间、地理位置。这种数据是基于有序集合实现的：</p>
<blockquote>
<p>sorted set使用一种称为Geohash的技术进行填充。经度和纬度的位是交错的，以形成一个独特的52位整数. 我们知道，一个sorted set 的double score可以代表一个52位的整数，而不会失去精度。</p>
<p>这种格式允许半径查询检查的1 + 8个领域需要覆盖整个半径，并丢弃元素以外的半径。通过计算该区域的范围，通过计算所涵盖的范围，从不太重要的部分的排序集的得分，并计算得分范围为每个区域的sorted set中的查询。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>GEOADD key longitude latitude member [longitude latitude member ...]</code></td>
<td>将指定的一个或多个地理空间位置添加到指定的key中，按经度、纬度、名称的顺序。<br />经度范围为-180度到180度，纬度范围为-85.05112878度到85.05112878度</td>
</tr>
<tr>
<td><code>GEODIST key member1 member2 [unit]</code></td>
<td>返回两个指定位置之间的直线距离，指定单位unit可选m、km、mi、ft（米、千米、英里、英尺）之一，默认使用米</td>
</tr>
<tr>
<td><code>GEOPOS key member [member ...]</code></td>
<td>返回指定的一个或多个元素的位置（经度、纬度）</td>
</tr>
<tr>
<td><code>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></td>
<td>返回指定经纬度（圆心）。不超过给定范围（半径）所有位置的元素<br />范围单位可选可选m、km、mi、ft（米、千米、英里、英尺）之一<br />WITHCOORD选项将范围内元素的经纬度一并返回<br />WITHDIST选项将范围内元素与圆点的距离一并返回<br />WITHHASH选项将经纬度经过原始 geohash 编码的有序集合分值（不常用）<br />COUNT指定前N个匹配的元素数量</td>
</tr>
<tr>
<td><code>GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></td>
<td>用法同上，不同的是这个命令指定的是某个位置元素，而不是经纬度</td>
</tr>
<tr>
<td><code>GEOHASH key member [member ...]</code></td>
<td>返回一个元素位置经纬度的11个字符Geohash字符串，这会丢失一些精度。但精简了表达方式</td>
</tr>
</tbody></table>
<p>可以使用<span class="exturl" data-url="aHR0cDovL3d3dy5qc29ucy5jbi9sbmdjb2RlLw==">城市经纬度查询<i class="fa fa-external-link-alt"></i></span>来获取数据，实际使用时有工具类可以导入数据</p>
<p>由于geospatial是使用zset实现的，所以<code>ZREM key member [member ...]</code>可以移除指定的geospatial元素，同理其它zset命令也可以使用</p>
<h3 id="2、HyperLogLog"><a href="#2、HyperLogLog" class="headerlink" title="2、HyperLogLog"></a>2、HyperLogLog</h3><p>基数统计（基数，简单理解就是不重复的元素）：</p>
<blockquote>
<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。它是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。<br>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。<br>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
</blockquote>
<p>此类型的命令就三个：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>PFADD key element [element ...]</code></td>
<td>将任意数量的元素添加到指定的 HyperLogLog 里面</td>
</tr>
<tr>
<td><code>PFCOUNT key [key ...]</code></td>
<td>当命令作用于单个键时， 返回储存在给定键的 HyperLogLog 的近似基数， 如果键不存在， 返回 0 。<br/>当命令作用于多个键时， 返回所有给定 HyperLogLog 的并集的近似基数， 这个近似基数是通过将所有给定 HyperLogLog 合并至一个临时 HyperLogLog 来计算得出的。<br />命令返回的可见集合（observed set）基数并不是精确值， 而是一个带有 0.81% 标准错误（standard error）率的近似值。</td>
</tr>
<tr>
<td><code>PFMERGE destkey sourcekey [sourcekey ...]</code></td>
<td>将多个HyperLogLog合并为一个HyperLogLog，合并后的HyperLogLog储存在destkey键中，它的基数元素趋近于所有HyperLogLog的集合的并集</td>
</tr>
</tbody></table>
<h4 id="小插曲：命令中的前缀PF是啥？"><a href="#小插曲：命令中的前缀PF是啥？" class="headerlink" title="小插曲：命令中的前缀PF是啥？"></a>小插曲：命令中的前缀PF是啥？</h4><p>PF是Redis为了纪念HyperLogLog这种算法的提出者Philippe Flajolet而命名的。Philippe Flajolet是法国的计算机科学家，有一本著名的书籍《算法分析导论》作者之一就是他</p>
<p><img src="20200720135756192.png" alt="img"></p>
<h3 id="3、Bitmap"><a href="#3、Bitmap" class="headerlink" title="3、Bitmap"></a>3、Bitmap</h3><p>此Bitmaps非彼Bitmaps，不是BMP位图图像。</p>
<blockquote>
<p>Redis的Bitmaps实际上不是数据类型，而是在字符串类型上定义的一组面向位的操作。由于字符串是二进制安全的数据，其最大长度为512MB，因此它们可以设置为2^32个不同的位（0或1）。</p>
<p>位操作分为两种：恒定时间的单位操作，例如将位设置为1或0，或者获取其值，以及对位组的操作，例如在给定的位范围内计算设定位的数量（例如，人口统计）。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>SETBIT key offset value</code></td>
<td>对 key 所储存的值，设置或清除指定偏移量上的位(bit)。value只能是0或1<br />offset必须大于或等于0`，小于 2^32 (bit 映射被限制在 512 MB 之内)。</td>
</tr>
<tr>
<td><code>GETBIT key offset</code></td>
<td>对 key 所储存的值，获取指定偏移量上的位(bit)。当 offset 比字符串值的长度大，或者 key 不存在时，返回 0</td>
</tr>
<tr>
<td><code>BITCOUNT key [start] [end]</code></td>
<td>计算指定key中，被设置为1的位数量。可选使用start和end来指定位置范围，可以使用负数表示从尾部倒数</td>
</tr>
</tbody></table>
<hr>
<h2 id="六、事务与乐观锁"><a href="#六、事务与乐观锁" class="headerlink" title="六、事务与乐观锁"></a>六、事务与乐观锁</h2><p>数据库事务的四大原则：<strong>ACID（原子性、一致性、隔离性、持久性）</strong>。而Redis中的事务有些不一样，原子性不是完全的；在Redis执行持久化前，数据在内存中，持久性也不是完全的</p>
<h3 id="1、Redis事务"><a href="#1、Redis事务" class="headerlink" title="1、Redis事务"></a>1、Redis事务</h3><p>Redis中的事务可以一次执行多个命令，并且有以下重要的保证：</p>
<ul>
<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。</li>
<li>事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>事务中任意命令执行失败，其余的命令依然被执行。</li>
</ul>
<blockquote>
<p>需要注意的是，即使一个命令失败，队列中的所有其他命令都会被处理——Redis不会停止对命令的处理。</p>
</blockquote>
<p>也就是说，<strong>Redis命令的执行是原子性的</strong>，但Redis没有在事务上增加任何维持原子性的机制，所以<strong>Redis事务的执行并不是原子性的</strong></p>
<h3 id="2、使用事务"><a href="#2、使用事务" class="headerlink" title="2、使用事务"></a>2、使用事务</h3><p><code>MULTI</code>命令开启事务，之后输入的命令将按顺序进入队列（此时并没有执行），运行<code>EXEC</code>按队列里的命令顺序依次执行，使用<code>DISCARD</code>放弃事务，事务队列会被清空， 并且客户端会从事务状态中退出。</p>
<p><img src="image-20200725160057692.png" alt="image-20200725160057692"></p>
<h3 id="3、事务中的错误"><a href="#3、事务中的错误" class="headerlink" title="3、事务中的错误"></a>3、事务中的错误</h3><p>使用事务时可能会遇上以下两种错误：</p>
<ul>
<li>事务在执行<code>EXEC</code>之前，入队的命令可能会出错。（类似代码编译错误）</li>
<li>命令可能在执行<code>EXEC</code>之后失败。（类似程序运行错误）</li>
</ul>
<p>前者在执行<code>EXEC</code>后，事务被放弃，所有命令都不会执行，而后者，只有错误的命令会报错，其它依旧执行</p>
<p><img src="image-20200725160957913.png" alt="image-20200725160957913"></p>
<h3 id="4、乐观锁"><a href="#4、乐观锁" class="headerlink" title="4、乐观锁"></a>4、乐观锁</h3><p>从 2.2 版本开始，Redis 可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作。简单解释就是，事务开启前监视数据，如果在事务执行时发现这个值相比于监视时有所变化，那这个事务就不会执行。</p>
<p>命令：</p>
<p><code>WATCH key [key ...]</code>：监视一个或多个 key ，如果在事务执行之前被监视的 key 被改动，那么事务将被打断</p>
<p><code>UNWATCH</code>：取消所有key的监视（不能单独取消某个key）。如果执行EXEC或者DISCARD， 则不需要手动执行UNWATCH</p>
<p>演示此功能需要开启至少两个Redis客户端，<code>EXEC</code>执行后返回的nil即表示事务已经失效</p>
<p><img src="image-20200725173710016.png" alt="image-20200725173710016"></p>
<p>不管事务是否成功执行， 执行EXEC或者DISCARD后对所有键的监视都会被取消，当客户端断开连接时， 该客户端对键的监视也会被取消</p>
<h2 id="七、在Java中使用Redis"><a href="#七、在Java中使用Redis" class="headerlink" title="七、在Java中使用Redis"></a>七、在Java中使用Redis</h2><h3 id="1、Jedis"><a href="#1、Jedis" class="headerlink" title="1、Jedis"></a>1、Jedis</h3><p>Jedis是Redis官方推荐的 Java 客户端开发包，通过它，我们可以在java中使用Redis</p>
<p>创建一个普通的maven项目，然后引入Jedis的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>new一个Jedis对象，传入host和端口参数（无参也可以，默认是localhost:6379）。然后就可以通过这个对象使用Redis了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJedis</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">		System.out.println(jedis.ping());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回PONG表示已连通。其它所有命令和之前使用redis-cli.exe时完全相同，只是在java里变成了方法而已，这里就不再详解了</p>
<p>使用事务可以像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">Transaction tx = jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    tx.set(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line">    tx.set(<span class="string">"k2"</span>, <span class="string">"v2"</span>);</span><br><span class="line">    tx.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    tx.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、整合Springboot"><a href="#2、整合Springboot" class="headerlink" title="2、整合Springboot"></a>2、整合Springboot</h3><blockquote>
<p>Spring Data Redis是更大的Spring Data家族的一部分，它提供了从Spring应用程序对Redis的简单配置和访问。它为与储存的交互提供了低层次和高层次的抽象支持，从而将使用者从基础设施问题中解放出来。</p>
</blockquote>
<h4 id="2-1-创建项目-amp-导入依赖"><a href="#2-1-创建项目-amp-导入依赖" class="headerlink" title="2.1 创建项目&amp;导入依赖"></a>2.1 创建项目&amp;导入依赖</h4><p>在IDEA中使用Spring Initializr创建springboot项目，勾选需要的依赖，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动器：redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发工具：热部署、lombok、测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过查询依赖图可以看到，springboot使用的redis客户端并不是上面用到的Jedis，而是lettuce</p>
<p><img src="image-20200726211502989.png" alt="image-20200726211502989"></p>
<p>在 Spring Boot 1.x 版本时默认使用的是 jedis ，而在 Spring Boot 2.x 版本默认使用的则是Lettuce了</p>
<h4 id="2-2-Lettuce"><a href="#2-2-Lettuce" class="headerlink" title="2.2 Lettuce"></a>2.2 Lettuce</h4><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZXR0dWNlLmlvLw==">Lettuce<i class="fa fa-external-link-alt"></i></span>是一个可伸缩线程安全的Redis客户端。多个线程可以共享同一个RedisConnection。它利用优秀netty NIO框架来高效地管理多个连接。<br>Netty是一个提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p>
</blockquote>
<p>它和Jedis的区别在于：</p>
<ol>
<li>Jedis是直连模式，每个线程都去拿自己的Jedis实例，在多个线程间共享一个Jedis实例时是线程不安全的，除非使用连接池。而且当连接数量增多时，资源消耗也会增大，连接成本就很高了。</li>
<li>Lettuce的连接是基于Netty的，连接实例可以在多个线程间共享。也就是说一个多线程的应用可以使用同一个连接实例，而不用担心并发线程的数量，是线程安全的。</li>
</ol>
<h4 id="2-3-配置与使用"><a href="#2-3-配置与使用" class="headerlink" title="2.3 配置与使用"></a>2.3 配置与使用</h4><p>直接在application文件里配置即可。需要注意有关jedis的设置，不引入相关包的话是不会生效的。</p>
<p><img src="image-20200728004343806.png" alt="image-20200728004343806"></p>
<p>此处按照官方<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtcmVkaXM=">Spring Data Redis<i class="fa fa-external-link-alt"></i></span>的说明。使用测试类，注入<code>RedisTemplate</code>对象，通过该对象来处理redis相关的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">		System.out.println(connection.ping());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回PONG，测试成功</p>
<p><img src="image-20200728011020269.png" alt="image-20200728011020269"></p>
<p>通过opsForX()来操作redis相关数据类型</p>
<p><img src="image-20200728012953647.png" alt="image-20200728012953647"></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ValueOperations&lt;String, String&gt; strOps = redisTemplate.opsForValue();</span><br><span class="line">		strOps.set(<span class="string">"hello"</span>, <span class="string">"redis"</span>);</span><br><span class="line">		System.out.println(strOps.get(<span class="string">"hello"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-简析RedisTemplate"><a href="#2-4-简析RedisTemplate" class="headerlink" title="2.4 简析RedisTemplate"></a>2.4 简析RedisTemplate</h4><blockquote>
<p>RedisTemplate为执行各种Redis操作、异常转换和序列化提供高级的抽象支持。</p>
<p>模板实际上是Redis模块的中心类，因为它有丰富的特性集。虽然RedisConnection提供了接受和返回二进制值（字节数组）的低级方法，但模板负责序列化和连接管理，从而使用户不必处理这些细节。</p>
</blockquote>
<p>通过自动注入的对象，找到<code>RedisAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; LettuceConnectionConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">JedisConnectionConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">		RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">		StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类做了几件事：</p>
<ul>
<li>启用条件：<code>RedisOperations</code>接口类存在时（RedisTemplate和StringRedisTemplate实现了此接口）</li>
<li>开启Redis配置</li>
<li>导入Lettuce和Jedis连接配置（Jedis连接配置的启用条件是当Jedis类存在时）</li>
<li>创建了两个bean，即上述<code>RedisOperations</code>接口的两个实现类</li>
<li>设置了这两个bean的<code>redisConnectionFactory</code></li>
</ul>
<h4 id="2-5-序列化"><a href="#2-5-序列化" class="headerlink" title="2.5 序列化"></a>2.5 序列化</h4><blockquote>
<p>从框架的角度来看，Redis中存储的数据只有字节。虽然Redis本身支持各种类型，但在大多数情况下，这些类型指的是数据的存储方式，而不是数据所代表的内容。由用户决定是否将信息转换为字符串或任何其他对象。</p>
</blockquote>
<p>思考一个问题，如果在redis里直接储存对象，会发生什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">"user"</span>, user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">"user"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接报错，提示说没有序列化</p>
<p><img src="image-20200728225129341.png" alt="image-20200728225129341"></p>
<p>所以在实体类上<code>implements Serializable</code>实现序列化接口试试看</p>
<p><img src="image-20200728225401442.png" alt="image-20200728225401442"></p>
<p>运行后如上，RedisTemplate的get有相应的反序列化设置当然没问题，那么在cmd中呢，如下图，变成了被编码后的字符串，显然这不易读，而且也不符合期望</p>
<p><img src="image-20200728225525994.png" alt="image-20200728225525994"></p>
<hr>
<p>在<a href="#2-4-简析RedisTemplate">上面</a>提到的<code>RedisAutoConfiguration</code>类中，继续定位到<code>RedisTemplate</code>，重点看<code>RedisSerializer</code>类型的字段，分别有四个：<code>keySerializer</code>、<code>valueSerializer</code>、<code>hashKeySerializer</code>、<code>hashValueSerializer</code>。</p>
<p>它们均指向了<code>defaultSerializer</code>，而这个默认的序列化，则是<code>JdkSerializationRedisSerializer</code>。通过<code>RedisSerializer</code>接口的实现类发现，它不止jdk序列化一种方式，而是有7种</p>
<p><img src="image-20200728221202260.png" alt="image-20200728221202260"></p>
<p>所以接下来自定义RedisTemplate要做的事就是进行序列化的配置</p>
<h4 id="2-6-自定义RedisTemplate"><a href="#2-6-自定义RedisTemplate" class="headerlink" title="2.6 自定义RedisTemplate"></a>2.6 自定义RedisTemplate</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">		RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置json序列化的规则</span></span><br><span class="line">		ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		<span class="comment">// 要序列化的域，field,get和set,以及修饰符范围，ANY是所有</span></span><br><span class="line">		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">		<span class="comment">// 序列化输入的类型，必须是非final修饰的（例如String, Integer）</span></span><br><span class="line">		om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value和HashValue</span></span><br><span class="line">		Jackson2JsonRedisSerializer&lt;Object&gt; jackSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">// 使用JStringRedisSerializer来序列化和反序列化redis的key和HashKey</span></span><br><span class="line">		StringRedisSerializer stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">		jackSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">		template.setKeySerializer(stringSerializer);</span><br><span class="line">		template.setHashKeySerializer(stringSerializer);</span><br><span class="line">		template.setValueSerializer(jackSerializer);</span><br><span class="line">		template.setHashValueSerializer(jackSerializer);</span><br><span class="line">		template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置如上，代码含义已经写在注释里了，现在直接测试看看</p>
<p><img src="image-20200729000113388.png" alt="image-20200729000113388"></p>
<p>再看cmd，key已经可以正常显示并获取了，<code>\</code>是转义符，类名会按全名保存，中文是被编码为16进制了</p>
<p><img src="image-20200729000222975.png" alt="image-20200729000222975"></p>
<p>解码后数据显示正常，说明序列化成功了</p>
<p><img src="image-20200729000821062.png" alt="image-20200729000821062"></p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>jedis</tag>
        <tag>lettuce</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合shiro</title>
    <url>/springboot/springboot-shiro/</url>
    <content><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p><strong>Apache Shiro</strong>是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业级应用程序。</p>
</blockquote>
<a id="more"></a>

<p><span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcv">官网<i class="fa fa-external-link-alt"></i></span>上有个10 Minute Tutorial（10分钟教程），方便我们快速入门shiro</p>
<p>目前的版本：<img src="https://img.shields.io/maven-central/v/org.apache.shiro/shiro-core.svg" alt="Maven Central" style="max-width:100%;"></p>
<hr>
<h4 id="shiro核心概述"><a href="#shiro核心概述" class="headerlink" title="shiro核心概述"></a>shiro核心概述</h4><p>在最高的概念层次上，Shiro的架构有三个主要概念：<strong>Subject</strong>、<strong>SecurityManager</strong>和<strong>Realms</strong>。下图来自官网。</p>
<p><img src="http://shiro.apache.org/assets/images/ShiroBasicArchitecture.png" alt=""></p>
<ul>
<li><p>Subject（对象主体）：这个主体本质上是当前执行用户的一个特定于安全的“视图”。虽然“用户”一词通常意味着一个人，但主体可以是一个人，但它也可以表示第三方服务、守护进程帐户、定时任务或任何类似的东西——基本上是当前与软件交互的任何东西。</p>
<p>  主体实例都要（并且必须）绑定到SecurityManager。当您与主体交互时，这些交互将转换为与SecurityManager的特定主体交互</p>
</li>
<li><p>SecurityManager（安全管理器）：SecurityManager是Shiro体系结构的核心，它充当一种“保护伞”对象，协调其内部安全组件，这些组件共同构成一个对象图。但是，一旦为应用程序配置了SecurityManager及其内部对象图，它通常就不受影响了，应用程序开发人员几乎把所有的时间都花在了Subject API上。</p>
</li>
<li><p>Realms（领域）：Realms充当Shiro和应用程序安全数据之间的“桥梁”或“连接器”。当需要与安全相关数据（如用户帐户）进行实际交互以执行身份验证（登录）和授权（访问控制）时，Shiro会从为应用程序配置的一个或多个Realm中查找其中的许多内容。</p>
</li>
</ul>
<h3 id="二、项目搭建"><a href="#二、项目搭建" class="headerlink" title="二、项目搭建"></a>二、项目搭建</h3><p>新建一个基于springboot的web项目，依赖如下，可选添加spring-boot-devtools开启热部署方便调试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>准备几个简单的html页面</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/update&#125;"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>/user/add.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>/user/update.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		用户名：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		密码：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用控制器给这些页面做个跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"user/add"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"user/update"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上基本环境就搭建完成了，下面开始shiro的配置</p>
<h3 id="三、配置shiro（原生方式）"><a href="#三、配置shiro（原生方式）" class="headerlink" title="三、配置shiro（原生方式）"></a>三、配置shiro（原生方式）</h3><h4 id="1、访问拦截"><a href="#1、访问拦截" class="headerlink" title="1、访问拦截"></a>1、访问拦截</h4><p>按照上面那个核心概念图，自定义一个Realm类，继承<code>AuthorizingRealm</code>类并重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"===授权==="</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是shiro的主要配置了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyRealm <span class="title">myRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span>(<span class="string">"webSecurityManager"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(@Qualifier(<span class="string">"myRealm"</span>)</span> MyRealm myRealm)</span>&#123;</span><br><span class="line">		DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">		securityManager.setRealm(myRealm);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> securityManager;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			@Qualifier(<span class="string">"webSecurityManager"</span>)</span> DefaultWebSecurityManager webSecurityManager)</span>&#123;</span><br><span class="line">		ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">		factoryBean.setSecurityManager(webSecurityManager);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">"/user/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">		factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">		factoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> factoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是比较传统的方法，类似于在spring程序里用xml配置bean，springboot中通过注解写成了配置类，基本步骤如下：</p>
<ol>
<li>首先需要提供Realm实例</li>
<li>然后配置SecurityManager，把Realm实例配置给SecurityManager，在这里的SecurityManager是<code>DefaultWebSecurityManager</code></li>
<li>最后配置<code>ShiroFilterFactoryBean</code>，将SecurityManager配置给<code>ShiroFilterFactoryBean</code>，然后在<code>ShiroFilterFactoryBean</code>中指定路径拦截规则（使用有序的map对象）</li>
<li>可以使用<code>setLoginUrl()</code>指定登录路径</li>
</ol>
<h5 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h5><p>在上面的路径拦截规则中，map的key代表路径（可以使用通配符），value代表拦截规则，可以用<code>DefaultFilter.authc.toString()</code>来表示value，<code>DefaultFilter</code>这个枚举类列出了可以使用的拦截规则名简写及对应的类：</p>
<p>用于身份验证的：</p>
<ul>
<li>anon：允许立即访问路径而不执行任何类型的安全检查的替换器。</li>
<li>authc：需要对请求用户进行身份验证才能继续请求，如果没有，则通过将用户重定向到您配置的登录路径来强制用户去登录。</li>
<li>authcBasic：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP基本协议的质询登录。成功登录后，允许他们继续访问请求的资源或url。</li>
<li>authcBearer：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP承载协议的质询登录。成功登录后，允许他们继续访问请求的资源/url。</li>
<li>logout：一个简单的过滤器，在收到请求时，它将立即注销当前正在执行的subject，然后将它们重定向到配置的URL。</li>
<li>user：允许访问者是已知用户（定义为具有已知主体）时访问资源的过滤器。</li>
</ul>
<p>用于授权的：</p>
<ul>
<li>perms：如果当前用户具有映射值指定的权限，则允许访问的替换器；如果用户没有指定的所有权限，则拒绝访问。</li>
<li>port：要求请求位于特定端口上的替换器，如果不是，则重定向到该端口上的同一URL。</li>
<li>rest：将HTTP请求的方法（如GET、POST等）转换为相应操作的过滤器。</li>
<li>roles：如果当前用户具有由映射值指定的角色，则允许访问的替换器；如果用户没有指定的角色，则拒绝访问。</li>
<li>ssl：要求请求通过SSL的过滤器。</li>
</ul>
<p>用于session：</p>
<ul>
<li>noSessionCreation：将在请求期间禁用创建新会话的路径匹配过滤器。</li>
</ul>
<p>通过上面的配置，实现了路径的访问拦截，当没有登录时访问路径会跳转到登录页面，接下来实现登录认证功能</p>
<h4 id="2、用户认证"><a href="#2、用户认证" class="headerlink" title="2、用户认证"></a>2、用户认证</h4><p>补充登录页的表单属性，msg用来显示返回的错误提示信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器里增加相应的处理，此处参考官方教程的10分钟快速入门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(String username, String password, Model model)</span></span>&#123;</span><br><span class="line">	Subject subject = SecurityUtils.getSubject();</span><br><span class="line">	UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		subject.login(token);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">		<span class="comment">// uae.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">		<span class="comment">// ice.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后修改MyRealm类的<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">	String username = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username,<span class="string">"123456"</span>,getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回值类型是<code>AuthenticationInfo</code>接口，需要找到它的实现类，所以使用<code>SimpleAuthenticationInfo</code>类，其中的参数依次是</p>
<ul>
<li>principal–与指定realm关联的“primary”主体</li>
<li>credentials–验证给定主体的凭证</li>
<li>realmName–从主体和凭据中获取realm名字</li>
</ul>
<p>这里简单处理一下，用户名可以直接对比，而密码必须交给shiro去验证</p>
<h3 id="四、整合mybatis"><a href="#四、整合mybatis" class="headerlink" title="四、整合mybatis"></a>四、整合mybatis</h3><p>经过上面的配置后，shiro的权限验证就基本完成了，下面使用mybatis接入数据</p>
<p>首先准备一个user表</p>
<p><img src="image-20200629171705485.png" alt="image-20200629171705485"></p>
<p>然后使用<span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzgzMjEtZnJlZS1teWJhdGlzLXBsdWdpbg==">Free MyBatis plugin<i class="fa fa-external-link-alt"></i></span>插件生成对应的实体类、DAO接口、xml文件</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启mapper接口扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.dao"</span>)</span><br></pre></td></tr></table></figure>

<p>配置数据源与mybatis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///mybatis?useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>mapper接口增加一个<code>User selectByName(String username)</code>方法，同时在xml文件增加对应配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">  from user</span><br><span class="line">  where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改一下<code>MyRealm</code>类<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">	String username = (String) token.getPrincipal();</span><br><span class="line">	User user = userDao.selectByName(username);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里省略了业务层，直接注入DAO。现在可以用数据库里用户名和对应的密码来登录了</p>
<h3 id="五、授权"><a href="#五、授权" class="headerlink" title="五、授权"></a>五、授权</h3><h4 id="1、了解shiro中的权限（Permission）"><a href="#1、了解shiro中的权限（Permission）" class="headerlink" title="1、了解shiro中的权限（Permission）"></a>1、了解shiro中的权限（Permission）</h4><p><span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcvcGVybWlzc2lvbnMuaHRtbA==">官网原文<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>shiro将权限或操作定义为显式操作的语句。它只是对应用程序中原始功能的陈述。权限是安全策略中最底层的构造，它们只显式定义应用程序可以做什么。它们并没有描述“谁”能够执行这些操作。</p>
<p>定义允许“谁”（用户）做“什么”（权限）是以某种方式向用户分配权限的练习。这通常是由应用程序的数据模型完成的，并且在不同的应用程序中可能会有很大的差异。</p>
<p>例如，权限可以分组到一个角色中，并且该角色可以与一个或多个用户对象相关联。或者某些应用程序可以有一组用户，并且可以为一个组分配一个角色，这通过传递关联意味着该组中的所有用户都被隐式地授予该角色中的权限。</p>
<p>对于如何向用户授予权限有许多变体—应用程序根据应用程序需求确定如何对此进行建模。</p>
</blockquote>
<p>简单来说，类似于下图，把权限分配给角色，用户再拥有这个角色。</p>
<p><img src="be869e847a0c40c781e05ebb917db317.png" alt="img"></p>
<h4 id="2、数据准备"><a href="#2、数据准备" class="headerlink" title="2、数据准备"></a>2、数据准备</h4><p>在数据表中增加一列字段<code>perms</code></p>
<p><img src="image-20200630160528819.png" alt="image-20200630160528819"></p>
<p>同时在实体类、xml文件中增加相应的处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String perms;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"perms"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"perms"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、未授权跳转"><a href="#3、未授权跳转" class="headerlink" title="3、未授权跳转"></a>3、未授权跳转</h4><p>控制器增加未授权的跳转路径，这里仅返回提示信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/Unauthorized"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unAuthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"未授权禁止访问"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>shiroFilterFactoryBean</code>方法中设置跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">factoryBean.setUnauthorizedUrl(<span class="string">"/Unauthorized"</span>);</span><br></pre></td></tr></table></figure>

<p>同时添加过滤规则，注意顺序，在<code>/user/**</code>规则的前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">"/user/add"</span>, <span class="string">"perms[user:add]"</span>);</span><br><span class="line">map.put(<span class="string">"/user/update"</span>, <span class="string">"perms[user:update]"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4、访问授权"><a href="#4、访问授权" class="headerlink" title="4、访问授权"></a>4、访问授权</h4><p>最后在MyRealm的<code>doGetAuthorizationInfo</code>方法中对授权进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===授权==="</span>);</span><br><span class="line"></span><br><span class="line">	User user = (User) principals.getPrimaryPrincipal();</span><br><span class="line">	SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">	info.addStringPermissions(Arrays.asList(user.getPerms().split(<span class="string">","</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用<code>principals.getPrimaryPrincipal()</code>得到的对象就是在<code>doGetAuthenticationInfo</code>中返回对象的构造方法的第一个参数</p>
<p><code>addStringPermissions</code>需要传入一个字符串的集合，而<code>addStringPermission</code>不需要</p>
<h3 id="六、在thymeleaf中使用shiro标签"><a href="#六、在thymeleaf中使用shiro标签" class="headerlink" title="六、在thymeleaf中使用shiro标签"></a>六、在thymeleaf中使用shiro标签</h3><h4 id="1、增加依赖"><a href="#1、增加依赖" class="headerlink" title="1、增加依赖"></a>1、增加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个依赖是非官方的，但是用来在thymeleaf里使用shiro标签足够了</p>
<h4 id="2、注入“方言”"><a href="#2、注入“方言”" class="headerlink" title="2、注入“方言”"></a>2、注入“方言”</h4><p>在<code>ShiroConfig</code>里增加一个bean，<code>ShiroDialect</code>类是上面那个依赖包里的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、使用标签"><a href="#3、使用标签" class="headerlink" title="3、使用标签"></a>3、使用标签</h4><p>先增加命名空间<code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code>，然后使用相应标签</p>
<p>不添加或填写错误不影响程序运行，但会影响IDE的提示功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">""</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/update&#125;"</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:update"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在启动程序，未登录或无相应权限时不会显示添加用户、修改用户的a标签，登录后不会显示登录的a标签</p>
<h3 id="附：基于starter的快速配置方式"><a href="#附：基于starter的快速配置方式" class="headerlink" title="附：基于starter的快速配置方式"></a>附：基于starter的快速配置方式</h3><p>按照<span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcvc3ByaW5nLWJvb3QuaHRtbA==">官方的整合说明<i class="fa fa-external-link-alt"></i></span>，推荐的配置方式如下</p>
<p>还是使用配置类，这里不需要额外添加<code>securityManager</code>了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Realm <span class="title">realm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line"></span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/add"</span>, <span class="string">"perms[user:add]"</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/update"</span>, <span class="string">"perms[user:update]"</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">		System.out.println(<span class="string">"shiroFilterChainDefinition"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> definition;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>application.properties</code>里增加设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">shiro.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.web.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.loginUrl</span>=<span class="string">/login</span></span><br><span class="line"><span class="meta">shiro.unauthorizedUrl</span>=<span class="string">/Unauthorized</span></span><br><span class="line"><span class="meta">shiro.sessionManager.sessionIdUrlRewritingEnabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">shiro.sessionManager.sessionIdCookieEnabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.successUrl</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>功能依次是：开启shiro启动器配置，开启shiro web配置，设置登录路径，设置未授权跳转路径，是否将sessionId显示在url，是否保存sessionId到cookie，登录成功后的跳转路径</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中的Spring MVC详解</title>
    <url>/springboot/springboot-springmvc/</url>
    <content><![CDATA[<h2 id="一、官方文档介绍"><a href="#一、官方文档介绍" class="headerlink" title="一、官方文档介绍"></a>一、官方文档介绍</h2><p>以下内容引用自<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yw==">官方文档<i class="fa fa-external-link-alt"></i></span>，机翻并进行手动修正，部分内容已省略</p>
<a id="more"></a>

<h3 id="1、Spring-MVC的自动化配置"><a href="#1、Spring-MVC的自动化配置" class="headerlink" title="1、Spring MVC的自动化配置"></a>1、Spring MVC的自动化配置</h3><p>Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。自动配置在Spring默认设置的基础上添加了以下功能：</p>
<ul>
<li>包含<code>contentnegotingviewresolver</code>和<code>beannameviewsolver</code>beans</li>
<li>支持服务静态资源，包括支持Webjars（参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy1zdGF0aWMtY29udGVudA==">链接<i class="fa fa-external-link-alt"></i></span>）</li>
<li>自动注册<code>Converter</code>，<code>GenericConverter</code>和<code>Formatter</code>beans</li>
<li>支持<code>HttpMessageConverters</code>（参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy1tZXNzYWdlLWNvbnZlcnRlcnM=">链接<i class="fa fa-external-link-alt"></i></span>）</li>
<li>自动注册<code>MessageCodesResolver</code>（参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW1lc3NhZ2UtY29kZXM=">链接<i class="fa fa-external-link-alt"></i></span>）</li>
<li>支持静态的<code>index.html</code></li>
<li>支持自定义<code>Favicon</code>（参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy1mYXZpY29u">链接<i class="fa fa-external-link-alt"></i></span>）</li>
<li>自动使用一个<code>ConfigurableWebBindingInitializer</code>bean（参考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMi43LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2Jvb3QtZmVhdHVyZXMtc3ByaW5nLW12Yy13ZWItYmluZGluZy1pbml0aWFsaXplcg==">链接<i class="fa fa-external-link-alt"></i></span>）</li>
</ul>
<p>如果您想保留这些Spring Boot MVC的自定义配置并进行更多的<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjIuNi5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yw==">MVC自定义<i class="fa fa-external-link-alt"></i></span>（拦截器、格式化程序、视图控制器和其他功能），可以在自己的类上添加<code>@Configuration</code>注解，（继承）类型为<code>WebMvcConfigurer</code>，但不要添加<code>@EnableWebMvc</code>注解。</p>
<p>如果你想提供<code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code>或<code>ExceptionHandlerExceptionResolver</code>的自定义实例，并且仍然保留Spring Boot MVC的自定义配置，则可以声明<code>WebMVCregistration</code>类型的bean，并使用它来提供这些组件的自定义实例。</p>
<p>如果您想完全控制Spring MVC，可以在自己的类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解，或者添加你自己的<code>@Configuration</code>注释<code>DelegatingWebMvcConfiguration</code>配置，如<code>@EnableWebMvc</code>的Javadoc所述。</p>
<h3 id="2、静态内容"><a href="#2、静态内容" class="headerlink" title="2、静态内容"></a>2、静态内容</h3><p>默认情况下，Spring Boot从类路径中名为<code>/static</code>（或<code>/public</code>或<code>/resources</code>或<code>/META-INF/resources</code>）的目录或<code>ServletContext</code>的根目录中提供静态内容。它使用来自Spring MVC的<code>ResourceHttpRequestHandler</code>，这样您就可以通过添加自己的<code>WebMvcConfigurer</code>和重写<code>addResourceHandlers</code>方法来修改该行为。</p>
<p>在一个独立的web应用程序中，容器中的默认servlet也被启用，并回调其行为，如果Spring决定不处理它，则从<code>ServletContext</code>的根目录提供内容。大多数情况下，这种情况不会发生（除非修改默认的MVC配置），因为Spring总是可以通过<code>DispatcherServlet</code>处理请求。</p>
<p>默认情况下，资源被映射在<code>/**</code>路径，但是你可以使用<code>spring.mvc.static-path-pattern</code>属性对其进行调整。例如，可以将所有资源重新定位到<code>/resources/**</code>中，如下所示：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/resources/**</span></span><br></pre></td></tr></table></figure>

<p>你还可以使用<code>spring.resources.static-locations</code>属性（用目录位置列表替换默认值）自定义静态资源位置。根Servlet上下文路径<code>“/”</code>也会被自动添加为一个位置。</p>
<p>除了前面提到的“标准”静态资源位置之外，还有一个特殊情况：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2ViamFycy5vcmcv">Webjars content<i class="fa fa-external-link-alt"></i></span>。如果jar文件是以Webjars格式打包的，那么路径为<code>/webjars/**</code>的任何资源都可以从jar文件中获得。</p>
<blockquote>
<p>如果应用程序打包为jar，请不要使用src/main/webapp目录。尽管这个目录是一个通用的标准，但它只适用于war包，如果生成jar包，大多数构建工具都会默认忽略它。</p>
</blockquote>
<h3 id="3、欢迎页面（首页）"><a href="#3、欢迎页面（首页）" class="headerlink" title="3、欢迎页面（首页）"></a>3、欢迎页面（首页）</h3><p>Spring Boot支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找<code>index.html</code>文件。如果找不到索引模板，它将查找<code>index</code>模板。如果找到任何一个，它将自动用作应用程序的欢迎页。</p>
<h3 id="4、自定义Favicon（收藏夹图标）"><a href="#4、自定义Favicon（收藏夹图标）" class="headerlink" title="4、自定义Favicon（收藏夹图标）"></a>4、自定义Favicon（收藏夹图标）</h3><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找<code>favicon.ico</code>。如果存在这样的文件，它将自动用作应用程序的favicon。</p>
<h3 id="5、错误处理"><a href="#5、错误处理" class="headerlink" title="5、错误处理"></a>5、错误处理</h3><p>默认情况下，Spring Boot提供了一个<code>/error</code>映射，它以合理的方式处理所有错误，并在servlet容器中将其注册为“全局”错误页。对于计算机客户端，它生成一个JSON响应，其中包含导致错误的详细信息、HTTP状态码和异常消息。对于浏览器客户端，有一个“whitelabel”错误视图，它以HTML格式呈现相同的数据（要自定义它，请添加一个解析到<code>error</code>的<code>View</code>）。要完全替换默认行为，可以实现<code>ErrorController</code>并注册该类型的bean定义，或者添加<code>ErrorAttributes</code>类型的bean以使用现有机制，但替换内容。</p>
<blockquote>
<p><code>BasicErrorController</code>可以用作自定义<code>ErrorController</code>的基类。如果要为新内容类型添加处理程序（默认情况下是专门处理text/html并为其他所有内容提供回调），这一点特别有用。为此，扩展<code>BasicErrorController</code>，添加一个带有<code>produces</code>属性和<code>@RequestMapping</code>注解的公共方法，并创建一个新类型的bean。</p>
</blockquote>
<h4 id="5-1-自定义错误页"><a href="#5-1-自定义错误页" class="headerlink" title="5.1 自定义错误页"></a>5.1 自定义错误页</h4><p>如果要显示给定状态代码的自定义HTML错误页，可以将文件添加到<code>/error</code>文件夹。错误页可以是静态HTML（即添加到任何static资源文件夹下）或使用模板生成。文件名应为确切的状态代码或序列掩码。</p>
<p>例如，要将404映射到静态HTML文件，文件夹结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;</span><br><span class="line"> +- main&#x2F;</span><br><span class="line">     +- java&#x2F;</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources&#x2F;</span><br><span class="line">         +- public&#x2F;</span><br><span class="line">             +- error&#x2F;</span><br><span class="line">             |   +- 404.html</span><br><span class="line">             +- &lt;other public assets&gt;</span><br></pre></td></tr></table></figure>

<p>如果使用FreeMarker模板映射所有<code>5xx</code>错误，你的文件夹结构会像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;</span><br><span class="line"> +- main&#x2F;</span><br><span class="line">     +- java&#x2F;</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources&#x2F;</span><br><span class="line">         +- templates&#x2F;</span><br><span class="line">             +- error&#x2F;</span><br><span class="line">             |   +- 5xx.ftlh</span><br><span class="line">             +- &lt;other templates&gt;</span><br></pre></td></tr></table></figure>

<p>对于更复杂的映射，还可以添加实现<code>ErrorViewResolver</code>接口的bean，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可选择使用request或者status并返回一个ModelAndView对象</span></span><br><span class="line">        <span class="keyword">return</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您还可以使用常规的Spring MVC特性，比如<code>@ExceptionHandler</code>方法和<code>@ControllerAdvice</code>。然后，<code>ErrorController</code>将会拾取任何未处理的异常。</p>
<h3 id="6、CORS（跨域资源共享）支持"><a href="#6、CORS（跨域资源共享）支持" class="headerlink" title="6、CORS（跨域资源共享）支持"></a>6、CORS（跨域资源共享）支持</h3><p>Cross-origin resource sharing（CORS）是大多数浏览器实现的W3C规范，它允许您以灵活的方式指定哪些类型的跨域请求被授权，而不是使用一些不太安全和不太强大的方法，如IFRAME或JSONP。</p>
<p>从（spring）版本4.2开始，SpringMVC支持CORS。在Spring Boot应用程序中使用带有<code>@CrossOrigin</code>注解的控制器方法CORS配置不需要任何特定的配置。全局CORS配置可以通过使用自定义的<code>addCorsMappings(CorsRegistry)</code>方法注册<code>WebMvcConfigurer</code>bean来定义，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/api/**"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、源码查阅、分析"><a href="#二、源码查阅、分析" class="headerlink" title="二、源码查阅、分析"></a>二、源码查阅、分析</h2><p>首先找到关于SpringBoot对SpringMVC进行自动配置的类的全路径：</p>
<blockquote>
<p><code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.java</code></p>
</blockquote>
<h3 id="1、类注解"><a href="#1、类注解" class="headerlink" title="1、类注解"></a>1、类注解</h3><p>这个类上的注解说明了它具有如下特性：</p>
<ul>
<li><p>这是一个不会代理bean方法的spring配置类</p>
</li>
<li><p>满足以下条件时，这个自动配置类才会生效</p>
<ul>
<li>匹配到这是一个基于servlet的web应用程序</li>
<li>在类路径中存在<code>Servlet</code>、<code>DispatcherServlet</code>以及<code>WebMvcConfigurer</code>类</li>
<li>不存在使用<code>WebMvcConfigurationSupport</code>类的bean</li>
</ul>
</li>
<li><p>自动配置的序号为<code>Ordered.HIGHEST_PRECEDENCE + 10</code>（HIGHEST_PRECEDENC的值为-2147483648）</p>
</li>
<li><p>在<code>DispatcherServletAutoConfiguration</code>类、<code>TaskExecutionAutoConfiguration</code>类和<code>ValidationAutoConfiguration</code>类之后应用自动配置</p>
</li>
</ul>
<h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><p>自动配置类没有提供构造方法，而是使用了一个继承<code>WebMvcConfigurer</code>的静态内部类作适配器，原因在注释上已经说明了：</p>
<blockquote>
<p>定义为嵌套配置以确保当其不在类路径上时不读取WebMVCConfiguer</p>
</blockquote>
<p>所以这里的构造方法是<code>WebMvcAutoConfigurationAdapter</code>的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">		ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">		ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">	<span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">	<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">	<span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">	<span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-静态资源"><a href="#2-1-静态资源" class="headerlink" title="2.1 静态资源"></a>2.1 静态资源</h4><p>需要关注的属性是<code>resourceProperties</code>，定位到<code>ResourceProperties</code>类，发现如下静态字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">		<span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>和文档说明一致，表示静态资源从这些路径里查找。然后再定位到<code>addResourceHandlers</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">	CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">				.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">	String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">				.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，第一个if判断属性<code>spring.resources.add-mappings</code>需要为true，资源处理器才生效，当然这是默认值；第二个if则是文档中说明的webjars了；第三个if判断是否有静态路径参数，定位过去发现默认值是<code>/**</code>，后面的链式调用功能依次是：</p>
<ul>
<li>添加路径处理器（<strong>这个路径指链接上的路径，不是静态资源的本地路径</strong>）</li>
<li>添加资源位置（本地路径，相对于项目文件）</li>
<li>设置缓存时效</li>
<li>设置缓存控制</li>
</ul>
<h4 id="2-2-首页"><a href="#2-2-首页" class="headerlink" title="2.2 首页"></a>2.2 首页</h4><p>找到下一个静态内部类<code>EnableWebMvcConfiguration</code>，关注如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">	WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">			<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">			<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">	welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">	<span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">	<span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码逻辑说明了是以所有的静态资源根路径下去找到的第一个<code>index.html</code>文件作为首页。然后定位到<code>WelcomePageHandlerMapping</code>类，构造方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">	<span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">"/**"</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">		logger.info(<span class="string">"Adding welcome page: "</span> + welcomePage.get());</span><br><span class="line">		setRootViewName(<span class="string">"forward:index.html"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">		logger.info(<span class="string">"Adding welcome page template: index"</span>);</span><br><span class="line">		setRootViewName(<span class="string">"index"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先在静态资源路径参数里有<code>/**</code>然后转发到index.html文件，否则就去模版引擎里去找有没有映射到<code>index</code>路径的</p>
<h2 id="三、功能扩展"><a href="#三、功能扩展" class="headerlink" title="三、功能扩展"></a>三、功能扩展</h2><h3 id="1、如何扩展"><a href="#1、如何扩展" class="headerlink" title="1、如何扩展"></a>1、如何扩展</h3><p>要想扩展Spring MVC的功能，就如官方文档所说明的那样，新建一个类，继承<code>WebMvcConfigurer</code>类，并添加<code>@Configuration</code>注解，但不要加<code>@EnableWebMvc</code>注解（后续说明原因）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 选择需要实现的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200513222232969.png" alt="image-20200513222232969"></p>
<p>可以看到能实现的方法还是比较多的，比较重要的方法：</p>
<ul>
<li><code>addViewControllers</code>添加视图控制器</li>
<li><code>addInterceptors</code>添加拦截器</li>
<li><code>addResourceHandlers</code>添加资源处理器</li>
<li><code>addCorsMappings</code>添加跨域资源访问映射</li>
</ul>
<h3 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h3><p>上文说到，扩展功能不能添加<code>@EnableWebMvc</code>注解，那么接下来去源码中分析原因：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个注解其实就是导入了<code>DelegatingWebMvcConfiguration</code>类，这个类继承了<code>WebMvcConfigurationSupport</code>类。此时再回过头去看<code>WebMvcAutoConfiguration</code>类的注解，如果存在<code>WebMvcConfigurationSupport</code>类，那么默认的自动配置类就不会生效。所以仅仅扩展功能是不能添加<code>@EnableWebMvc</code>注解的，如果想完全接管默认的自动配置，那就可以使用<code>@EnableWebMvc</code>注解</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IntelliJ IDEA与maven整合SSM框架</title>
    <url>/java/ssm-integration/</url>
    <content><![CDATA[<p>在上一篇示例中演示了spring与mybatis的整合，在学习了springMVC后，就可以把它们整合在一起搭建成大型项目通用的框架了</p>
<a id="more"></a>

<h2 id="一、构建项目基础"><a href="#一、构建项目基础" class="headerlink" title="一、构建项目基础"></a>一、构建项目基础</h2><h3 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h3><ul>
<li>Windows10 1903</li>
<li>IntelliJ IDEA 2019.3</li>
<li>JDK 8</li>
<li>maven 3.6</li>
</ul>
<h3 id="2、准备数据库、数据表"><a href="#2、准备数据库、数据表" class="headerlink" title="2、准备数据库、数据表"></a>2、准备数据库、数据表</h3><p>这里依旧使用<a href="/mybatis/mybatis-association-query/#1-创建数据表-amp-插入数据">char_info</a>表</p>
<h3 id="3、创建maven-webapp项目"><a href="#3、创建maven-webapp项目" class="headerlink" title="3、创建maven-webapp项目"></a>3、创建maven-webapp项目</h3><p>新建项目，左边选择maven，勾上Create from archetype，在下面选中maven-archetype-webapp，后面项目名称自己定义。等待maven初始化完成后，右键选择src-新建-目录，如下选中并回车创建maven的几个标准文件夹<br><img src="1840374354.png" alt="img"></p>
<h3 id="4、声明依赖"><a href="#4、声明依赖" class="headerlink" title="4、声明依赖"></a>4、声明依赖</h3><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.ver</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.ver</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mybatis.ver</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">mybatis.ver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring-webmvc所需依赖仅比spring-context多一个spring-web包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以此处无需配置spring-context--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据源与事务--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--SM整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--在tomcat运行库里添加了mysql驱动包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以这里配置scope为provided--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--以下依赖非整合相关，视需求添加--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--aspectj、jsp标签库、日志、json解析库，单元测试--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--servlet-api可以通过在外部库添加tomcat运行库来引入--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有依赖关系如下</p>
<p><img src="4260633758.png" alt="img"></p>
<h3 id="5、使用插件生成mybatis所需类与xml文件"><a href="#5、使用插件生成mybatis所需类与xml文件" class="headerlink" title="5、使用插件生成mybatis所需类与xml文件"></a>5、使用插件生成mybatis所需类与xml文件</h3><p>这里使用的idea插件是<span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzgzMjEtZnJlZS1teWJhdGlzLXBsdWdpbg==">Free MyBatis plugin<i class="fa fa-external-link-alt"></i></span>。在idea配置好数据库连接后，右键char_info表，选择mybatis-generator，然后设置如下</p>
<p><img src="560481680.png" alt="img"></p>
<p>此时会在项目main目录中生成如下文件</p>
<p><img src="1778991020.png" alt="img"></p>
<p>稍加修改：</p>
<ul>
<li>在CharInfo生成<code>toString()</code>方法</li>
<li>在CharInfoDao接口添加<code>List&lt;CharInfo&gt; selectAll()</code>方法</li>
<li>此时上述接口新增方法会显示红线报错，按alt+enter会提示在对应xml文件里生成对应标签，然后补充设置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	select</span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">	from char_info;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、搭建spring环境"><a href="#二、搭建spring环境" class="headerlink" title="二、搭建spring环境"></a>二、搭建spring环境</h2><h3 id="1、业务层"><a href="#1、业务层" class="headerlink" title="1、业务层"></a>1、业务层</h3><p>新建service包，包下新建接口，然后service包下新建impl包，新建接口的实现类，并添加注解，此处没有功能仅打印输出，用于测试spring环境</p>
<p>CharInfoService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CharInfoServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"业务层："</span> + <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、spring配置文件"><a href="#2、spring配置文件" class="headerlink" title="2、spring配置文件"></a>2、spring配置文件</h3><p>在资源文件夹下面新建applicationContext.xml，开启service包的注解扫描即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"service"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写并运行测试类"><a href="#3、编写并运行测试类" class="headerlink" title="3、编写并运行测试类"></a>3、编写并运行测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">springTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoService charInfoService = (CharInfoService) context.getBean(<span class="string">"charInfoServiceImpl"</span>);</span><br><span class="line">		charInfoService.showAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="855991443.png" alt="img"></p>
<p>输出无报错即验证spring环境正常</p>
<h2 id="三、搭建springMVC环境"><a href="#三、搭建springMVC环境" class="headerlink" title="三、搭建springMVC环境"></a>三、搭建springMVC环境</h2><h3 id="1、配置web-xml"><a href="#1、配置web-xml" class="headerlink" title="1、配置web.xml"></a>1、配置web.xml</h3><p>如果不使用contextConfigLocation参数，那么默认会查找[servlet-name]-servlet.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、配置springmvc-xml"><a href="#2、配置springmvc-xml" class="headerlink" title="2、配置springmvc.xml"></a>2、配置springmvc.xml</h3><p>分开配置spring与springmvc，降低耦合度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、配置控制器类"><a href="#3、配置控制器类" class="headerlink" title="3、配置控制器类"></a>3、配置控制器类</h3><p>新建上述配置文件描述所需的controller包，并新建控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/charInfo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/list.jsp"</span>);</span><br><span class="line">		String msg = <span class="string">"表示层："</span> + <span class="keyword">this</span>.getClass().getName();</span><br><span class="line">		mav.addObject(<span class="string">"msg"</span>, msg);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、创建页面list-jsp"><a href="#4、创建页面list-jsp" class="headerlink" title="4、创建页面list.jsp"></a>4、创建页面list.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、运行测试"><a href="#5、运行测试" class="headerlink" title="5、运行测试"></a>5、运行测试</h3><p>添加tomcat运行配置，如果控制台中文乱码，就设置虚拟机选项<code>-Dfile.encoding=utf-8</code>。启动成功后访问<code>http://localhost/charInfo/findAll</code>，显示如下即表示配置无误</p>
<p><img src="2241127279.png" alt="img"></p>
<h2 id="四、配置mybatis并与spring整合"><a href="#四、配置mybatis并与spring整合" class="headerlink" title="四、配置mybatis并与spring整合"></a>四、配置mybatis并与spring整合</h2><p>这里直接在spring配置文件里配置mybatis，不再单独配置</p>
<h3 id="1、applicationContext-xml新增配置"><a href="#1、applicationContext-xml新增配置" class="headerlink" title="1、applicationContext.xml新增配置"></a>1、applicationContext.xml新增配置</h3><p>如果数据表列名与java类属性名一致，可不配置mapUnderscoreToCamelCase</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、持久层注入服务层"><a href="#2、持久层注入服务层" class="headerlink" title="2、持久层注入服务层"></a>2、持久层注入服务层</h3><p>修改CharInfoServiceImpl.java。idea在spring使用字段自动注入时会报警告，表示不建议使用的方法，所以这里改为了构造函数注入，也可以使用setter方式注入，或者使用jdk的@Resource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoDao charInfoDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CharInfoServiceImpl</span><span class="params">(CharInfoDao charInfoDao)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.charInfoDao = charInfoDao;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> charInfoDao.selectAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoService charInfoService = (CharInfoService) context.getBean(<span class="string">"charInfoServiceImpl"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		charInfoList.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1812425610.png" alt="img"></p>
<h2 id="五、整合spring与springMVC"><a href="#五、整合spring与springMVC" class="headerlink" title="五、整合spring与springMVC"></a>五、整合spring与springMVC</h2><h3 id="1、web-xml新增配置"><a href="#1、web-xml新增配置" class="headerlink" title="1、web.xml新增配置"></a>1、web.xml新增配置</h3><p>springMVC本来就是spring自己的东西，所以只需要让web框架识别到spring即可，所以这里仅配置两条：关联spring的配置文件、启动ContextLoaderListener</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、服务层注入表现层（控制器与视图）"><a href="#2、服务层注入表现层（控制器与视图）" class="headerlink" title="2、服务层注入表现层（控制器与视图）"></a>2、服务层注入表现层（控制器与视图）</h3><p>修改CharInfoController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/charInfo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoService charInfoService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CharInfoController</span><span class="params">(CharInfoService charInfoService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.charInfoService = charInfoService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/list.jsp"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		mav.addObject(<span class="string">"list"</span>, charInfoList);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改list.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.star&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.initialCost&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workName&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workId&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、访问网站"><a href="#3、访问网站" class="headerlink" title="3、访问网站"></a>3、访问网站</h3><p>显示如下与数据库一致，即表示SSM框架搭建完成<br><img src="1824091702.png" alt="img"></p>
<h2 id="六、可补充的其它配置"><a href="#六、可补充的其它配置" class="headerlink" title="六、可补充的其它配置"></a>六、可补充的其它配置</h2><h3 id="排除静态资源拦截"><a href="#排除静态资源拦截" class="headerlink" title="排除静态资源拦截"></a>排除静态资源拦截</h3><p>springmvc.xml添加<code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<h3 id="视图解析（定位）"><a href="#视图解析（定位）" class="headerlink" title="视图解析（定位）"></a>视图解析（定位）</h3><p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在WEB-INF目录下创建pages目录，把jsp文件移动进去，修改控制器ModelAndView的构造参数为<code>ModelAndView(&quot;list&quot;)</code>。地址访问方式无变化</p>
<h3 id="编码过滤"><a href="#编码过滤" class="headerlink" title="编码过滤"></a>编码过滤</h3><p>需要处理的地方有三处：</p>
<ul>
<li>Request的get请求<br> 在tomcat的server.xml文件中，Connector标签里新增<code>URlEncoding</code>属性，值为UTF-8（tomcat5.0版本以上不用配置）</li>
<li>Request的post请求</li>
</ul>
<p>在web.xml添加过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查阅源码后看到如下部分得知，底层使用的还是javaEE那套API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String encoding = getEncoding();</span><br><span class="line">	<span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			request.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">			response.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Response</li>
</ul>
<p>上面forceResponseEncoding仅仅是对HTML内容响应进行了编码，这里需要对非HTML，比如json数据，进行编码转换。修改springmvc.xml，将mvc:annotation-driven标签扩展开，然后改动如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置声明式事务"><a href="#配置声明式事务" class="headerlink" title="配置声明式事务"></a>配置声明式事务</h3><p>这个功能是属于业务层的，所以在applicationContext.xml文件里添加设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"show*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"CharInfoServicePointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* service..*(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"CharInfoServicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>部分标签的默认值未书写，tx:method可视情况添加与修改</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli学习笔记</title>
    <url>/vue/vue-cli-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：</strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThFNDExYTdtQw==">【狂神说Java】Vue最新快速上手教程通俗易懂<i class="fa fa-external-link-alt"></i></span>P13-P19</p>
<a id="more"></a>

<hr>
<p>阅读前注意：<code>目前Vue-cli版本已经4.x了，视频中使用的是2.x，区别较大。本文对应视频学习依旧使用2.x版本</code></p>
<h2 id="一、Vue-cli简介"><a href="#一、Vue-cli简介" class="headerlink" title="一、Vue-cli简介"></a>一、Vue-cli简介</h2><p>cli意思是命令行界面（command-line interface）。</p>
<p>vue-cli是一个基于Vue.js进行快速开发的完整系统，是Vue.js开发的标准工具，可以认为它是vue构建项目的脚手架，能够进行组件式开发。</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="1、环境需求"><a href="#1、环境需求" class="headerlink" title="1、环境需求"></a>1、环境需求</h3><p>要使用vue-cli 2.x，需要以下前提条件：</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==">Node.js<i class="fa fa-external-link-alt"></i></span>（版本6.x以上）</p>
</li>
<li><p>npm（版本3以上，Node.js已包含 npm）</p>
<blockquote>
<p>npm全称Node Package Manager，即node包管理器，也是javascript包管理器</p>
</blockquote>
</li>
<li><p>git（非必须）</p>
</li>
</ul>
<p>可以使用安装包(.msi)傻瓜式安装，也可以使用二进制文件（推荐）免安装，解压后将其根目录添加到<code>Path</code>环境变量即可</p>
<h3 id="2、使用淘宝npm镜像"><a href="#2、使用淘宝npm镜像" class="headerlink" title="2、使用淘宝npm镜像"></a>2、使用淘宝npm镜像</h3><p>直接使用npm安装模块会走国外的地址，比较慢，推荐使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvTlBN">淘宝npm镜像<i class="fa fa-external-link-alt"></i></span>，可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步。使用如下命令来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>然后就可以使用cnpm来安装模块了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install 模块名</span><br></pre></td></tr></table></figure>

<h3 id="3、安装vue-cli"><a href="#3、安装vue-cli" class="headerlink" title="3、安装vue-cli"></a>3、安装vue-cli</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">或</span><br><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="4、检测安装"><a href="#4、检测安装" class="headerlink" title="4、检测安装"></a>4、检测安装</h3><p>使用如下命令查看版本号，检测是否安装成功（最后一个V是大写），如果命令无效，请检查环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure>

<h2 id="三、第一个vue-cli程序"><a href="#三、第一个vue-cli程序" class="headerlink" title="三、第一个vue-cli程序"></a>三、第一个vue-cli程序</h2><h3 id="1、部署"><a href="#1、部署" class="headerlink" title="1、部署"></a>1、部署</h3><p>使用<code>vue list</code>或<code>vue-list</code>命令查看可以使用的模版（仅2.x版本），如果命令无效就再安装一下vue-cli</p>
<blockquote>
<p>  Available official templates:</p>
<p>  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.<br>  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.<br>  ★  pwa - PWA template for vue-cli based on the webpack template<br>  ★  simple - The simplest possible Vue setup in a single HTML file<br>  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.<br>  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</p>
</blockquote>
<p>使用<code>vue init &lt;模版名&gt; &lt;项目名&gt;</code>来创建一个vue项目，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue init webpack hello-vue</span><br></pre></td></tr></table></figure>

<p>然后依次提示</p>
<ul>
<li><p>项目名（默认hello-vue，回车即可）</p>
</li>
<li><p>项目描述（默认A Vue.js project，回车即可）</p>
</li>
<li><p>作者名字</p>
</li>
<li><p>构建类型（这里使用方向键选择第一项）</p>
<ul>
<li>运行时+编译：推荐大多数用户使用</li>
<li>仅运行时：约6kb大小，min+gzip压缩，但是模板（或任何特定于Vue的HTML）只允许在.Vue文件中使用-其他地方必须提供函数</li>
</ul>
<p><strong>以下选项均输入N</strong></p>
</li>
<li><p>是否安装vue-router</p>
</li>
<li><p>是否使用ESLint对代码进行初始化</p>
</li>
<li><p>是否安装单元测试</p>
</li>
<li><p>是否安装e2e测试（基于Nightwatch）</p>
</li>
<li><p>项目创建后，是否为您自动运行“npm install”？（推荐）</p>
<ul>
<li>虽然官方推荐，但我们可以选择第三项，自己手动运行<code>npm install</code>命令</li>
</ul>
</li>
</ul>
<p>手动运行<code>npm install</code>，它会根据项目下<code>package.json</code>文件里的依赖安装node_modules，有很大，接近2万个文件，100+MB</p>
<p>上面的操作都可以在Intellij IDEA的终端里完成</p>
<h3 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h3><p>执行<code>npm run dev</code>命令，或者使用IDEA在<code>package.json</code>文件里点击start的小箭头</p>
<p><img src="image-20200619180425383.png" alt="image-20200619180425383"></p>
<p>看到编译成功的提示后，用浏览器访问<code>http://localhost:8080/</code></p>
<p><img src="image-20200619185557904.png" alt="image-20200619185557904"></p>
<h3 id="3、尝试修改"><a href="#3、尝试修改" class="headerlink" title="3、尝试修改"></a>3、尝试修改</h3><p>在src目录下App.vue为主文件，里面分为三部分</p>
<ul>
<li><p>template是视图模板</p>
</li>
<li><p>script是js脚本，使用了ECMAScript的语法</p>
</li>
<li><p>style则是css样式</p>
</li>
</ul>
<p>阅读脚本部分，发现它导入了components目录的HelloWorld.vue文件为组件，将其删减并修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;HelloWorld&#39;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#39;Hello World&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>再次运行<code>npm run dev</code>并访问</p>
<p><img src="image-20200619192139601.png" alt="image-20200619192139601"></p>
<h2 id="四、webpack"><a href="#四、webpack" class="headerlink" title="四、webpack"></a>四、webpack</h2><p>在上面那个项目的build文件夹下可以看到webpack相关的配置文件（仅限vue-cli2.x版本），那么接下来就介绍下</p>
<h3 id="1、什么是-webpack"><a href="#1、什么是-webpack" class="headerlink" title="1、什么是 webpack?"></a>1、什么是 webpack?</h3><p>类似于java的maven，不同的是maven囊括了包管理和打包，而前端则是npm管理包，webpack打包。</p>
<blockquote>
<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS8=">官网<i class="fa fa-external-link-alt"></i></span>横幅十分形象的展示了webpack的作用</p>
<p>![](GIF 2020-6-20 17-03-41.gif)</p>
<h3 id="2、安装webpack"><a href="#2、安装webpack" class="headerlink" title="2、安装webpack"></a>2、安装webpack</h3><p>目前webpack的版本是</p>
<p><a href="https://github.com/webpack/webpack/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="GitHub release"></a></p>
<p>使用npm或者cnpm安装，如果使用 webpack 4版本及以上，还需要安装 CLI。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack</span><br><span class="line">cnpm install -g webpack-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</em></p>
</blockquote>
<p>但是目前学习阶段暂时使用全局安装</p>
<h3 id="3、编码、打包、使用"><a href="#3、编码、打包、使用" class="headerlink" title="3、编码、打包、使用"></a>3、编码、打包、使用</h3><p>项目结构如下</p>
<p><img src="image-20200619230422653.png" alt="image-20200619230422653"></p>
<p>如下依次创建文件并书写代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;hello webpack&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">"./hello"</span>;</span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: <span class="string">"./src/main.js"</span>, <span class="comment">// 配置入口文件</span></span><br><span class="line">	output: &#123;</span><br><span class="line">		filename: <span class="string">"./js/bundle.js"</span> <span class="comment">// 配置导出路径及文件名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后在项目根目录打开终端使用<code>webpack</code>命令打包，完成后会出现一个dist目录，里面就是已经压缩过了打包好的js文件。</p>
<p><strong>如何使用？</strong>写一个html来引用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200619231710027.png" alt="image-20200619231710027"></p>
<h2 id="五、Vue-Router"><a href="#五、Vue-Router" class="headerlink" title="五、Vue Router"></a>五、Vue Router</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><blockquote>
<p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p>
</blockquote>
<p>简单来说就是前端控制页面跳转的一种机制，根据不同的 url 地址展示不同的内容和页面，可以实现局部刷新的效果</p>
<h3 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h3><p>使用<a href="#三、第一个vue-cli程序">第一个vue-cli程序</a>里创建的项目，删除components和assets目录下的文件，App.vue文件中模版仅保留div，脚本仅保留导出名。</p>
<p>在项目根目录使用npm或cnpm命令安装Vue Router</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>

<p>安装完成后，在components目录下新建两个Vue Component文件</p>
<p>Login.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;登录页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Login&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>About.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;关于页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;About&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Vue-Router"><a href="#3、使用Vue-Router" class="headerlink" title="3、使用Vue Router"></a>3、使用Vue Router</h3><p>新建一个router目录，并且新建index.js文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"../components/Login"</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">"../components/About"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'about'</span>,</span><br><span class="line">      path: <span class="string">'/about'</span>,</span><br><span class="line">      component: About</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在main.js里引用router目录并添加到Vue对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>最后在App.vue的模版里使用（此方法为声明式的导航）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/login"</span>&gt;登录&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>about<span class="string">"&gt;关于&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>npm run dev</code>启动程序，访问页面</p>
<p><code>&lt;router-link&gt;</code>实际上被渲染为了a标签，下图是点击前的页面</p>
<p><img src="image-20200620185529340.png" alt="image-20200620185529340"></p>
<p>点击后</p>
<p><img src="image-20200620185716538.png" alt="image-20200620185716538"></p>
<h2 id="六、在vue-cli中使用element-ui"><a href="#六、在vue-cli中使用element-ui" class="headerlink" title="六、在vue-cli中使用element-ui"></a>六、在vue-cli中使用element-ui</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04=">Element-Ul<i class="fa fa-external-link-alt"></i></span>是饿了么前端团队推出的一款基于Vue.js 2.0的桌面端UI框架，一套为开发者、设计师和产品经理准备的基于Vue 2.0的桌面端组件库</p>
</blockquote>
<p>安装（i是instal的简写，S是save的简写）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用npm i安装的模块无法用npm uninstall删除，用npm uninstall i才能卸载掉 </p>
</li>
<li><p>npm i会帮助检测与当前node版本最匹配的npm包版本号，并匹配出来相互依赖的npm包应该提升的版本号 </p>
</li>
<li><p>部分npm包在当前node版本下无法使用，必须使用建议版本 </p>
</li>
<li><p>安装报错时intall肯定会出现npm-debug.log 文件，npm i不一定</p>
</li>
</ul>
<p>依旧使用上面那个项目，在main,js里引入element-ui</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>新建一个view目录，然后目录下新建文件</p>
<p>Login.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref=<span class="string">"loginForm"</span> :model=<span class="string">"form"</span> :rules=<span class="string">"rules"</span> label-width=<span class="string">"80px"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-box"</span>&gt;</span><br><span class="line">      &lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-title"</span>&gt;欢迎登录&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="账号" prop="username"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input type="text" placeholder="请输入账号" v-model="form.username"/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="密码" prop="password"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input type="text" placeholder="请输入密码" v-model="form.password"/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button type="primary" v-on:click="onSubmit('loginForm')"&gt;登录&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog title=<span class="string">"提示"</span> :visible.sync=<span class="string">"dialogVisible"</span> width=<span class="string">"30%"</span>&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span slot="footer" class="dialog-footer"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button type="primary" @click="dialogVisible=false"&gt;确定&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-dialog&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"Login"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: <span class="string">''</span>,</span><br><span class="line">          password: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'账号不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</span><br><span class="line">          password: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        dialogVisible: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$router.push(<span class="string">"/main"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.dialogVisible = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .login-box &#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid #DCDFE6;</span></span><br><span class="line"><span class="regexp">    width: 350px;</span></span><br><span class="line"><span class="regexp">    margin: 100px auto;</span></span><br><span class="line"><span class="regexp">    padding: 35px 35px 15px 35px;</span></span><br><span class="line"><span class="regexp">    border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    -Webkit-border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    -moz-border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    box-shadow: 0 0 25px #909399;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .login-title &#123;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    margin: 0 auto 48px auto;</span></span><br><span class="line"><span class="regexp">    color: #303133;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>Main.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;首页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		name: <span class="string">"Main"</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改一下路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"../view/Login"</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">"../view/Main"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/main'</span>,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以运行了，访问<code>http://localhost:8080/#/login</code>，输入任意字符点击登录即可跳转</p>
<h2 id="七、Vue-Router补充内容"><a href="#七、Vue-Router补充内容" class="headerlink" title="七、Vue Router补充内容"></a>七、Vue Router补充内容</h2><h3 id="1、嵌套路由"><a href="#1、嵌套路由" class="headerlink" title="1、嵌套路由"></a>1、嵌套路由</h3><h4 id="1-1-简述"><a href="#1-1-简述" class="headerlink" title="1.1 简述"></a>1.1 简述</h4><blockquote>
<p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>

<p>借助vue-router，使用嵌套路由配置，就可以很简单地表达这种关系。</p>
<h4 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h4><p>接着使用上面的项目，在view文件夹下新建user文件夹，然后新建文件</p>
<p>Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Profile&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>List.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;用户列表&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;List&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>修改Main.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container style&#x3D;&quot;float: left&quot;&gt;</span><br><span class="line">      &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-aside&gt;</span><br><span class="line">    &lt;&#x2F;el-container&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">        &lt;el-dropdown&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">          &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">      &lt;&#x2F;el-header&gt;</span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-main&gt;</span><br><span class="line">    &lt;&#x2F;el-container&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Main&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #55cfff;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">"../view/Main"</span>;</span><br><span class="line"><span class="keyword">import</span> Profile <span class="keyword">from</span> <span class="string">"../view/user/Profile"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"../view/user/List"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/main'</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/user/profile'</span>,</span><br><span class="line">          component: Profile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/user/list'</span>,</span><br><span class="line">          component: List</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：以 <code>/</code>开头的嵌套路径会被当作根路径，否则就是相对当前路径</strong></p>
<h3 id="2、参数传递"><a href="#2、参数传递" class="headerlink" title="2、参数传递"></a>2、参数传递</h3><p>在Main.vue里修改个人信息的路由链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'profile', params: &#123;id: 1&#125;&#125;"</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给to属性加<code>:</code>符号绑定数据，name参数只能传递路径的name，所以修改路由配置，同时在path上绑定参数名</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">path: '/main',</span><br><span class="line">component: Main,</span><br><span class="line">children: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: 'profile',</span><br><span class="line">    path: '/user/profile/:id',</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/user/list',</span><br><span class="line">    component: List</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>最后修改Profile.vue显示参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p><img src="%60CBDALS%5DJB30POAOHQH7%60B.gif" alt="img"></p>
<h3 id="3、重定向"><a href="#3、重定向" class="headerlink" title="3、重定向"></a>3、重定向</h3><p>重定向也是通过 routes 配置来完成的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: '/index',</span><br><span class="line">  redirect: '/main'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，访问<code>/index</code>就会跳转到<code>/main</code>路径</p>
<h3 id="4、404页面"><a href="#4、404页面" class="headerlink" title="4、404页面"></a>4、404页面</h3><blockquote>
<p>常规参数只会匹配被<code>/</code>分隔的URL片段中的字符。如果想匹配任意路径，我们可以使用通配符<code>*</code></p>
<p>当使用通配符路由时，请确保路由的顺序是正确的，也就是说<strong>含有通配符的路由应该放在最后</strong>。路由<code>{ path: &#39;*&#39; }</code>通常用于客户端 404 错误</p>
</blockquote>
<p>view目录下新建一个Error.vue文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;404，not found&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Error&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在路由配置里增加一个路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入略</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      component: <span class="built_in">Error</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5、路由钩子（组件内的导航守卫）"><a href="#5、路由钩子（组件内的导航守卫）" class="headerlink" title="5、路由钩子（组件内的导航守卫）"></a>5、路由钩子（组件内的导航守卫）</h3><p>类似于springMVC的拦截器</p>
<blockquote>
<p>“导航”表示路由正在发生改变</p>
</blockquote>
<p>修改Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Profile&quot;,</span><br><span class="line">    beforeRouteEnter:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;进入路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;更新路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;离开路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>to: Route： 即将要进入的目标路由对象</p>
</li>
<li><p>from: Route： 当前导航正要离开的路由对象</p>
</li>
<li><p>next: Function： 一定要调用该方法来释放这个钩子。执行效果依赖next方法的调用参数。</p>
<ul>
<li>next():：进行管道中的下一个钩子。</li>
<li>next(false)： 中断当前的导航。</li>
<li>next(‘/‘) 或者 next({ path: ‘/‘ }):：跳转到一个不同的地址。</li>
</ul>
</li>
</ul>
<p>方法说明：</p>
<ul>
<li>beforeRouteEnter：在渲染该组件的对应路由被确认前调用，<strong>不能</strong>获取组件实例 <code>this</code>，因为当守卫执行前，组件实例还没被创建</li>
<li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用，比如路径<code>/user/profile/1</code>跳转到<code>/user/profile/2</code>，由于会渲染同样的组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 <code>this</code></li>
<li>beforeRouteLeave：导航离开该组件的对应路由时调用，可以访问组件实例 <code>this</code></li>
</ul>
<h3 id="6、HTML5-History-模式"><a href="#6、HTML5-History-模式" class="headerlink" title="6、HTML5 History 模式"></a>6、HTML5 History 模式</h3><p>前面关于路由的所有示例，路径上都会有一个<code>#</code>符号，这是因为</p>
<blockquote>
<p>vue-router默认hash模式 —— 使用URL的hash来模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p>
<p>如果不想要很丑的hash，我们可以用路由的history模式，这种模式充分利用history.pushState API 来完成URL跳转而无须重新加载页面。</p>
</blockquote>
<p>修改路由配置，增加一个属性，注意history是字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">      <span class="comment">// 略</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用history模式时，URL就像正常的url了</p>
<p><img src="image-20200621211554813.png" alt="image-20200621211554813"></p>
<p>需要注意的是，这种模式需要后台配置的支持。因为vue应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器访问如例如这样<code>http://oursite.com/user/id</code>的路径时会返回404</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/vue/vue-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：</strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThFNDExYTdtQw==">【狂神说Java】Vue最新快速上手教程通俗易懂<i class="fa fa-external-link-alt"></i></span>前12P</p>
<hr>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
<a id="more"></a>

<h3 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h3><h4 id="1、下载到本地并使用-lt-script-gt-引入"><a href="#1、下载到本地并使用-lt-script-gt-引入" class="headerlink" title="1、下载到本地并使用&lt;script&gt;引入"></a>1、下载到本地并使用<code>&lt;script&gt;</code>引入</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvanMvdnVlLmpz">开发版本<i class="fa fa-external-link-alt"></i></span>：包含完整的警告和调试模式</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvanMvdnVlLm1pbi5qcw==">生产版本<i class="fa fa-external-link-alt"></i></span>：压缩后的代码，删除了警告，&lt;100KB</p>
<h4 id="2、使用CDN引用（推荐）"><a href="#2、使用CDN引用（推荐）" class="headerlink" title="2、使用CDN引用（推荐）"></a>2、使用CDN引用（推荐）</h4><p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些提供CDN服务的网站：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYm9vdGNkbi5jbg==">https://www.bootcdn.cn<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3RhdGljZmlsZS5vcmc=">https://www.staticfile.org<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jZG5qcy5jb20v">https://cdnjs.com/<i class="fa fa-external-link-alt"></i></span> (国外)</li>
</ul>
<h3 id="三、第一个Vue程序"><a href="#三、第一个Vue程序" class="headerlink" title="三、第一个Vue程序"></a>三、第一个Vue程序</h3><p>步骤：先创建一个HTML5文件，在body下方使用script标签引入vue。在下面一个script标签里new一个Vue对象，变量名随意。然后增加一个el参数，值为<code>#app</code>，对应body体里的div标签，下一个参数data使用json格式数据，里面可以自定义key-value对。然后在div中使用双大括号引用这个数据，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		&#123;&#123;message&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">"hello vue!"</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如何体现数据绑定？</strong>F12打开调试控制台，修改message的值，此时页面没有刷新，但显示的值改变了</p>
<p>![](GIF 2020-6-15 21-19-16.gif)</p>
<h3 id="四、入门示例"><a href="#四、入门示例" class="headerlink" title="四、入门示例"></a>四、入门示例</h3><h4 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h4><ul>
<li><code>v-bind</code>前缀可以给html标签的属性绑定数据</li>
<li>判断：<code>v-if、v-else-if、v-else</code>，判断结果为false的标签不会显示</li>
<li>循环：<code>v-for=&quot;(每次遍历取出的对象, 当前项的索引) in 被遍历的对象&quot;</code>，其中索引从0开始，代表索引的变量名可以是任意的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据绑定--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">		鼠标悬浮显示数据绑定消息</span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--判断--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isOk"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"isOk"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>no<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--循环--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span></span><br><span class="line">		&#123;&#123;item.msg&#125;&#125;——&#123;&#123;index&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">"hello vue"</span>,</span></span><br><span class="line"><span class="actionscript">			isOk: <span class="literal">true</span>,</span></span><br><span class="line">			items: [</span><br><span class="line"><span class="actionscript">				&#123;msg: <span class="string">"项目1"</span>&#125;, &#123;msg: <span class="string">"项目2"</span>&#125;, &#123;msg: <span class="string">"项目3"</span>&#125;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、事件绑定"><a href="#2、事件绑定" class="headerlink" title="2、事件绑定"></a>2、事件绑定</h4><p>相当于<code>onclick=&quot;alert(&#39;hello&#39;)</code>，vue通过分离代码再绑定操作，提高了代码灵活性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			say: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				alert(<span class="string">"hello"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意<code>methods</code>拼写，复数方法</p>
<h4 id="3、双向绑定数据"><a href="#3、双向绑定数据" class="headerlink" title="3、双向绑定数据"></a>3、双向绑定数据</h4><p>文本框里输入字符，后面会同步显示。F12更改msg的值，也会同步显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"在这里输入文本"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">		&#123;&#123;msg&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			msg: <span class="string">""</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、组件"><a href="#4、组件" class="headerlink" title="4、组件"></a>4、组件</h4><p><code>Vue.component(组件名, {配置选项})</code>组件全局注册语法，它需要放在<code>new Vue</code>前面。</p>
<p><code>props</code>是子组件用来接受父组件传递过来的数据的一个自定义属性，使用组件时用<code>v-bind</code>来绑定数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:itemref</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">"itemref"</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;itemref&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5、Axios"><a href="#5、Axios" class="headerlink" title="5、Axios"></a>5、Axios</h4><blockquote>
<p>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。</p>
</blockquote>
<p>首先准备一个json文件，模拟json数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vue"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://cn.vuejs.org/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用CDN导入axios库，vue对象里增加一个<code>data()</code>方法（<strong>注意不是data属性</strong>），直接return上面json数据一致的格式。</p>
<p>使用<code>mounted()</code>方法（<strong>生命周期钩子</strong>的函数）：这个方法在html渲染完成后调用，通常为初始化页面完成后，再对html的dom节点进行一些需要的操作。</p>
<p>在这里使用axios执行get请求，使用链式调用的方式传递url，将响应的数据与Vue对象里Data方法的info属性对应，最后再调用并显示数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"info.url"</span>&gt;</span>Vue官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/axios/0.19.2/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data()&#123;</span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line">				info: &#123;</span><br><span class="line"><span class="actionscript">					<span class="string">"name"</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">					<span class="string">"url"</span>: <span class="literal">null</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted()&#123;</span><br><span class="line"><span class="javascript">			axios.get(<span class="string">'../menu.json'</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="keyword">this</span>.info=response.data));</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>附图：Vue实例生命周期</p>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p>
<h4 id="6、计算属性"><a href="#6、计算属性" class="headerlink" title="6、计算属性"></a>6、计算属性</h4><blockquote>
<p>对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
</blockquote>
<h5 id="6-1-基础例子"><a href="#6-1-基础例子" class="headerlink" title="6.1 基础例子"></a>6.1 基础例子</h5><p>先示范一下Vue官网教程的例子。computed里的方法调用时直接书写方法名，不加括号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">'Hello'</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		computed: &#123;</span><br><span class="line"><span class="actionscript">			reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-2-computed与methods"><a href="#6-2-computed与methods" class="headerlink" title="6.2 computed与methods"></a>6.2 computed与methods</h5><p>可以使用调用方法来达到上面同样的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">'Hello'</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于它们的区别，官网上是这样解释的：</p>
<blockquote>
<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
</blockquote>
<p>重点在于基于响应式依赖的<code>computed</code>的缓存机制：只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<h4 id="7、插槽"><a href="#7、插槽" class="headerlink" title="7、插槽"></a>7、插槽</h4><blockquote>
<p>插槽是Vue实现的一套内容分发的API，将<slot>元素作为承载分发内容的出口。</p>
</blockquote>
<p>也就是说它是基于组件机制下的内容，可以使各组件联系起来。</p>
<p>这个例子展示的是具名插槽：可以给不同的插槽起个名字，一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">"list-title"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">"list-items"</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:item</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-title'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-items'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-title"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-items"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'item'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据如何传递的？</strong>如图所示，可以更改相应的参数名来验证</p>
<p><img src="image-20200617151117749.png" alt="image-20200617151117749"></p>
<p>如果上面的例子太复杂，可以看看下面这个，template里去掉slot标签后，视图中传递的数据是无效的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		&#123;&#123;title&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8、自定义事件"><a href="#8、自定义事件" class="headerlink" title="8、自定义事件"></a>8、自定义事件</h4><blockquote>
<p>当子组件需要向父组件传递数据时，就会用到自定义事件</p>
</blockquote>
<p>基于上面那个例子，使用自定义事件来实现：点击按钮后删除当前项（包括数据）</p>
<p>需要注意的地方：组件的模版只能有一个根标签，所以要把button写在li里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">"list-title"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">"list-items"</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in items"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:item</span>=<span class="string">"item"</span> <span class="attr">:index</span>=<span class="string">"i"</span> @<span class="attr">remove</span>=<span class="string">"removeItem(i)"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-title'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-items'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-title"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-items"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'item'</span>, <span class="string">'index'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml">——<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'doRemove'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>",</span></span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			doRemove: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.$emit(<span class="string">'remove'</span>, index)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			removeItem: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.items.splice(index, <span class="number">1</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>事件是如何关联的？</strong>如下图</p>
<p><img src="image-20200617165518663.png" alt="image-20200617165518663"></p>
<p>引用官方API上一个简单的例子来演示<code>$emit</code>的作用</p>
<blockquote>
<p>触发当前实例上的事件。附加参数都会传给监听器回调。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"emit-example-simple"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-button</span> <span class="attr">v-on:welcome</span>=<span class="string">"sayHi"</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">'welcome-button'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: `<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('welcome')"</span>&gt;</span></span></span></span><br><span class="line">						Click me to be welcomed</span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#emit-example-simple'</span>,</span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			sayHi: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				alert(<span class="string">'Hi!'</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="接下来学习：vue-cli"><a href="#接下来学习：vue-cli" class="headerlink" title="接下来学习：vue-cli"></a>接下来学习：vue-cli</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>

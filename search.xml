<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mybatis多表关联映射(一对多、多对一、多对多)的配置与使用</title>
    <url>/mybatis/mybatis-association-query/</url>
    <content><![CDATA[<h2 id="前言：需求分析"><a href="#前言：需求分析" class="headerlink" title="前言：需求分析"></a>前言：需求分析</h2><p>在项目的数据查询中，最简单的是查询一个表里的内容，但是最常用的却是多表关联查询。比如</p>
<ul>
<li>根据某个职业的分类查询这个分类下所有角色(对象)的相关信息</li>
<li>根据多个角色的信息查询它们各自所属的职业分类</li>
<li>根据某个角色的标签查询这个标签下的角色，或者根据这个角色查询他有哪些标签</li>
</ul>
<p>以上例子依次对应了数据查询中<strong>一对多、多对一和多对多</strong>的情况，接下来将通过一个简单的项目介绍如何在mybatis里如何配置与使用这些多表关联查询</p>
<a id="more"></a>

<hr>
<h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><h3 id="1-创建数据表-amp-插入数据"><a href="#1-创建数据表-amp-插入数据" class="headerlink" title="1.创建数据表&amp;插入数据"></a>1.创建数据表&amp;插入数据</h3><p>角色表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`star`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`initial_cost`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`work_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`work_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`name`</span> (<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> char_info <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'能天使'</span>,<span class="string">'6星'</span>,<span class="number">12</span>,<span class="string">'狙击'</span>,<span class="number">101</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'陨星'</span>,<span class="string">'5星'</span>,<span class="number">24</span>,<span class="string">'狙击'</span>,<span class="number">101</span>),(<span class="number">3</span>,<span class="string">'伊芙利特'</span>,<span class="string">'6星'</span>,<span class="number">31</span>,<span class="string">'术士'</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'莫斯提马'</span>,<span class="string">'6星'</span>,<span class="number">31</span>,<span class="string">'术士'</span>,<span class="number">102</span>),(<span class="number">5</span>,<span class="string">'艾雅法拉'</span>,<span class="string">'6星'</span>,<span class="number">19</span>,<span class="string">'术士'</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'阿米娅'</span>,<span class="string">'5星'</span>,<span class="number">18</span>,<span class="string">'术士'</span>,<span class="number">102</span>),(<span class="number">7</span>,<span class="string">'银灰'</span>,<span class="string">'6星'</span>,<span class="number">18</span>,<span class="string">'近卫'</span>,<span class="number">103</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'斯卡蒂'</span>,<span class="string">'6星'</span>,<span class="number">17</span>,<span class="string">'近卫'</span>,<span class="number">103</span>),(<span class="number">9</span>,<span class="string">'推进之王'</span>,<span class="string">'6星'</span>,<span class="number">12</span>,<span class="string">'先锋'</span>,<span class="number">104</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">'红'</span>,<span class="string">'5星'</span>,<span class="number">7</span>,<span class="string">'特种'</span>,<span class="number">105</span>),(<span class="number">11</span>,<span class="string">'年'</span>,<span class="string">'6星'</span>,<span class="number">19</span>,<span class="string">'重装'</span>,<span class="number">106</span>);</span><br></pre></td></tr></table></figure>

<p>职业分类表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_work`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`work_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`work`</span> (<span class="string">`name`</span>,<span class="string">`work_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`char_work`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">101</span>,<span class="string">'狙击'</span>),(<span class="number">2</span>,<span class="number">102</span>,<span class="string">'术士'</span>),(<span class="number">3</span>,<span class="number">103</span>,<span class="string">'近卫'</span>),(<span class="number">4</span>,<span class="number">104</span>,<span class="string">'先锋'</span>),(<span class="number">5</span>,<span class="number">105</span>,<span class="string">'特种'</span>),(<span class="number">6</span>,<span class="number">106</span>,<span class="string">'重装'</span>),(<span class="number">7</span>,<span class="number">107</span>,<span class="string">'医疗'</span>),(<span class="number">8</span>,<span class="number">108</span>,<span class="string">'辅助'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2.项目结构"></a>2.项目结构</h3><p><img src="4026165801.png" alt="img"></p>
<p>本项目使用IntelliJ IDEA创建，并使用maven管理所使用的相关库，如果不使用maven，请注意手动导入相关jar包：mybatis、mysql-connector-java。junit可选，仅作测试用(使用junit必须依赖hamcrest-core包)</p>
<h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3.初始化项目"></a>3.初始化项目</h3><h4 id="3-1配置mybatis"><a href="#3-1配置mybatis" class="headerlink" title="3.1配置mybatis"></a>3.1配置mybatis</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/charInfoMapper.xml"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/charWorkMapper.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置<code>mapUnderscoreToCamelCase</code>为<code>true</code>开启驼峰命名规则转换，即数据表的字段名xxx_yyy转换成java的字段名xxxYyy<br>此处使用的mysql连接驱动包是5.x版本的，如果使用8.x注意更改驱动名称值为<code>com.mysql.cj.jdbc.Driver</code>，同时url需要指定参数<code>useSSL=false&amp;serverTimezone=UTC</code></p>
<h4 id="3-2封装sql会话访问工具类"><a href="#3-2封装sql会话访问工具类" class="headerlink" title="3.2封装sql会话访问工具类"></a>3.2封装sql会话访问工具类</h4><p>在util包下新建MybatisUtil类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>)) &#123;</span><br><span class="line">		sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3创建java对象类"><a href="#3-3创建java对象类" class="headerlink" title="3.3创建java对象类"></a>3.3创建java对象类</h4><p>在pojo包下新建与数据表相关的java对象和字段信息，并生成Getter与Setter方法，同时重写toString方法方便打印信息。本项目仅使用了查询功能，所以不用生成带参构造方法</p>
<hr>
<h2 id="二、一对多"><a href="#二、一对多" class="headerlink" title="二、一对多"></a>二、一对多</h2><h3 id="1-逻辑梳理"><a href="#1-逻辑梳理" class="headerlink" title="1.逻辑梳理"></a>1.逻辑梳理</h3><p>首先理清关系，一对多即一个对象关联多个对象，那么就需要使用同一个字段值来产生关系，所以此处char_info表引用了char_work表的work_id。在查询的时候逻辑顺序如下：</p>
<ol>
<li>在char_work表中通过name值(也可以使用表里其它的唯一值)查询相关的work_id</li>
<li>然后返回一个结果映射，在结果映射里通过work_id在char_info里查询到对应的char_info数据</li>
<li>返回的结果映射同时拥有char_work的信息和其相关的一组char_info数据</li>
</ol>
<p>所以我们需要在CharWork对象里增加一个<code>List&lt;charInfo&gt;</code>属性并生成Getter与Setter方法</p>
<h3 id="2-charWorkMapper映射文件设置"><a href="#2-charWorkMapper映射文件设置" class="headerlink" title="2.charWorkMapper映射文件设置"></a>2.charWorkMapper映射文件设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"charWork"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--一对多结果映射：一类职业对应多名干员--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharWork"</span> <span class="attr">type</span>=<span class="string">"pojo.CharWork"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"charInfoList"</span> <span class="attr">select</span>=<span class="string">"charInfo.selectCharInfoByWorkId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoByWorkName"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharWork"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">		select * from char_work where name = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处resultMap的type即“一”的java对象类型，子标签id为主键，需要关联的属性和不符合驼峰命名转换规则的属性使用result子标签进行对应，property为java属性名，column为数据表字段名。<br>collection的select值为charInfo命名空间(映射文件)里需要关联查询的select语句id</p>
<h3 id="3-charatersMapper映射文件设置"><a href="#3-charatersMapper映射文件设置" class="headerlink" title="3.charatersMapper映射文件设置"></a>3.charatersMapper映射文件设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"charaters"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoByWorkId"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharInfo"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">		select * from char_info where work_id = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处设置work_id值查询charInfo数据即可，无需手动调用</p>
<h3 id="4-实例测试"><a href="#4-实例测试" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>test\java包里新建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one2many</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		CharWork work = sqlSession.selectOne(<span class="string">"charWork.selectCharInfoByWorkName"</span>, <span class="string">"狙击"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charaters = work.getCharInfoList();</span><br><span class="line"></span><br><span class="line">		System.out.println(work);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charaters) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="3024637912.png" alt="img"></p>
<hr>
<h2 id="三、多对一"><a href="#三、多对一" class="headerlink" title="三、多对一"></a>三、多对一</h2><h3 id="1-逻辑梳理-1"><a href="#1-逻辑梳理-1" class="headerlink" title="1.逻辑梳理"></a>1.逻辑梳理</h3><p>多对一体现在查询结果上并不是多个实体对象显示对应的一条分类对象信息，而是每个实体对象后面显示其关联的分类对象信息，显示的“一”可以显示很多条重复的，但都是同一类对象，所以逻辑顺序如下：</p>
<ol>
<li>从char_info表查询所需的一组char_info信息</li>
<li>然后在结果映射里通过这一组char_info的work_id到char_work表里逐条查询所需的char_work信息</li>
<li>返回的结果映射信息就有了char_info信息以及对应的char_work信息</li>
</ol>
<p>那么很显然的我们需要在char_info的java对象里增加一个<code>charWork</code>对象属性，并生成相应的Setter和Getter方法</p>
<h3 id="2-charInfoMapper新增设置"><a href="#2-charInfoMapper新增设置" class="headerlink" title="2.charInfoMapper新增设置"></a>2.charInfoMapper新增设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对一结果映射：多名干员对应符合条件的一类职业--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharInfo"</span> <span class="attr">type</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"charWork"</span> <span class="attr">select</span>=<span class="string">"charWork.selectCharWorkByWorkId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfo"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharInfo"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处resultMap使用<code>association</code>(映射)子标签来实现多对一的查询，原理和一对多相似，不过和collection不同的是association只能映射一个对象而不是一组对象的集合，同时依旧需要把传递的work_id属性进行result对应，否则CharInfo对象会获取不到work_id的值</p>
<h3 id="3-charWorkMapper新增设置"><a href="#3-charWorkMapper新增设置" class="headerlink" title="3.charWorkMapper新增设置"></a>3.charWorkMapper新增设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharWorkByWorkId"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharWork"</span>&gt;</span></span><br><span class="line">	select * from char_work where work_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>“一”的一边只需要增加一条sql语句就行了</p>
<h3 id="4-实例测试-1"><a href="#4-实例测试-1" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>在测试类里新建一个many2one测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">many2one</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = sqlSession.selectList(<span class="string">"charInfo.selectCharInfo"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charInfos) &#123;</span><br><span class="line">			System.out.println(c);</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + c.getCharWork());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里取出全部的CharInfo及其charWork信息，所以就不需要传递参数了，同时变量声明是先集合，再对应的单个对象，和一对多的使用方法是相反的</p>
<p>运行结果：</p>
<p><img src="1025955090.png" alt="img"></p>
<hr>
<h2 id="四、多对多"><a href="#四、多对多" class="headerlink" title="四、多对多"></a>四、多对多</h2><p>虽然mybatis可以使用association和collection标签专门用于对多个相关实体类数据进行级联查询，但仍不支持多个相关实体类数据的级联保存和级联删除操作。因此在进行实体类多对多映射表设计时，需要专门建立一个关联对象表对相关实体类的关联关系进行描述，所以多对多的处理可视为双向的一对多表查询</p>
<h3 id="1-增加数据表"><a href="#1-增加数据表" class="headerlink" title="1.增加数据表"></a>1.增加数据表</h3><p>tag</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tag`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`tag_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`tag`</span> (<span class="string">`tag_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">16</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tag`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'治疗'</span>),(<span class="number">2</span>,<span class="string">'支援'</span>),(<span class="number">3</span>,<span class="string">'新手'</span>),(<span class="number">4</span>,<span class="string">'费用回复'</span>),(<span class="number">5</span>,<span class="string">'输出'</span>),(<span class="number">6</span>,<span class="string">'生存'</span>),(<span class="number">7</span>,<span class="string">'群攻'</span>),(<span class="number">8</span>,<span class="string">'防护'</span>),(<span class="number">9</span>,<span class="string">'减速'</span>),(<span class="number">10</span>,<span class="string">'削弱'</span>),(<span class="number">11</span>,<span class="string">'快速复活'</span>),(<span class="number">12</span>,<span class="string">'位移'</span>),(<span class="number">13</span>,<span class="string">'召唤'</span>),(<span class="number">14</span>,<span class="string">'控场'</span>),(<span class="number">15</span>,<span class="string">'爆发'</span>);</span><br></pre></td></tr></table></figure>

<p>char_tags</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`char_tags`</span> (</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`tid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`char_tags`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">10</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">10</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">14</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">10</span>),(<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">6</span>),(<span class="number">9</span>,<span class="number">4</span>),(<span class="number">9</span>,<span class="number">5</span>),(<span class="number">10</span>,<span class="number">11</span>),(<span class="number">10</span>,<span class="number">14</span>),(<span class="number">11</span>,<span class="number">2</span>),(<span class="number">11</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-增加对象与字段"><a href="#2-增加对象与字段" class="headerlink" title="2.增加对象与字段"></a>2.增加对象与字段</h3><p>pojo包下新增tag类与相关属性，对应tag表，同时增加List<CharInfo>属性，在CharInfo类里也增加一个List<tag>属性，此处无需char_tags表关联java类</p>
<h3 id="3-增加映射配置"><a href="#3-增加映射配置" class="headerlink" title="3.增加映射配置"></a>3.增加映射配置</h3><p>charInfoMapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个干员所对应的多个标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmCharInfoWithTags"</span> <span class="attr">type</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"star"</span> <span class="attr">column</span>=<span class="string">"star"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"initialCost"</span> <span class="attr">column</span>=<span class="string">"initial_cost"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workName"</span> <span class="attr">column</span>=<span class="string">"work_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"pojo.tag"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tagName"</span> <span class="attr">column</span>=<span class="string">"tag_name"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCharInfoWithTags"</span> <span class="attr">resultMap</span>=<span class="string">"rmCharInfoWithTags"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and c.name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用SQL语句对应来实现多表关联的查询，如果不理解这条select语句，可以代入参数在mysql里观察查询结果：</p>
<p><img src="3346185465.png" alt="img"></p>
<p>因为使用了*取出了所有表的所有列，会有列名重复的情况，所以在result或id里不能指定<code>property=&quot;id&quot; column=&quot;id&quot;</code>这样的参数映射，否则只会映射第一次出现的数据，后面重复列名的数据无法映射。同时这里需要将相关表(除了关系表)所对应的java对象类的属性完整映射，重复的列名一般来说就是关联的字段信息了，所以可以如上使用<code>&lt;id property=&quot;id&quot; column=&quot;cid&quot;/&gt;</code>这样的方式来映射。</p>
<p>新增tagMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个标签所对应的多个干员--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"rmTagsWithCharInfo"</span> <span class="attr">type</span>=<span class="string">"pojo.tag"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tagName"</span> <span class="attr">column</span>=<span class="string">"tag_name"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"charaters"</span> <span class="attr">ofType</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"cid"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"star"</span> <span class="attr">column</span>=<span class="string">"star"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"initialCost"</span> <span class="attr">column</span>=<span class="string">"initial_cost"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workName"</span> <span class="attr">column</span>=<span class="string">"work_name"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"workId"</span> <span class="attr">column</span>=<span class="string">"work_id"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTagsWithCharInfo"</span> <span class="attr">resultMap</span>=<span class="string">"rmTagsWithCharInfo"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and t.tag_name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>逆向的关系映射与上面原理相同，将属性/字段反向描述即可，注意select语句的参数，以及在mybatis配置文件里增加映射文件<code>&lt;mapper resource=&quot;mappers/tagMapper.xml&quot;/&gt;</code></p>
<h3 id="4-实例测试-2"><a href="#4-实例测试-2" class="headerlink" title="4.实例测试"></a>4.实例测试</h3><p>正向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">many2many</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		CharInfo charInfo = sqlSession.selectOne(<span class="string">"charInfo.selectCharInfoWithTags"</span>, <span class="string">"莫斯提马"</span>);</span><br><span class="line">		List&lt;pojo.tag&gt; tags = charInfo.getTags();</span><br><span class="line"></span><br><span class="line">		System.out.println(charInfo);</span><br><span class="line">		<span class="keyword">for</span> (tag t : tags) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="4108606847.png" alt="img"></p>
<p>逆向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyToMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (SqlSession sqlSession = MybatisUtil.openSession()) &#123;</span><br><span class="line">		tag tag = sqlSession.selectOne(<span class="string">"tag.selectTagsWithCharInfo"</span>, <span class="string">"削弱"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = tag.getCharaters();</span><br><span class="line"></span><br><span class="line">		System.out.println(tag);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : charInfos) &#123;</span><br><span class="line">			System.out.println(<span class="string">"\t"</span> + charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3064026697.png" alt="img"></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基于AspectJ的AOP示例</title>
    <url>/spring/spring-aspectj-aop/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="关于AOP"><a href="#关于AOP" class="headerlink" title="关于AOP"></a>关于AOP</h3><blockquote>
<p>AOP即Aspect Oriented Programming（面向切面编程），其通过提供另一种思考程序结构的方式来补充OOP（面向对象编程）.OOP中的key模块化单元是class，而AOP中，模块化单元是aspect。利用AOP可以对业务逻辑的各个部分进行隔离，从而降低业务逻辑各部分之间的耦合度，提高程序的可重用性，同时提高了开发的效率。</p>
</blockquote>
<a id="more"></a>

<h3 id="关于AspectJ与Spring"><a href="#关于AspectJ与Spring" class="headerlink" title="关于AspectJ与Spring"></a>关于AspectJ与Spring</h3><ul>
<li>AspectJ是一个面向切面的框架，它扩展了Java语言，定义了AOP语法</li>
<li>Spring2.0以后新增了对AspectJ切点表达式支持</li>
<li>@AspectJ是Aspect5新增的功能,通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><h3 id="AOP相关术语及概念"><a href="#AOP相关术语及概念" class="headerlink" title="AOP相关术语及概念"></a>AOP相关术语及概念</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><table>
<thead>
<tr>
<th>术语</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>JoinPoint(连接点)</td>
<td>可以被拦截到的点（程序执行期间的一个点）,例如方法的执行或exception（异常）的处理。在 Spring AOP 中，连接点始终表示方法。不能被拦截的点，比如被final修饰的方法就不叫连接点</td>
</tr>
<tr>
<td>Pointcut(切入点)</td>
<td>真正被拦截的点，也就是被指定需要advice的方法</td>
</tr>
<tr>
<td>Advice(建议)</td>
<td>在切入点被拦截后采取的操作，也可以理解为通知或增强</td>
</tr>
<tr>
<td>Target(目标)</td>
<td>被一个或多个Advice处理的object</td>
</tr>
<tr>
<td>Weaving(编织)</td>
<td>将Advice应用到Target并创建一个被增强的object的过程。这可以在编译时、加载时或运行时完成。Spring的AOP使用运行时执行编织。</td>
</tr>
<tr>
<td>Proxy(代理)</td>
<td>被增强的object就叫做代理对象，在spring里使用的是JDK动态代理或CGLIB代理</td>
</tr>
<tr>
<td>Aspect(切面)</td>
<td>一个或多个Pointcut和Advice的组合就叫Aspect</td>
</tr>
</tbody></table>
<h4 id="Advice的类型："><a href="#Advice的类型：" class="headerlink" title="Advice的类型："></a>Advice的类型：</h4><ul>
<li>前置通知：在连接点之前执行但不能阻止执行流程进入连接点的Advice(除非抛出异常)</li>
<li>后置通知：在连接点正常完成后执行的Advice。如果方法正常返回而不抛出异常。</li>
<li>环绕通知：围绕连接点的Advice，例如方法调用。环绕通知可以在方法调用之前和之后执行自定义行为，甚至阻止方法的执行，它还负责选择是继续加入点还是通过返回自己的返回值或抛出异常来决定方法的执行。</li>
<li>异常抛出通知：如果方法通过抛出异常退出，则执行Advice</li>
<li>最终通知：无论连接点退出的方式是否正常，都要执行的Advice。类似try-catch语句finally语句块的功能</li>
</ul>
<h4 id="execution切入点表达式"><a href="#execution切入点表达式" class="headerlink" title="execution切入点表达式"></a>execution切入点表达式</h4><p>通过execution函数,可以定义切点的方法切入，语法如下：</p>
<blockquote>
<p>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;声明类型&gt;?&lt;方法名&gt;(&lt;参数&gt;)&lt;异常类型&gt;?)</p>
</blockquote>
<p>其中?同正则表达式，表示可以出现0次或1次（可以省略），声明类型一般指java包路径</p>
<p>通配符说明：</p>
<ul>
<li>*　表示若干字符（不包括<code>.</code>）</li>
<li>..　表示若干字符（包括<code>.</code>）</li>
<li>+　表示子类，比如Dao+表示Dao类及其子类</li>
</ul>
<p>简单示例：</p>
<ul>
<li>匹配任意public方法：<code>execution(public * *(..))</code></li>
<li>匹配指定包下所有类的方法：不包含子包<code>execution(* org.example.*(..))</code><br>包含子包<code>execution(* org.example..*(..))</code></li>
<li>任意名字为set开头的方法：<code>execution(* set*(..))</code></li>
</ul>
<h2 id="项目基础构建"><a href="#项目基础构建" class="headerlink" title="项目基础构建"></a>项目基础构建</h2><p>本示例使用环境：IDEA2019.3 + maven3.6 + jdk8</p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>需要添加的依赖<br>（因为spring-context依赖于spring-aop,spring-beans,spring-core,spring-expression，所以仅需说明spring-context包，上述包会同时导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h3><p>输入<code>&lt;aop:</code>idea会自动提示并添加aop的xmlns。<br>这里开启aop的aspectj-autoproxy（aspectj自动代理），以及包的注解扫描即可。后续会单独说明非注解的xml配置方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.annotation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解方式AOP"><a href="#注解方式AOP" class="headerlink" title="注解方式AOP"></a>注解方式AOP</h2><h3 id="模拟业务类"><a href="#模拟业务类" class="headerlink" title="模拟业务类"></a>模拟业务类</h3><p>org.example.annotation包下新建UserDao类模拟业务方法，未使用接口，仅输出信息。使用注解注入bean。其中find方法增加返回值，findOne方法抛出异常方便后续测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"保存……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询……"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"return value of find()"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询一条……"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"修改……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置切面类并实现各种通知方法"><a href="#配置切面类并实现各种通知方法" class="headerlink" title="配置切面类并实现各种通知方法"></a>配置切面类并实现各种通知方法</h3><p>新建UserDaoAspect类并配置注解，@Aspect表示这是一个切面，@Component配置bean，可以不增加name或id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.delete(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···前置通知···JoinPoint信息："</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.find(..))"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···后置通知···获取到的返回值："</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.save(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知前···"</span>);</span><br><span class="line">		Object proceed = joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知后···"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.findOne(..))"</span>, throwing = <span class="string">"e"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···异常抛出通知···异常信息："</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.update(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<ul>
<li>before方法的参数joinPoint会提供具体被执行的execution字符串</li>
<li>@AfterReturning的returning参数可以获取到切入点的返回值（需要在通知方法中传入同名参数）</li>
<li>around方法需要传入ProceedingJoinPoint类型的参数，使用其proceed方法来执行被拦截的方法，同时返回值作为通知方法的返回值</li>
<li>@AfterThrowing的throwing参数使用方法类似@AfterReturning的returning，可以获取到异常抛出时的异常信息，此通知在无异常时不会执行</li>
</ul>
<h3 id="测试代码与输出结果"><a href="#测试代码与输出结果" class="headerlink" title="测试代码与输出结果"></a>测试代码与输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	UserDao userDao = (UserDao) context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">	userDao.delete();</span><br><span class="line">	userDao.find();</span><br><span class="line">	userDao.save();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		userDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	userDao.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3061606868.png" alt="img"></p>
<h3 id="使用-Pointcut命名切点"><a href="#使用-Pointcut命名切点" class="headerlink" title="使用@Pointcut命名切点"></a>使用@Pointcut命名切点</h3><p>当需要使用的通知方法变多的时候，后期维护再修改又会变得很麻烦，所以可以使用<code>@Pointcut</code>注解来命名一组切点，此注解的定义包括两部分：Pointcut表达式(expression)和Pointcut签名(signature)。注解不能单独使用，所以需要定义一个私有方法，也就是说@Pointcut后跟expression，私有方法的方法名为signature，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After</span>(<span class="string">"afterUpdate()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* org.example.annotation.UserDao.update(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterUpdate</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Pointcut定义时，还可以使用&amp;&amp;、||、!逻辑运算符</p>
<h2 id="xml方式配置AOP"><a href="#xml方式配置AOP" class="headerlink" title="xml方式配置AOP"></a>xml方式配置AOP</h2><h3 id="新建模拟业务类和切面类"><a href="#新建模拟业务类和切面类" class="headerlink" title="新建模拟业务类和切面类"></a>新建模拟业务类和切面类</h3><p>ProductDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"保存……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询……"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"return value of find()"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"修改……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查询一条……"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception test"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···前置通知···JoinPoint信息："</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···后置通知···获取到的返回值："</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知前···"</span>);</span><br><span class="line">		Object proceed = joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">"\t···环绕通知后···"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···异常抛出通知···异常信息："</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\t···最终通知···"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务类可以使用接口也可以不使用，spring会自动检测来决定使用哪种自动代理。切面类无需添加任何注解</p>
<h3 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productDao"</span> <span class="attr">class</span>=<span class="string">"org.example.xml.ProductDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productDaoAspect"</span> <span class="attr">class</span>=<span class="string">"org.example.xml.ProductDaoAspect"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"beforeSave"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.save(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterFind"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.find(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"aroundUpdate"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.update(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterThrowing"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.findOne(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"afterDelete"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.xml.ProductDao.delete(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"productDaoAspect"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"beforeSave"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterFind"</span> <span class="attr">returning</span>=<span class="string">"returnValue"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"aroundUpdate"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterThrowing"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"afterDelete"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先注入目标类和切面类，然后配置aop，这里直接使用了aop:pointcut来命名切点，也可以在具体切面里直接书写表达式。</p>
<h3 id="测试代码与输出结果-1"><a href="#测试代码与输出结果-1" class="headerlink" title="测试代码与输出结果"></a>测试代码与输出结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xmlTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ProductDao productDao  = (ProductDao) context.getBean(<span class="string">"productDao"</span>);</span><br><span class="line"></span><br><span class="line">	productDao.save();</span><br><span class="line">	productDao.find();</span><br><span class="line">	productDao.update();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		productDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	productDao.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3626514518.png" alt="img"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>aspectj</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>spring整合mybatis的简单示例</title>
    <url>/spring/spring-mybatis/</url>
    <content><![CDATA[<p>spring虽然有jdbcTemplate可以简化jdbc的相关操作，但sql语句还是会写在代码里，耦合度较高。此时专业的持久层框架mybatis的优越性就体现出来了，这里通过一个简单的例子将spring整合mybatis的相关步骤记录一下，这篇示例不会涉及表示层与业务层，仅展示整合步骤。</p>
<a id="more"></a>

<h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><ul>
<li>Intellij IDEA2019.3</li>
<li>jdk8</li>
<li>maven3.6</li>
</ul>
<h3 id="如何整合"><a href="#如何整合" class="headerlink" title="如何整合"></a>如何整合</h3><p>spring的优势是IoC/DI，mybatis则是避免书写JDBC代码。那么我们可以把mybatis的sqlSession对象以及数据映射对象交给spring管理，仅配置java对象和映射文件即可。<br>在这个过程中，仅数据库驱动包、spring框架包和mybatis包是不够的，还需要<a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">mybatis-spring</a>这个整合包，通过这个包的功能来把SqlSessionFactory配置给spring。各部分对应版本在文档简介部分有说明。</p>
<h3 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>首先需要数据库建表，这里参考<a href="/mybatis/mybatis-association-query/#1-创建数据表-amp-插入数据">char_info</a>表</p>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><p>需要使用的jar依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依赖关系如图<br><img src="352365815.png" alt="img"></p>
<h4 id="CharInfo-java"><a href="#CharInfo-java" class="headerlink" title="CharInfo.java"></a>CharInfo.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String star;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> initialCost;</span><br><span class="line">	<span class="keyword">private</span> String workName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> workId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以下省略Setter/Getter与toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CharInfoMapper接口"><a href="#CharInfoMapper接口" class="headerlink" title="CharInfoMapper接口"></a>CharInfoMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.CharInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharInfoMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;CharInfo&gt; <span class="title">listAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="charInfo-xml"><a href="#charInfo-xml" class="headerlink" title="charInfo.xml"></a>charInfo.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">		<span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.CharInfoMapper"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listAll"</span> <span class="attr">resultType</span>=<span class="string">"CharInfo"</span>&gt;</span></span><br><span class="line">		select * from char_info</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里实现mybatis自动映射的关键是</p>
<ol>
<li>namespace需要书写接口类的全限定名</li>
<li>sql语句标签的id要与接口方法名一致</li>
<li>参数类型与返回值类型需要一致(<code>select *</code>比较特殊，不需要指定List，只用List内需要包装的类型即可)</li>
</ol>
<h4 id="applicationContext-xml-重点"><a href="#applicationContext-xml-重点" class="headerlink" title="applicationContext.xml(重点)"></a>applicationContext.xml(重点)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--一般注解配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用spring配置数据源--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mybatis与spring整合相关配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--别名设置--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"pojo"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--自 1.3.0 版本开始，新增的 configuration 属性--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--能够在没有对应的 MyBatis XML 配置文件的情况下--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--直接设置 Configuration 实例，这里开启了驼峰命名转换--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mapper接口包遍历扫描--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"mapper"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--单个mapper接口设置--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;bean class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name="sqlSessionFactory" ref="sqlSession"/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name="mapperInterface" value="mapper.CourseMapper"/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAlltest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoMapper charInfoMapper = (CharInfoMapper) context.getBean(<span class="string">"charInfoMapper"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; courseList = charInfoMapper.listAll();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : courseList) &#123;</span><br><span class="line">			System.out.println(charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合shiro</title>
    <url>/springboot/springboot-shiro/</url>
    <content><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p><strong>Apache Shiro</strong>是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业级应用程序。</p>
</blockquote>
<a id="more"></a>

<p><a href="http://shiro.apache.org/" target="_blank" rel="noopener">官网</a>上有个10 Minute Tutorial（10分钟教程），方便我们快速入门shiro</p>
<p>目前的版本：<img src="https://img.shields.io/maven-central/v/org.apache.shiro/shiro-core.svg" alt="Maven Central" style="max-width:100%;"></p>
<hr>
<h4 id="shiro核心概述"><a href="#shiro核心概述" class="headerlink" title="shiro核心概述"></a>shiro核心概述</h4><p>在最高的概念层次上，Shiro的架构有三个主要概念：<strong>Subject</strong>、<strong>SecurityManager</strong>和<strong>Realms</strong>。下图来自官网。</p>
<p><img src="http://shiro.apache.org/assets/images/ShiroBasicArchitecture.png" alt=""></p>
<ul>
<li><p>Subject（对象主体）：这个主体本质上是当前执行用户的一个特定于安全的“视图”。虽然“用户”一词通常意味着一个人，但主体可以是一个人，但它也可以表示第三方服务、守护进程帐户、定时任务或任何类似的东西——基本上是当前与软件交互的任何东西。</p>
<p>  主体实例都要（并且必须）绑定到SecurityManager。当您与主体交互时，这些交互将转换为与SecurityManager的特定主体交互</p>
</li>
<li><p>SecurityManager（安全管理器）：SecurityManager是Shiro体系结构的核心，它充当一种“保护伞”对象，协调其内部安全组件，这些组件共同构成一个对象图。但是，一旦为应用程序配置了SecurityManager及其内部对象图，它通常就不受影响了，应用程序开发人员几乎把所有的时间都花在了Subject API上。</p>
</li>
<li><p>Realms（领域）：Realms充当Shiro和应用程序安全数据之间的“桥梁”或“连接器”。当需要与安全相关数据（如用户帐户）进行实际交互以执行身份验证（登录）和授权（访问控制）时，Shiro会从为应用程序配置的一个或多个Realm中查找其中的许多内容。</p>
</li>
</ul>
<h3 id="二、项目搭建"><a href="#二、项目搭建" class="headerlink" title="二、项目搭建"></a>二、项目搭建</h3><p>新建一个基于springboot的web项目，依赖如下，可选添加spring-boot-devtools开启热部署方便调试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>准备几个简单的html页面</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/update&#125;"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>/user/add.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>/user/update.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		用户名：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		密码：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用控制器给这些页面做个跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"user/add"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/user/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"user/update"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上基本环境就搭建完成了，下面开始shiro的配置</p>
<h3 id="三、配置shiro（原生方式）"><a href="#三、配置shiro（原生方式）" class="headerlink" title="三、配置shiro（原生方式）"></a>三、配置shiro（原生方式）</h3><h4 id="1、访问拦截"><a href="#1、访问拦截" class="headerlink" title="1、访问拦截"></a>1、访问拦截</h4><p>按照上面那个核心概念图，自定义一个Realm类，继承<code>AuthorizingRealm</code>类并重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"===授权==="</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是shiro的主要配置了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyRealm <span class="title">myRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span>(<span class="string">"webSecurityManager"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">(@Qualifier(<span class="string">"myRealm"</span>)</span> MyRealm myRealm)</span>&#123;</span><br><span class="line">		DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">		securityManager.setRealm(myRealm);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> securityManager;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			@Qualifier(<span class="string">"webSecurityManager"</span>)</span> DefaultWebSecurityManager webSecurityManager)</span>&#123;</span><br><span class="line">		ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">		factoryBean.setSecurityManager(webSecurityManager);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">"/user/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">		factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">		factoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> factoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是比较传统的方法，类似于在spring程序里用xml配置bean，springboot中通过注解写成了配置类，基本步骤如下：</p>
<ol>
<li>首先需要提供Realm实例</li>
<li>然后配置SecurityManager，把Realm实例配置给SecurityManager，在这里的SecurityManager是<code>DefaultWebSecurityManager</code></li>
<li>最后配置<code>ShiroFilterFactoryBean</code>，将SecurityManager配置给<code>ShiroFilterFactoryBean</code>，然后在<code>ShiroFilterFactoryBean</code>中指定路径拦截规则（使用有序的map对象）</li>
<li>可以使用<code>setLoginUrl()</code>指定登录路径</li>
</ol>
<h5 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h5><p>在上面的路径拦截规则中，map的key代表路径（可以使用通配符），value代表拦截规则，可以用<code>DefaultFilter.authc.toString()</code>来表示value，<code>DefaultFilter</code>这个枚举类列出了可以使用的拦截规则名简写及对应的类：</p>
<p>用于身份验证的：</p>
<ul>
<li>anon：允许立即访问路径而不执行任何类型的安全检查的替换器。</li>
<li>authc：需要对请求用户进行身份验证才能继续请求，如果没有，则通过将用户重定向到您配置的登录路径来强制用户去登录。</li>
<li>authcBasic：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP基本协议的质询登录。成功登录后，允许他们继续访问请求的资源或url。</li>
<li>authcBearer：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP承载协议的质询登录。成功登录后，允许他们继续访问请求的资源/url。</li>
<li>logout：一个简单的过滤器，在收到请求时，它将立即注销当前正在执行的subject，然后将它们重定向到配置的URL。</li>
<li>user：允许访问者是已知用户（定义为具有已知主体）时访问资源的过滤器。</li>
</ul>
<p>用于授权的：</p>
<ul>
<li>perms：如果当前用户具有映射值指定的权限，则允许访问的替换器；如果用户没有指定的所有权限，则拒绝访问。</li>
<li>port：要求请求位于特定端口上的替换器，如果不是，则重定向到该端口上的同一URL。</li>
<li>rest：将HTTP请求的方法（如GET、POST等）转换为相应操作的过滤器。</li>
<li>roles：如果当前用户具有由映射值指定的角色，则允许访问的替换器；如果用户没有指定的角色，则拒绝访问。</li>
<li>ssl：要求请求通过SSL的过滤器。</li>
</ul>
<p>用于session：</p>
<ul>
<li>noSessionCreation：将在请求期间禁用创建新会话的路径匹配过滤器。</li>
</ul>
<p>通过上面的配置，实现了路径的访问拦截，当没有登录时访问路径会跳转到登录页面，接下来实现登录认证功能</p>
<h4 id="2、用户认证"><a href="#2、用户认证" class="headerlink" title="2、用户认证"></a>2、用户认证</h4><p>补充登录页的表单属性，msg用来显示返回的错误提示信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器里增加相应的处理，此处参考官方教程的10分钟快速入门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(String username, String password, Model model)</span></span>&#123;</span><br><span class="line">	Subject subject = SecurityUtils.getSubject();</span><br><span class="line">	UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		subject.login(token);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">		<span class="comment">// uae.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">		<span class="comment">// ice.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">"msg"</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后修改MyRealm类的<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">	String username = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username,<span class="string">"123456"</span>,getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回值类型是<code>AuthenticationInfo</code>接口，需要找到它的实现类，所以使用<code>SimpleAuthenticationInfo</code>类，其中的参数依次是</p>
<ul>
<li>principal–与指定realm关联的“primary”主体</li>
<li>credentials–验证给定主体的凭证</li>
<li>realmName–从主体和凭据中获取realm名字</li>
</ul>
<p>这里简单处理一下，用户名可以直接对比，而密码必须交给shiro去验证</p>
<h3 id="四、整合mybatis"><a href="#四、整合mybatis" class="headerlink" title="四、整合mybatis"></a>四、整合mybatis</h3><p>经过上面的配置后，shiro的权限验证就基本完成了，下面使用mybatis接入数据</p>
<p>首先准备一个user表</p>
<p><img src="image-20200629171705485.png" alt="image-20200629171705485"></p>
<p>然后使用<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin" target="_blank" rel="noopener">Free MyBatis plugin</a>插件生成对应的实体类、DAO接口、xml文件</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启mapper接口扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.dao"</span>)</span><br></pre></td></tr></table></figure>

<p>配置数据源与mybatis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///mybatis?useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>mapper接口增加一个<code>User selectByName(String username)</code>方法，同时在xml文件增加对应配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByName"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">  from user</span><br><span class="line">  where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改一下<code>MyRealm</code>类<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===验证==="</span>);</span><br><span class="line">	String username = (String) token.getPrincipal();</span><br><span class="line">	User user = userDao.selectByName(username);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里省略了业务层，直接注入DAO。现在可以用数据库里用户名和对应的密码来登录了</p>
<h3 id="五、授权"><a href="#五、授权" class="headerlink" title="五、授权"></a>五、授权</h3><h4 id="1、了解shiro中的权限（Permission）"><a href="#1、了解shiro中的权限（Permission）" class="headerlink" title="1、了解shiro中的权限（Permission）"></a>1、了解shiro中的权限（Permission）</h4><p><a href="http://shiro.apache.org/permissions.html" target="_blank" rel="noopener">官网原文</a></p>
<blockquote>
<p>shiro将权限或操作定义为显式操作的语句。它只是对应用程序中原始功能的陈述。权限是安全策略中最底层的构造，它们只显式定义应用程序可以做什么。它们并没有描述“谁”能够执行这些操作。</p>
<p>定义允许“谁”（用户）做“什么”（权限）是以某种方式向用户分配权限的练习。这通常是由应用程序的数据模型完成的，并且在不同的应用程序中可能会有很大的差异。</p>
<p>例如，权限可以分组到一个角色中，并且该角色可以与一个或多个用户对象相关联。或者某些应用程序可以有一组用户，并且可以为一个组分配一个角色，这通过传递关联意味着该组中的所有用户都被隐式地授予该角色中的权限。</p>
<p>对于如何向用户授予权限有许多变体—应用程序根据应用程序需求确定如何对此进行建模。</p>
</blockquote>
<p>简单来说，类似于下图，把权限分配给角色，用户再拥有这个角色。</p>
<p><img src="be869e847a0c40c781e05ebb917db317.png" alt="img"></p>
<h4 id="2、数据准备"><a href="#2、数据准备" class="headerlink" title="2、数据准备"></a>2、数据准备</h4><p>在数据表中增加一列字段<code>perms</code></p>
<p><img src="image-20200630160528819.png" alt="image-20200630160528819"></p>
<p>同时在实体类、xml文件中增加相应的处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String perms;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"perms"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"perms"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、未授权跳转"><a href="#3、未授权跳转" class="headerlink" title="3、未授权跳转"></a>3、未授权跳转</h4><p>控制器增加未授权的跳转路径，这里仅返回提示信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/Unauthorized"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">unAuthorized</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"未授权禁止访问"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>shiroFilterFactoryBean</code>方法中设置跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">factoryBean.setUnauthorizedUrl(<span class="string">"/Unauthorized"</span>);</span><br></pre></td></tr></table></figure>

<p>同时添加过滤规则，注意顺序，在<code>/user/**</code>规则的前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">"/user/add"</span>, <span class="string">"perms[user:add]"</span>);</span><br><span class="line">map.put(<span class="string">"/user/update"</span>, <span class="string">"perms[user:update]"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4、访问授权"><a href="#4、访问授权" class="headerlink" title="4、访问授权"></a>4、访问授权</h4><p>最后在MyRealm的<code>doGetAuthorizationInfo</code>方法中对授权进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"===授权==="</span>);</span><br><span class="line"></span><br><span class="line">	User user = (User) principals.getPrimaryPrincipal();</span><br><span class="line">	SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">	info.addStringPermissions(Arrays.asList(user.getPerms().split(<span class="string">","</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用<code>principals.getPrimaryPrincipal()</code>得到的对象就是在<code>doGetAuthenticationInfo</code>中返回对象的构造方法的第一个参数</p>
<p><code>addStringPermissions</code>需要传入一个字符串的集合，而<code>addStringPermission</code>不需要</p>
<h3 id="六、在thymeleaf中使用shiro标签"><a href="#六、在thymeleaf中使用shiro标签" class="headerlink" title="六、在thymeleaf中使用shiro标签"></a>六、在thymeleaf中使用shiro标签</h3><h4 id="1、增加依赖"><a href="#1、增加依赖" class="headerlink" title="1、增加依赖"></a>1、增加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个依赖是非官方的，但是用来在thymeleaf里使用shiro标签足够了</p>
<h4 id="2、注入“方言”"><a href="#2、注入“方言”" class="headerlink" title="2、注入“方言”"></a>2、注入“方言”</h4><p>在<code>ShiroConfig</code>里增加一个bean，<code>ShiroDialect</code>类是上面那个依赖包里的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、使用标签"><a href="#3、使用标签" class="headerlink" title="3、使用标签"></a>3、使用标签</h4><p>先增加命名空间<code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code>，然后使用相应标签</p>
<p>不添加或填写错误不影响程序运行，但会影响IDE的提示功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">""</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:add"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/update&#125;"</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:update"</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在启动程序，未登录或无相应权限时不会显示添加用户、修改用户的a标签，登录后不会显示登录的a标签</p>
<h3 id="附：基于starter的快速配置方式"><a href="#附：基于starter的快速配置方式" class="headerlink" title="附：基于starter的快速配置方式"></a>附：基于starter的快速配置方式</h3><p>按照<a href="http://shiro.apache.org/spring-boot.html" target="_blank" rel="noopener">官方的整合说明</a>，推荐的配置方式如下</p>
<p>还是使用配置类，这里不需要额外添加<code>securityManager</code>了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Realm <span class="title">realm</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		DefaultShiroFilterChainDefinition definition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line"></span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/add"</span>, <span class="string">"perms[user:add]"</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/update"</span>, <span class="string">"perms[user:update]"</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">"/user/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">		System.out.println(<span class="string">"shiroFilterChainDefinition"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> definition;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>application.properties</code>里增加设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">shiro.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.web.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.loginUrl</span>=<span class="string">/login</span></span><br><span class="line"><span class="meta">shiro.unauthorizedUrl</span>=<span class="string">/Unauthorized</span></span><br><span class="line"><span class="meta">shiro.sessionManager.sessionIdUrlRewritingEnabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">shiro.sessionManager.sessionIdCookieEnabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">shiro.successUrl</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>功能依次是：开启shiro启动器配置，开启shiro web配置，设置登录路径，设置未授权跳转路径，是否将sessionId显示在url，是否保存sessionId到cookie，登录成功后的跳转路径</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中的Spring MVC详解</title>
    <url>/springboot/springboot-springmvc/</url>
    <content><![CDATA[<h2 id="一、官方文档介绍"><a href="#一、官方文档介绍" class="headerlink" title="一、官方文档介绍"></a>一、官方文档介绍</h2><p>以下内容引用自<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc" target="_blank" rel="noopener">官方文档</a>，机翻并进行手动修正，部分内容已省略</p>
<a id="more"></a>

<h3 id="1、Spring-MVC的自动化配置"><a href="#1、Spring-MVC的自动化配置" class="headerlink" title="1、Spring MVC的自动化配置"></a>1、Spring MVC的自动化配置</h3><p>Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。自动配置在Spring默认设置的基础上添加了以下功能：</p>
<ul>
<li>包含<code>contentnegotingviewresolver</code>和<code>beannameviewsolver</code>beans</li>
<li>支持服务静态资源，包括支持Webjars（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">链接</a>）</li>
<li>自动注册<code>Converter</code>，<code>GenericConverter</code>和<code>Formatter</code>beans</li>
<li>支持<code>HttpMessageConverters</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">链接</a>）</li>
<li>自动注册<code>MessageCodesResolver</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes" target="_blank" rel="noopener">链接</a>）</li>
<li>支持静态的<code>index.html</code></li>
<li>支持自定义<code>Favicon</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">链接</a>）</li>
<li>自动使用一个<code>ConfigurableWebBindingInitializer</code>bean（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">链接</a>）</li>
</ul>
<p>如果您想保留这些Spring Boot MVC的自定义配置并进行更多的<a href="https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC自定义</a>（拦截器、格式化程序、视图控制器和其他功能），可以在自己的类上添加<code>@Configuration</code>注解，（继承）类型为<code>WebMvcConfigurer</code>，但不要添加<code>@EnableWebMvc</code>注解。</p>
<p>如果你想提供<code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code>或<code>ExceptionHandlerExceptionResolver</code>的自定义实例，并且仍然保留Spring Boot MVC的自定义配置，则可以声明<code>WebMVCregistration</code>类型的bean，并使用它来提供这些组件的自定义实例。</p>
<p>如果您想完全控制Spring MVC，可以在自己的类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解，或者添加你自己的<code>@Configuration</code>注释<code>DelegatingWebMvcConfiguration</code>配置，如<code>@EnableWebMvc</code>的Javadoc所述。</p>
<h3 id="2、静态内容"><a href="#2、静态内容" class="headerlink" title="2、静态内容"></a>2、静态内容</h3><p>默认情况下，Spring Boot从类路径中名为<code>/static</code>（或<code>/public</code>或<code>/resources</code>或<code>/META-INF/resources</code>）的目录或<code>ServletContext</code>的根目录中提供静态内容。它使用来自Spring MVC的<code>ResourceHttpRequestHandler</code>，这样您就可以通过添加自己的<code>WebMvcConfigurer</code>和重写<code>addResourceHandlers</code>方法来修改该行为。</p>
<p>在一个独立的web应用程序中，容器中的默认servlet也被启用，并回调其行为，如果Spring决定不处理它，则从<code>ServletContext</code>的根目录提供内容。大多数情况下，这种情况不会发生（除非修改默认的MVC配置），因为Spring总是可以通过<code>DispatcherServlet</code>处理请求。</p>
<p>默认情况下，资源被映射在<code>/**</code>路径，但是你可以使用<code>spring.mvc.static-path-pattern</code>属性对其进行调整。例如，可以将所有资源重新定位到<code>/resources/**</code>中，如下所示：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/resources/**</span></span><br></pre></td></tr></table></figure>

<p>你还可以使用<code>spring.resources.static-locations</code>属性（用目录位置列表替换默认值）自定义静态资源位置。根Servlet上下文路径<code>“/”</code>也会被自动添加为一个位置。</p>
<p>除了前面提到的“标准”静态资源位置之外，还有一个特殊情况：<a href="https://www.webjars.org/" target="_blank" rel="noopener">Webjars content</a>。如果jar文件是以Webjars格式打包的，那么路径为<code>/webjars/**</code>的任何资源都可以从jar文件中获得。</p>
<blockquote>
<p>如果应用程序打包为jar，请不要使用src/main/webapp目录。尽管这个目录是一个通用的标准，但它只适用于war包，如果生成jar包，大多数构建工具都会默认忽略它。</p>
</blockquote>
<h3 id="3、欢迎页面（首页）"><a href="#3、欢迎页面（首页）" class="headerlink" title="3、欢迎页面（首页）"></a>3、欢迎页面（首页）</h3><p>Spring Boot支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找<code>index.html</code>文件。如果找不到索引模板，它将查找<code>index</code>模板。如果找到任何一个，它将自动用作应用程序的欢迎页。</p>
<h3 id="4、自定义Favicon（收藏夹图标）"><a href="#4、自定义Favicon（收藏夹图标）" class="headerlink" title="4、自定义Favicon（收藏夹图标）"></a>4、自定义Favicon（收藏夹图标）</h3><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找<code>favicon.ico</code>。如果存在这样的文件，它将自动用作应用程序的favicon。</p>
<h3 id="5、错误处理"><a href="#5、错误处理" class="headerlink" title="5、错误处理"></a>5、错误处理</h3><p>默认情况下，Spring Boot提供了一个<code>/error</code>映射，它以合理的方式处理所有错误，并在servlet容器中将其注册为“全局”错误页。对于计算机客户端，它生成一个JSON响应，其中包含导致错误的详细信息、HTTP状态码和异常消息。对于浏览器客户端，有一个“whitelabel”错误视图，它以HTML格式呈现相同的数据（要自定义它，请添加一个解析到<code>error</code>的<code>View</code>）。要完全替换默认行为，可以实现<code>ErrorController</code>并注册该类型的bean定义，或者添加<code>ErrorAttributes</code>类型的bean以使用现有机制，但替换内容。</p>
<blockquote>
<p><code>BasicErrorController</code>可以用作自定义<code>ErrorController</code>的基类。如果要为新内容类型添加处理程序（默认情况下是专门处理text/html并为其他所有内容提供回调），这一点特别有用。为此，扩展<code>BasicErrorController</code>，添加一个带有<code>produces</code>属性和<code>@RequestMapping</code>注解的公共方法，并创建一个新类型的bean。</p>
</blockquote>
<h4 id="5-1-自定义错误页"><a href="#5-1-自定义错误页" class="headerlink" title="5.1 自定义错误页"></a>5.1 自定义错误页</h4><p>如果要显示给定状态代码的自定义HTML错误页，可以将文件添加到<code>/error</code>文件夹。错误页可以是静态HTML（即添加到任何static资源文件夹下）或使用模板生成。文件名应为确切的状态代码或序列掩码。</p>
<p>例如，要将404映射到静态HTML文件，文件夹结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;</span><br><span class="line"> +- main&#x2F;</span><br><span class="line">     +- java&#x2F;</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources&#x2F;</span><br><span class="line">         +- public&#x2F;</span><br><span class="line">             +- error&#x2F;</span><br><span class="line">             |   +- 404.html</span><br><span class="line">             +- &lt;other public assets&gt;</span><br></pre></td></tr></table></figure>

<p>如果使用FreeMarker模板映射所有<code>5xx</code>错误，你的文件夹结构会像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;</span><br><span class="line"> +- main&#x2F;</span><br><span class="line">     +- java&#x2F;</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources&#x2F;</span><br><span class="line">         +- templates&#x2F;</span><br><span class="line">             +- error&#x2F;</span><br><span class="line">             |   +- 5xx.ftlh</span><br><span class="line">             +- &lt;other templates&gt;</span><br></pre></td></tr></table></figure>

<p>对于更复杂的映射，还可以添加实现<code>ErrorViewResolver</code>接口的bean，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可选择使用request或者status并返回一个ModelAndView对象</span></span><br><span class="line">        <span class="keyword">return</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您还可以使用常规的Spring MVC特性，比如<code>@ExceptionHandler</code>方法和<code>@ControllerAdvice</code>。然后，<code>ErrorController</code>将会拾取任何未处理的异常。</p>
<h3 id="6、CORS（跨域资源共享）支持"><a href="#6、CORS（跨域资源共享）支持" class="headerlink" title="6、CORS（跨域资源共享）支持"></a>6、CORS（跨域资源共享）支持</h3><p>Cross-origin resource sharing（CORS）是大多数浏览器实现的W3C规范，它允许您以灵活的方式指定哪些类型的跨域请求被授权，而不是使用一些不太安全和不太强大的方法，如IFRAME或JSONP。</p>
<p>从（spring）版本4.2开始，SpringMVC支持CORS。在Spring Boot应用程序中使用带有<code>@CrossOrigin</code>注解的控制器方法CORS配置不需要任何特定的配置。全局CORS配置可以通过使用自定义的<code>addCorsMappings(CorsRegistry)</code>方法注册<code>WebMvcConfigurer</code>bean来定义，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/api/**"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、源码查阅、分析"><a href="#二、源码查阅、分析" class="headerlink" title="二、源码查阅、分析"></a>二、源码查阅、分析</h2><p>首先找到关于SpringBoot对SpringMVC进行自动配置的类的全路径：</p>
<blockquote>
<p><code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.java</code></p>
</blockquote>
<h3 id="1、类注解"><a href="#1、类注解" class="headerlink" title="1、类注解"></a>1、类注解</h3><p>这个类上的注解说明了它具有如下特性：</p>
<ul>
<li><p>这是一个不会代理bean方法的spring配置类</p>
</li>
<li><p>满足以下条件时，这个自动配置类才会生效</p>
<ul>
<li>匹配到这是一个基于servlet的web应用程序</li>
<li>在类路径中存在<code>Servlet</code>、<code>DispatcherServlet</code>以及<code>WebMvcConfigurer</code>类</li>
<li>不存在使用<code>WebMvcConfigurationSupport</code>类的bean</li>
</ul>
</li>
<li><p>自动配置的序号为<code>Ordered.HIGHEST_PRECEDENCE + 10</code>（HIGHEST_PRECEDENC的值为-2147483648）</p>
</li>
<li><p>在<code>DispatcherServletAutoConfiguration</code>类、<code>TaskExecutionAutoConfiguration</code>类和<code>ValidationAutoConfiguration</code>类之后应用自动配置</p>
</li>
</ul>
<h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><p>自动配置类没有提供构造方法，而是使用了一个继承<code>WebMvcConfigurer</code>的静态内部类作适配器，原因在注释上已经说明了：</p>
<blockquote>
<p>定义为嵌套配置以确保当其不在类路径上时不读取WebMVCConfiguer</p>
</blockquote>
<p>所以这里的构造方法是<code>WebMvcAutoConfigurationAdapter</code>的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">		ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">		ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">	<span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">	<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">	<span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">	<span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-静态资源"><a href="#2-1-静态资源" class="headerlink" title="2.1 静态资源"></a>2.1 静态资源</h4><p>需要关注的属性是<code>resourceProperties</code>，定位到<code>ResourceProperties</code>类，发现如下静态字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">		<span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>和文档说明一致，表示静态资源从这些路径里查找。然后再定位到<code>addResourceHandlers</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">	CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">				.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">	String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">				.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，第一个if判断属性<code>spring.resources.add-mappings</code>需要为true，资源处理器才生效，当然这是默认值；第二个if则是文档中说明的webjars了；第三个if判断是否有静态路径参数，定位过去发现默认值是<code>/**</code>，后面的链式调用功能依次是：</p>
<ul>
<li>添加路径处理器（<strong>这个路径指链接上的路径，不是静态资源的本地路径</strong>）</li>
<li>添加资源位置（本地路径，相对于项目文件）</li>
<li>设置缓存时效</li>
<li>设置缓存控制</li>
</ul>
<h4 id="2-2-首页"><a href="#2-2-首页" class="headerlink" title="2.2 首页"></a>2.2 首页</h4><p>找到下一个静态内部类<code>EnableWebMvcConfiguration</code>，关注如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">	WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">			<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">			<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">	welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">	<span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">	<span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码逻辑说明了是以所有的静态资源根路径下去找到的第一个<code>index.html</code>文件作为首页。然后定位到<code>WelcomePageHandlerMapping</code>类，构造方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">	<span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">"/**"</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">		logger.info(<span class="string">"Adding welcome page: "</span> + welcomePage.get());</span><br><span class="line">		setRootViewName(<span class="string">"forward:index.html"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">		logger.info(<span class="string">"Adding welcome page template: index"</span>);</span><br><span class="line">		setRootViewName(<span class="string">"index"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先在静态资源路径参数里有<code>/**</code>然后转发到index.html文件，否则就去模版引擎里去找有没有映射到<code>index</code>路径的</p>
<h2 id="三、功能扩展"><a href="#三、功能扩展" class="headerlink" title="三、功能扩展"></a>三、功能扩展</h2><h3 id="1、如何扩展"><a href="#1、如何扩展" class="headerlink" title="1、如何扩展"></a>1、如何扩展</h3><p>要想扩展Spring MVC的功能，就如官方文档所说明的那样，新建一个类，继承<code>WebMvcConfigurer</code>类，并添加<code>@Configuration</code>注解，但不要加<code>@EnableWebMvc</code>注解（后续说明原因）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 选择需要实现的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="image-20200513222232969.png" alt="image-20200513222232969"></p>
<p>可以看到能实现的方法还是比较多的，比较重要的方法：</p>
<ul>
<li><code>addViewControllers</code>添加视图控制器</li>
<li><code>addInterceptors</code>添加拦截器</li>
<li><code>addResourceHandlers</code>添加资源处理器</li>
<li><code>addCorsMappings</code>添加跨域资源访问映射</li>
</ul>
<h3 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h3><p>上文说到，扩展功能不能添加<code>@EnableWebMvc</code>注解，那么接下来去源码中分析原因：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个注解其实就是导入了<code>DelegatingWebMvcConfiguration</code>类，这个类继承了<code>WebMvcConfigurationSupport</code>类。此时再回过头去看<code>WebMvcAutoConfiguration</code>类的注解，如果存在<code>WebMvcConfigurationSupport</code>类，那么默认的自动配置类就不会生效。所以仅仅扩展功能是不能添加<code>@EnableWebMvc</code>注解的，如果想完全接管默认的自动配置，那就可以使用<code>@EnableWebMvc</code>注解</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IntelliJ IDEA与maven整合SSM框架</title>
    <url>/java/ssm-integration/</url>
    <content><![CDATA[<p>在上一篇示例中演示了spring与mybatis的整合，在学习了springMVC后，就可以把它们整合在一起搭建成大型项目通用的框架了</p>
<a id="more"></a>

<h2 id="一、构建项目基础"><a href="#一、构建项目基础" class="headerlink" title="一、构建项目基础"></a>一、构建项目基础</h2><h3 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h3><ul>
<li>Windows10 1903</li>
<li>IntelliJ IDEA 2019.3</li>
<li>JDK 8</li>
<li>maven 3.6</li>
</ul>
<h3 id="2、准备数据库、数据表"><a href="#2、准备数据库、数据表" class="headerlink" title="2、准备数据库、数据表"></a>2、准备数据库、数据表</h3><p>这里依旧使用<a href="/mybatis/mybatis-association-query/#1-创建数据表-amp-插入数据">char_info</a>表</p>
<h3 id="3、创建maven-webapp项目"><a href="#3、创建maven-webapp项目" class="headerlink" title="3、创建maven-webapp项目"></a>3、创建maven-webapp项目</h3><p>新建项目，左边选择maven，勾上Create from archetype，在下面选中maven-archetype-webapp，后面项目名称自己定义。等待maven初始化完成后，右键选择src-新建-目录，如下选中并回车创建maven的几个标准文件夹<br><img src="1840374354.png" alt="img"></p>
<h3 id="4、声明依赖"><a href="#4、声明依赖" class="headerlink" title="4、声明依赖"></a>4、声明依赖</h3><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.ver</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.ver</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mybatis.ver</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">mybatis.ver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring-webmvc所需依赖仅比spring-context多一个spring-web包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以此处无需配置spring-context--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据源与事务--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--SM整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--在tomcat运行库里添加了mysql驱动包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以这里配置scope为provided--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--以下依赖非整合相关，视需求添加--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--aspectj、jsp标签库、日志、json解析库，单元测试--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--servlet-api可以通过在外部库添加tomcat运行库来引入--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有依赖关系如下</p>
<p><img src="4260633758.png" alt="img"></p>
<h3 id="5、使用插件生成mybatis所需类与xml文件"><a href="#5、使用插件生成mybatis所需类与xml文件" class="headerlink" title="5、使用插件生成mybatis所需类与xml文件"></a>5、使用插件生成mybatis所需类与xml文件</h3><p>这里使用的idea插件是<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin" target="_blank" rel="noopener">Free MyBatis plugin</a>。在idea配置好数据库连接后，右键char_info表，选择mybatis-generator，然后设置如下</p>
<p><img src="560481680.png" alt="img"></p>
<p>此时会在项目main目录中生成如下文件</p>
<p><img src="1778991020.png" alt="img"></p>
<p>稍加修改：</p>
<ul>
<li>在CharInfo生成<code>toString()</code>方法</li>
<li>在CharInfoDao接口添加<code>List&lt;CharInfo&gt; selectAll()</code>方法</li>
<li>此时上述接口新增方法会显示红线报错，按alt+enter会提示在对应xml文件里生成对应标签，然后补充设置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"pojo.CharInfo"</span>&gt;</span></span><br><span class="line">	select</span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">	from char_info;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、搭建spring环境"><a href="#二、搭建spring环境" class="headerlink" title="二、搭建spring环境"></a>二、搭建spring环境</h2><h3 id="1、业务层"><a href="#1、业务层" class="headerlink" title="1、业务层"></a>1、业务层</h3><p>新建service包，包下新建接口，然后service包下新建impl包，新建接口的实现类，并添加注解，此处没有功能仅打印输出，用于测试spring环境</p>
<p>CharInfoService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CharInfoServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"业务层："</span> + <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、spring配置文件"><a href="#2、spring配置文件" class="headerlink" title="2、spring配置文件"></a>2、spring配置文件</h3><p>在资源文件夹下面新建applicationContext.xml，开启service包的注解扫描即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"service"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写并运行测试类"><a href="#3、编写并运行测试类" class="headerlink" title="3、编写并运行测试类"></a>3、编写并运行测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">springTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoService charInfoService = (CharInfoService) context.getBean(<span class="string">"charInfoServiceImpl"</span>);</span><br><span class="line">		charInfoService.showAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="855991443.png" alt="img"></p>
<p>输出无报错即验证spring环境正常</p>
<h2 id="三、搭建springMVC环境"><a href="#三、搭建springMVC环境" class="headerlink" title="三、搭建springMVC环境"></a>三、搭建springMVC环境</h2><h3 id="1、配置web-xml"><a href="#1、配置web-xml" class="headerlink" title="1、配置web.xml"></a>1、配置web.xml</h3><p>如果不使用contextConfigLocation参数，那么默认会查找[servlet-name]-servlet.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、配置springmvc-xml"><a href="#2、配置springmvc-xml" class="headerlink" title="2、配置springmvc.xml"></a>2、配置springmvc.xml</h3><p>分开配置spring与springmvc，降低耦合度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、配置控制器类"><a href="#3、配置控制器类" class="headerlink" title="3、配置控制器类"></a>3、配置控制器类</h3><p>新建上述配置文件描述所需的controller包，并新建控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/charInfo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/list.jsp"</span>);</span><br><span class="line">		String msg = <span class="string">"表示层："</span> + <span class="keyword">this</span>.getClass().getName();</span><br><span class="line">		mav.addObject(<span class="string">"msg"</span>, msg);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、创建页面list-jsp"><a href="#4、创建页面list-jsp" class="headerlink" title="4、创建页面list.jsp"></a>4、创建页面list.jsp</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、运行测试"><a href="#5、运行测试" class="headerlink" title="5、运行测试"></a>5、运行测试</h3><p>添加tomcat运行配置，如果控制台中文乱码，就设置虚拟机选项<code>-Dfile.encoding=utf-8</code>。启动成功后访问<code>http://localhost/charInfo/findAll</code>，显示如下即表示配置无误</p>
<p><img src="2241127279.png" alt="img"></p>
<h2 id="四、配置mybatis并与spring整合"><a href="#四、配置mybatis并与spring整合" class="headerlink" title="四、配置mybatis并与spring整合"></a>四、配置mybatis并与spring整合</h2><p>这里直接在spring配置文件里配置mybatis，不再单独配置</p>
<h3 id="1、applicationContext-xml新增配置"><a href="#1、applicationContext-xml新增配置" class="headerlink" title="1、applicationContext.xml新增配置"></a>1、applicationContext.xml新增配置</h3><p>如果数据表列名与java类属性名一致，可不配置mapUnderscoreToCamelCase</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.ibatis.session.Configuration"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、持久层注入服务层"><a href="#2、持久层注入服务层" class="headerlink" title="2、持久层注入服务层"></a>2、持久层注入服务层</h3><p>修改CharInfoServiceImpl.java。idea在spring使用字段自动注入时会报警告，表示不建议使用的方法，所以这里改为了构造函数注入，也可以使用setter方式注入，或者使用jdk的@Resource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">CharInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoDao charInfoDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CharInfoServiceImpl</span><span class="params">(CharInfoDao charInfoDao)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.charInfoDao = charInfoDao;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title">showAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> charInfoDao.selectAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharInfoService charInfoService = (CharInfoService) context.getBean(<span class="string">"charInfoServiceImpl"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		charInfoList.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1812425610.png" alt="img"></p>
<h2 id="五、整合spring与springMVC"><a href="#五、整合spring与springMVC" class="headerlink" title="五、整合spring与springMVC"></a>五、整合spring与springMVC</h2><h3 id="1、web-xml新增配置"><a href="#1、web-xml新增配置" class="headerlink" title="1、web.xml新增配置"></a>1、web.xml新增配置</h3><p>springMVC本来就是spring自己的东西，所以只需要让web框架识别到spring即可，所以这里仅配置两条：关联spring的配置文件、启动ContextLoaderListener</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、服务层注入表现层（控制器与视图）"><a href="#2、服务层注入表现层（控制器与视图）" class="headerlink" title="2、服务层注入表现层（控制器与视图）"></a>2、服务层注入表现层（控制器与视图）</h3><p>修改CharInfoController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/charInfo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoService charInfoService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CharInfoController</span><span class="params">(CharInfoService charInfoService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.charInfoService = charInfoService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/list.jsp"</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		mav.addObject(<span class="string">"list"</span>, charInfoList);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改list.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.star&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.initialCost&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workName&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workId&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、访问网站"><a href="#3、访问网站" class="headerlink" title="3、访问网站"></a>3、访问网站</h3><p>显示如下与数据库一致，即表示SSM框架搭建完成<br><img src="1824091702.png" alt="img"></p>
<h2 id="六、可补充的其它配置"><a href="#六、可补充的其它配置" class="headerlink" title="六、可补充的其它配置"></a>六、可补充的其它配置</h2><h3 id="排除静态资源拦截"><a href="#排除静态资源拦截" class="headerlink" title="排除静态资源拦截"></a>排除静态资源拦截</h3><p>springmvc.xml添加<code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<h3 id="视图解析（定位）"><a href="#视图解析（定位）" class="headerlink" title="视图解析（定位）"></a>视图解析（定位）</h3><p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在WEB-INF目录下创建pages目录，把jsp文件移动进去，修改控制器ModelAndView的构造参数为<code>ModelAndView(&quot;list&quot;)</code>。地址访问方式无变化</p>
<h3 id="编码过滤"><a href="#编码过滤" class="headerlink" title="编码过滤"></a>编码过滤</h3><p>需要处理的地方有三处：</p>
<ul>
<li>Request的get请求<br> 在tomcat的server.xml文件中，Connector标签里新增<code>URlEncoding</code>属性，值为UTF-8（tomcat5.0版本以上不用配置）</li>
<li>Request的post请求</li>
</ul>
<p>在web.xml添加过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查阅源码后看到如下部分得知，底层使用的还是javaEE那套API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String encoding = getEncoding();</span><br><span class="line">	<span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			request.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">			response.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Response</li>
</ul>
<p>上面forceResponseEncoding仅仅是对HTML内容响应进行了编码，这里需要对非HTML，比如json数据，进行编码转换。修改springmvc.xml，将mvc:annotation-driven标签扩展开，然后改动如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置声明式事务"><a href="#配置声明式事务" class="headerlink" title="配置声明式事务"></a>配置声明式事务</h3><p>这个功能是属于业务层的，所以在applicationContext.xml文件里添加设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"show*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"CharInfoServicePointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* service..*(..))"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"CharInfoServicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>部分标签的默认值未书写，tx:method可视情况添加与修改</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli学习笔记</title>
    <url>/vue/vue-cli-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：</strong><a href="https://www.bilibili.com/video/BV18E411a7mC" target="_blank" rel="noopener">【狂神说Java】Vue最新快速上手教程通俗易懂</a>P13-P19</p>
<a id="more"></a>

<hr>
<p>阅读前注意：<code>目前Vue-cli版本已经4.x了，视频中使用的是2.x，区别较大。本文对应视频学习依旧使用2.x版本</code></p>
<h2 id="一、Vue-cli简介"><a href="#一、Vue-cli简介" class="headerlink" title="一、Vue-cli简介"></a>一、Vue-cli简介</h2><p>cli意思是命令行界面（command-line interface）。</p>
<p>vue-cli是一个基于Vue.js进行快速开发的完整系统，是Vue.js开发的标准工具，可以认为它是vue构建项目的脚手架，能够进行组件式开发。</p>
<h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="1、环境需求"><a href="#1、环境需求" class="headerlink" title="1、环境需求"></a>1、环境需求</h3><p>要使用vue-cli 2.x，需要以下前提条件：</p>
<ul>
<li><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js</a>（版本6.x以上）</p>
</li>
<li><p>npm（版本3以上，Node.js已包含 npm）</p>
<blockquote>
<p>npm全称Node Package Manager，即node包管理器，也是javascript包管理器</p>
</blockquote>
</li>
<li><p>git（非必须）</p>
</li>
</ul>
<p>可以使用安装包(.msi)傻瓜式安装，也可以使用二进制文件（推荐）免安装，解压后将其根目录添加到<code>Path</code>环境变量即可</p>
<h3 id="2、使用淘宝npm镜像"><a href="#2、使用淘宝npm镜像" class="headerlink" title="2、使用淘宝npm镜像"></a>2、使用淘宝npm镜像</h3><p>直接使用npm安装模块会走国外的地址，比较慢，推荐使用<a href="https://developer.aliyun.com/mirror/NPM" target="_blank" rel="noopener">淘宝npm镜像</a>，可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步。使用如下命令来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>然后就可以使用cnpm来安装模块了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install 模块名</span><br></pre></td></tr></table></figure>

<h3 id="3、安装vue-cli"><a href="#3、安装vue-cli" class="headerlink" title="3、安装vue-cli"></a>3、安装vue-cli</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">或</span><br><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>

<h3 id="4、检测安装"><a href="#4、检测安装" class="headerlink" title="4、检测安装"></a>4、检测安装</h3><p>使用如下命令查看版本号，检测是否安装成功（最后一个V是大写），如果命令无效，请检查环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure>

<h2 id="三、第一个vue-cli程序"><a href="#三、第一个vue-cli程序" class="headerlink" title="三、第一个vue-cli程序"></a>三、第一个vue-cli程序</h2><h3 id="1、部署"><a href="#1、部署" class="headerlink" title="1、部署"></a>1、部署</h3><p>使用<code>vue list</code>或<code>vue-list</code>命令查看可以使用的模版（仅2.x版本），如果命令无效就再安装一下vue-cli</p>
<blockquote>
<p>  Available official templates:</p>
<p>  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.<br>  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.<br>  ★  pwa - PWA template for vue-cli based on the webpack template<br>  ★  simple - The simplest possible Vue setup in a single HTML file<br>  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.<br>  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</p>
</blockquote>
<p>使用<code>vue init &lt;模版名&gt; &lt;项目名&gt;</code>来创建一个vue项目，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue init webpack hello-vue</span><br></pre></td></tr></table></figure>

<p>然后依次提示</p>
<ul>
<li><p>项目名（默认hello-vue，回车即可）</p>
</li>
<li><p>项目描述（默认A Vue.js project，回车即可）</p>
</li>
<li><p>作者名字</p>
</li>
<li><p>构建类型（这里使用方向键选择第一项）</p>
<ul>
<li>运行时+编译：推荐大多数用户使用</li>
<li>仅运行时：约6kb大小，min+gzip压缩，但是模板（或任何特定于Vue的HTML）只允许在.Vue文件中使用-其他地方必须提供函数</li>
</ul>
<p><strong>以下选项均输入N</strong></p>
</li>
<li><p>是否安装vue-router</p>
</li>
<li><p>是否使用ESLint对代码进行初始化</p>
</li>
<li><p>是否安装单元测试</p>
</li>
<li><p>是否安装e2e测试（基于Nightwatch）</p>
</li>
<li><p>项目创建后，是否为您自动运行“npm install”？（推荐）</p>
<ul>
<li>虽然官方推荐，但我们可以选择第三项，自己手动运行<code>npm install</code>命令</li>
</ul>
</li>
</ul>
<p>手动运行<code>npm install</code>，它会根据项目下<code>package.json</code>文件里的依赖安装node_modules，有很大，接近2万个文件，100+MB</p>
<p>上面的操作都可以在Intellij IDEA的终端里完成</p>
<h3 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h3><p>执行<code>npm run dev</code>命令，或者使用IDEA在<code>package.json</code>文件里点击start的小箭头</p>
<p><img src="image-20200619180425383.png" alt="image-20200619180425383"></p>
<p>看到编译成功的提示后，用浏览器访问<code>http://localhost:8080/</code></p>
<p><img src="image-20200619185557904.png" alt="image-20200619185557904"></p>
<h3 id="3、尝试修改"><a href="#3、尝试修改" class="headerlink" title="3、尝试修改"></a>3、尝试修改</h3><p>在src目录下App.vue为主文件，里面分为三部分</p>
<ul>
<li><p>template是视图模板</p>
</li>
<li><p>script是js脚本，使用了ECMAScript的语法</p>
</li>
<li><p>style则是css样式</p>
</li>
</ul>
<p>阅读脚本部分，发现它导入了components目录的HelloWorld.vue文件为组件，将其删减并修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;HelloWorld&#39;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#39;Hello World&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>再次运行<code>npm run dev</code>并访问</p>
<p><img src="image-20200619192139601.png" alt="image-20200619192139601"></p>
<h2 id="四、webpack"><a href="#四、webpack" class="headerlink" title="四、webpack"></a>四、webpack</h2><p>在上面那个项目的build文件夹下可以看到webpack相关的配置文件（仅限vue-cli2.x版本），那么接下来就介绍下</p>
<h3 id="1、什么是-webpack"><a href="#1、什么是-webpack" class="headerlink" title="1、什么是 webpack?"></a>1、什么是 webpack?</h3><p>类似于java的maven，不同的是maven囊括了包管理和打包，而前端则是npm管理包，webpack打包。</p>
<blockquote>
<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p>
</blockquote>
<p><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">官网</a>横幅十分形象的展示了webpack的作用</p>
<p>![](GIF 2020-6-20 17-03-41.gif)</p>
<h3 id="2、安装webpack"><a href="#2、安装webpack" class="headerlink" title="2、安装webpack"></a>2、安装webpack</h3><p>目前webpack的版本是</p>
<p><a href="https://github.com/webpack/webpack/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="GitHub release"></a></p>
<p>使用npm或者cnpm安装，如果使用 webpack 4版本及以上，还需要安装 CLI。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack</span><br><span class="line">cnpm install -g webpack-cli</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</em></p>
</blockquote>
<p>但是目前学习阶段暂时使用全局安装</p>
<h3 id="3、编码、打包、使用"><a href="#3、编码、打包、使用" class="headerlink" title="3、编码、打包、使用"></a>3、编码、打包、使用</h3><p>项目结构如下</p>
<p><img src="image-20200619230422653.png" alt="image-20200619230422653"></p>
<p>如下依次创建文件并书写代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;hello webpack&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">"./hello"</span>;</span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry: <span class="string">"./src/main.js"</span>, <span class="comment">// 配置入口文件</span></span><br><span class="line">	output: &#123;</span><br><span class="line">		filename: <span class="string">"./js/bundle.js"</span> <span class="comment">// 配置导出路径及文件名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后在项目根目录打开终端使用<code>webpack</code>命令打包，完成后会出现一个dist目录，里面就是已经压缩过了打包好的js文件。</p>
<p><strong>如何使用？</strong>写一个html来引用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="image-20200619231710027.png" alt="image-20200619231710027"></p>
<h2 id="五、Vue-Router"><a href="#五、Vue-Router" class="headerlink" title="五、Vue Router"></a>五、Vue Router</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><blockquote>
<p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p>
</blockquote>
<p>简单来说就是前端控制页面跳转的一种机制，根据不同的 url 地址展示不同的内容和页面，可以实现局部刷新的效果</p>
<h3 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h3><p>使用<a href="#三、第一个vue-cli程序">第一个vue-cli程序</a>里创建的项目，删除components和assets目录下的文件，App.vue文件中模版仅保留div，脚本仅保留导出名。</p>
<p>在项目根目录使用npm或cnpm命令安装Vue Router</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>

<p>安装完成后，在components目录下新建两个Vue Component文件</p>
<p>Login.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;登录页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Login&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>About.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;关于页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;About&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Vue-Router"><a href="#3、使用Vue-Router" class="headerlink" title="3、使用Vue Router"></a>3、使用Vue Router</h3><p>新建一个router目录，并且新建index.js文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"../components/Login"</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">"../components/About"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'about'</span>,</span><br><span class="line">      path: <span class="string">'/about'</span>,</span><br><span class="line">      component: About</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在main.js里引用router目录并添加到Vue对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>最后在App.vue的模版里使用（此方法为声明式的导航）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/login"</span>&gt;登录&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>about<span class="string">"&gt;关于&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>npm run dev</code>启动程序，访问页面</p>
<p><code>&lt;router-link&gt;</code>实际上被渲染为了a标签，下图是点击前的页面</p>
<p><img src="image-20200620185529340.png" alt="image-20200620185529340"></p>
<p>点击后</p>
<p><img src="image-20200620185716538.png" alt="image-20200620185716538"></p>
<h2 id="六、在vue-cli中使用element-ui"><a href="#六、在vue-cli中使用element-ui" class="headerlink" title="六、在vue-cli中使用element-ui"></a>六、在vue-cli中使用element-ui</h2><blockquote>
<p><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element-Ul</a>是饿了么前端团队推出的一款基于Vue.js 2.0的桌面端UI框架，一套为开发者、设计师和产品经理准备的基于Vue 2.0的桌面端组件库</p>
</blockquote>
<p>安装（i是instal的简写，S是save的简写）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用npm i安装的模块无法用npm uninstall删除，用npm uninstall i才能卸载掉 </p>
</li>
<li><p>npm i会帮助检测与当前node版本最匹配的npm包版本号，并匹配出来相互依赖的npm包应该提升的版本号 </p>
</li>
<li><p>部分npm包在当前node版本下无法使用，必须使用建议版本 </p>
</li>
<li><p>安装报错时intall肯定会出现npm-debug.log 文件，npm i不一定</p>
</li>
</ul>
<p>依旧使用上面那个项目，在main,js里引入element-ui</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>新建一个view目录，然后目录下新建文件</p>
<p>Login.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref=<span class="string">"loginForm"</span> :model=<span class="string">"form"</span> :rules=<span class="string">"rules"</span> label-width=<span class="string">"80px"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-box"</span>&gt;</span><br><span class="line">      &lt;h3 <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-title"</span>&gt;欢迎登录&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="账号" prop="username"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input type="text" placeholder="请输入账号" v-model="form.username"/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="密码" prop="password"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input type="text" placeholder="请输入密码" v-model="form.password"/</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button type="primary" v-on:click="onSubmit('loginForm')"&gt;登录&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog title=<span class="string">"提示"</span> :visible.sync=<span class="string">"dialogVisible"</span> width=<span class="string">"30%"</span>&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span slot="footer" class="dialog-footer"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button type="primary" @click="dialogVisible=false"&gt;确定&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-dialog&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"Login"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: <span class="string">''</span>,</span><br><span class="line">          password: <span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'账号不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;],</span><br><span class="line">          password: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'密码不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span>&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        dialogVisible: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$router.push(<span class="string">"/main"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.dialogVisible = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .login-box &#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid #DCDFE6;</span></span><br><span class="line"><span class="regexp">    width: 350px;</span></span><br><span class="line"><span class="regexp">    margin: 100px auto;</span></span><br><span class="line"><span class="regexp">    padding: 35px 35px 15px 35px;</span></span><br><span class="line"><span class="regexp">    border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    -Webkit-border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    -moz-border-radius: 5px;</span></span><br><span class="line"><span class="regexp">    box-shadow: 0 0 25px #909399;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  .login-title &#123;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    margin: 0 auto 48px auto;</span></span><br><span class="line"><span class="regexp">    color: #303133;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>Main.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;首页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		name: <span class="string">"Main"</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改一下路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"../view/Login"</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">"../view/Main"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/main'</span>,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以运行了，访问<code>http://localhost:8080/#/login</code>，输入任意字符点击登录即可跳转</p>
<h2 id="七、Vue-Router补充内容"><a href="#七、Vue-Router补充内容" class="headerlink" title="七、Vue Router补充内容"></a>七、Vue Router补充内容</h2><h3 id="1、嵌套路由"><a href="#1、嵌套路由" class="headerlink" title="1、嵌套路由"></a>1、嵌套路由</h3><h4 id="1-1-简述"><a href="#1-1-简述" class="headerlink" title="1.1 简述"></a>1.1 简述</h4><blockquote>
<p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>

<p>借助vue-router，使用嵌套路由配置，就可以很简单地表达这种关系。</p>
<h4 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h4><p>接着使用上面的项目，在view文件夹下新建user文件夹，然后新建文件</p>
<p>Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Profile&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>List.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;用户列表&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;List&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>修改Main.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container style&#x3D;&quot;float: left&quot;&gt;</span><br><span class="line">      &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-aside&gt;</span><br><span class="line">    &lt;&#x2F;el-container&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">        &lt;el-dropdown&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">          &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">      &lt;&#x2F;el-header&gt;</span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-main&gt;</span><br><span class="line">    &lt;&#x2F;el-container&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Main&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #55cfff;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">"../view/Main"</span>;</span><br><span class="line"><span class="keyword">import</span> Profile <span class="keyword">from</span> <span class="string">"../view/user/Profile"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"../view/user/List"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/main'</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/user/profile'</span>,</span><br><span class="line">          component: Profile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/user/list'</span>,</span><br><span class="line">          component: List</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：以 <code>/</code>开头的嵌套路径会被当作根路径，否则就是相对当前路径</strong></p>
<h3 id="2、参数传递"><a href="#2、参数传递" class="headerlink" title="2、参数传递"></a>2、参数传递</h3><p>在Main.vue里修改个人信息的路由链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'profile', params: &#123;id: 1&#125;&#125;"</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给to属性加<code>:</code>符号绑定数据，name参数只能传递路径的name，所以修改路由配置，同时在path上绑定参数名</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">path: '/main',</span><br><span class="line">component: Main,</span><br><span class="line">children: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: 'profile',</span><br><span class="line">    path: '/user/profile/:id',</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/user/list',</span><br><span class="line">    component: List</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>最后修改Profile.vue显示参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>演示：</p>
<p><img src="%60CBDALS%5DJB30POAOHQH7%60B.gif" alt="img"></p>
<h3 id="3、重定向"><a href="#3、重定向" class="headerlink" title="3、重定向"></a>3、重定向</h3><p>重定向也是通过 routes 配置来完成的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: '/index',</span><br><span class="line">  redirect: '/main'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，访问<code>/index</code>就会跳转到<code>/main</code>路径</p>
<h3 id="4、404页面"><a href="#4、404页面" class="headerlink" title="4、404页面"></a>4、404页面</h3><blockquote>
<p>常规参数只会匹配被<code>/</code>分隔的URL片段中的字符。如果想匹配任意路径，我们可以使用通配符<code>*</code></p>
<p>当使用通配符路由时，请确保路由的顺序是正确的，也就是说<strong>含有通配符的路由应该放在最后</strong>。路由<code>{ path: &#39;*&#39; }</code>通常用于客户端 404 错误</p>
</blockquote>
<p>view目录下新建一个Error.vue文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;404，not found&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Error&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在路由配置里增加一个路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入略</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      component: <span class="built_in">Error</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5、路由钩子（组件内的导航守卫）"><a href="#5、路由钩子（组件内的导航守卫）" class="headerlink" title="5、路由钩子（组件内的导航守卫）"></a>5、路由钩子（组件内的导航守卫）</h3><p>类似于springMVC的拦截器</p>
<blockquote>
<p>“导航”表示路由正在发生改变</p>
</blockquote>
<p>修改Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Profile&quot;,</span><br><span class="line">    beforeRouteEnter:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;进入路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;更新路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave:(to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;离开路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>to: Route： 即将要进入的目标路由对象</p>
</li>
<li><p>from: Route： 当前导航正要离开的路由对象</p>
</li>
<li><p>next: Function： 一定要调用该方法来释放这个钩子。执行效果依赖next方法的调用参数。</p>
<ul>
<li>next():：进行管道中的下一个钩子。</li>
<li>next(false)： 中断当前的导航。</li>
<li>next(‘/‘) 或者 next({ path: ‘/‘ }):：跳转到一个不同的地址。</li>
</ul>
</li>
</ul>
<p>方法说明：</p>
<ul>
<li>beforeRouteEnter：在渲染该组件的对应路由被确认前调用，<strong>不能</strong>获取组件实例 <code>this</code>，因为当守卫执行前，组件实例还没被创建</li>
<li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用，比如路径<code>/user/profile/1</code>跳转到<code>/user/profile/2</code>，由于会渲染同样的组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 <code>this</code></li>
<li>beforeRouteLeave：导航离开该组件的对应路由时调用，可以访问组件实例 <code>this</code></li>
</ul>
<h3 id="6、HTML5-History-模式"><a href="#6、HTML5-History-模式" class="headerlink" title="6、HTML5 History 模式"></a>6、HTML5 History 模式</h3><p>前面关于路由的所有示例，路径上都会有一个<code>#</code>符号，这是因为</p>
<blockquote>
<p>vue-router默认hash模式 —— 使用URL的hash来模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p>
<p>如果不想要很丑的hash，我们可以用路由的history模式，这种模式充分利用history.pushState API 来完成URL跳转而无须重新加载页面。</p>
</blockquote>
<p>修改路由配置，增加一个属性，注意history是字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">      <span class="comment">// 略</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用history模式时，URL就像正常的url了</p>
<p><img src="image-20200621211554813.png" alt="image-20200621211554813"></p>
<p>需要注意的是，这种模式需要后台配置的支持。因为vue应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器访问如例如这样<code>http://oursite.com/user/id</code>的路径时会返回404</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/vue/vue-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：<a href="https://www.bilibili.com/video/BV18E411a7mC" target="_blank" rel="noopener">【狂神说Java】Vue最新快速上手教程通俗易懂</a></strong>前12P</p>
<hr>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
<a id="more"></a>

<h3 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h3><h4 id="1、下载到本地并使用-lt-script-gt-引入"><a href="#1、下载到本地并使用-lt-script-gt-引入" class="headerlink" title="1、下载到本地并使用&lt;script&gt;引入"></a>1、下载到本地并使用<code>&lt;script&gt;</code>引入</h4><p><a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">开发版本</a>：包含完整的警告和调试模式</p>
<p><a href="https://cn.vuejs.org/js/vue.min.js" target="_blank" rel="noopener">生产版本</a>：压缩后的代码，删除了警告，&lt;100KB</p>
<h4 id="2、使用CDN引用（推荐）"><a href="#2、使用CDN引用（推荐）" class="headerlink" title="2、使用CDN引用（推荐）"></a>2、使用CDN引用（推荐）</h4><p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些提供CDN服务的网站：</p>
<ul>
<li><a href="https://www.bootcdn.cn" target="_blank" rel="noopener">https://www.bootcdn.cn</a></li>
<li><a href="https://www.staticfile.org" target="_blank" rel="noopener">https://www.staticfile.org</a></li>
<li><a href="https://cdnjs.com/" target="_blank" rel="noopener">https://cdnjs.com/</a> (国外)</li>
</ul>
<h3 id="三、第一个Vue程序"><a href="#三、第一个Vue程序" class="headerlink" title="三、第一个Vue程序"></a>三、第一个Vue程序</h3><p>步骤：先创建一个HTML5文件，在body下方使用script标签引入vue。在下面一个script标签里new一个Vue对象，变量名随意。然后增加一个el参数，值为<code>#app</code>，对应body体里的div标签，下一个参数data使用json格式数据，里面可以自定义key-value对。然后在div中使用双大括号引用这个数据，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		&#123;&#123;message&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">"hello vue!"</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如何体现数据绑定？</strong>F12打开调试控制台，修改message的值，此时页面没有刷新，但显示的值改变了</p>
<p>![](GIF 2020-6-15 21-19-16.gif)</p>
<h3 id="四、入门示例"><a href="#四、入门示例" class="headerlink" title="四、入门示例"></a>四、入门示例</h3><h4 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h4><ul>
<li><code>v-bind</code>前缀可以给html标签的属性绑定数据</li>
<li>判断：<code>v-if、v-else-if、v-else</code>，判断结果为false的标签不会显示</li>
<li>循环：<code>v-for=&quot;(每次遍历取出的对象, 当前项的索引) in 被遍历的对象&quot;</code>，其中索引从0开始，代表索引的变量名可以是任意的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据绑定--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">		鼠标悬浮显示数据绑定消息</span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--判断--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isOk"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">"isOk"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>no<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--循环--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span></span><br><span class="line">		&#123;&#123;item.msg&#125;&#125;——&#123;&#123;index&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">"hello vue"</span>,</span></span><br><span class="line"><span class="actionscript">			isOk: <span class="literal">true</span>,</span></span><br><span class="line">			items: [</span><br><span class="line"><span class="actionscript">				&#123;msg: <span class="string">"项目1"</span>&#125;, &#123;msg: <span class="string">"项目2"</span>&#125;, &#123;msg: <span class="string">"项目3"</span>&#125;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、事件绑定"><a href="#2、事件绑定" class="headerlink" title="2、事件绑定"></a>2、事件绑定</h4><p>相当于<code>onclick=&quot;alert(&#39;hello&#39;)</code>，vue通过分离代码再绑定操作，提高了代码灵活性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			say: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				alert(<span class="string">"hello"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意<code>methods</code>拼写，复数方法</p>
<h4 id="3、双向绑定数据"><a href="#3、双向绑定数据" class="headerlink" title="3、双向绑定数据"></a>3、双向绑定数据</h4><p>文本框里输入字符，后面会同步显示。F12更改msg的值，也会同步显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"在这里输入文本"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">		&#123;&#123;msg&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			msg: <span class="string">""</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、组件"><a href="#4、组件" class="headerlink" title="4、组件"></a>4、组件</h4><p><code>Vue.component(组件名, {配置选项})</code>组件全局注册语法，它需要放在<code>new Vue</code>前面。</p>
<p><code>props</code>是子组件用来接受父组件传递过来的数据的一个自定义属性，使用组件时用<code>v-bind</code>来绑定数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:itemref</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">"itemref"</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;itemref&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5、Axios"><a href="#5、Axios" class="headerlink" title="5、Axios"></a>5、Axios</h4><blockquote>
<p>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。</p>
</blockquote>
<p>首先准备一个json文件，模拟json数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vue"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://cn.vuejs.org/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用CDN导入axios库，vue对象里增加一个<code>data()</code>方法（<strong>注意不是data属性</strong>），直接return上面json数据一致的格式。</p>
<p>使用<code>mounted()</code>方法（<strong>生命周期钩子</strong>的函数）：这个方法在html渲染完成后调用，通常为初始化页面完成后，再对html的dom节点进行一些需要的操作。</p>
<p>在这里使用axios执行get请求，使用链式调用的方式传递url，将响应的数据与Vue对象里Data方法的info属性对应，最后再调用并显示数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"info.url"</span>&gt;</span>Vue官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/axios/0.19.2/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data()&#123;</span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line">				info: &#123;</span><br><span class="line"><span class="actionscript">					<span class="string">"name"</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">					<span class="string">"url"</span>: <span class="literal">null</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted()&#123;</span><br><span class="line"><span class="javascript">			axios.get(<span class="string">'../menu.json'</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="keyword">this</span>.info=response.data));</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>附图：Vue实例生命周期</p>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p>
<h4 id="6、计算属性"><a href="#6、计算属性" class="headerlink" title="6、计算属性"></a>6、计算属性</h4><blockquote>
<p>对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
</blockquote>
<h5 id="6-1-基础例子"><a href="#6-1-基础例子" class="headerlink" title="6.1 基础例子"></a>6.1 基础例子</h5><p>先示范一下Vue官网教程的例子。computed里的方法调用时直接书写方法名，不加括号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">'Hello'</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		computed: &#123;</span><br><span class="line"><span class="actionscript">			reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-2-computed与methods"><a href="#6-2-computed与methods" class="headerlink" title="6.2 computed与methods"></a>6.2 computed与methods</h5><p>可以使用调用方法来达到上面同样的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">'Hello'</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于它们的区别，官网上是这样解释的：</p>
<blockquote>
<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
</blockquote>
<p>重点在于基于响应式依赖的<code>computed</code>的缓存机制：只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<h4 id="7、插槽"><a href="#7、插槽" class="headerlink" title="7、插槽"></a>7、插槽</h4><blockquote>
<p>插槽是Vue实现的一套内容分发的API，将<slot>元素作为承载分发内容的出口。</p>
</blockquote>
<p>也就是说它是基于组件机制下的内容，可以使各组件联系起来。</p>
<p>这个例子展示的是具名插槽：可以给不同的插槽起个名字，一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">"list-title"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">"list-items"</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:item</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-title'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-items'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-title"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-items"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'item'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据如何传递的？</strong>如图所示，可以更改相应的参数名来验证</p>
<p><img src="image-20200617151117749.png" alt="image-20200617151117749"></p>
<p>如果上面的例子太复杂，可以看看下面这个，template里去掉slot标签后，视图中传递的数据是无效的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		&#123;&#123;title&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8、自定义事件"><a href="#8、自定义事件" class="headerlink" title="8、自定义事件"></a>8、自定义事件</h4><blockquote>
<p>当子组件需要向父组件传递数据时，就会用到自定义事件</p>
</blockquote>
<p>基于上面那个例子，使用自定义事件来实现：点击按钮后删除当前项（包括数据）</p>
<p>需要注意的地方：组件的模版只能有一个根标签，所以要把button写在li里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">"list-title"</span> <span class="attr">:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">"list-items"</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in items"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:item</span>=<span class="string">"item"</span> <span class="attr">:index</span>=<span class="string">"i"</span> @<span class="attr">remove</span>=<span class="string">"removeItem(i)"</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-title'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'list-items'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-title"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">"list-items"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">		props: [<span class="string">'item'</span>, <span class="string">'index'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml">——<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'doRemove'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>",</span></span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			doRemove: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.$emit(<span class="string">'remove'</span>, index)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">"#app"</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			title: <span class="string">"编程语言"</span>,</span></span><br><span class="line"><span class="actionscript">			items: [<span class="string">"java"</span>, <span class="string">"c++"</span>, <span class="string">"php"</span>, <span class="string">"python"</span>]</span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			removeItem: <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">this</span>.items.splice(index, <span class="number">1</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>事件是如何关联的？</strong>如下图</p>
<p><img src="image-20200617165518663.png" alt="image-20200617165518663"></p>
<p>引用官方API上一个简单的例子来演示<code>$emit</code>的作用</p>
<blockquote>
<p>触发当前实例上的事件。附加参数都会传给监听器回调。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"emit-example-simple"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-button</span> <span class="attr">v-on:welcome</span>=<span class="string">"sayHi"</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.6.11/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">'welcome-button'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">		template: `<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('welcome')"</span>&gt;</span></span></span></span><br><span class="line">						Click me to be welcomed</span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`</span></span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#emit-example-simple'</span>,</span></span><br><span class="line">		methods: &#123;</span><br><span class="line"><span class="actionscript">			sayHi: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				alert(<span class="string">'Hi!'</span>)</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="接下来学习：vue-cli"><a href="#接下来学习：vue-cli" class="headerlink" title="接下来学习：vue-cli"></a>接下来学习：vue-cli</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
